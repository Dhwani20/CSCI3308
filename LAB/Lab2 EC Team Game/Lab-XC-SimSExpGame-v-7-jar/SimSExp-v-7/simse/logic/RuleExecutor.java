/* File generated by: simse.codegenerator.logicgenerator.RuleExecutorGenerator */
package simse.logic;
import simse.state.*;
import simse.gui.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import java.util.*;
import javax.swing.*;
public class RuleExecutor
{
public static final int UPDATE_ALL_CONTINUOUS = 0;
public static final int UPDATE_ONE = 1;

private State state;
private Random ranNumGen;
private TriggerChecker triggerChecker;
private DestroyerChecker destroyerChecker;

public RuleExecutor(State s)
{
state = s;
ranNumGen = new Random();
}
public void setTriggerChecker(TriggerChecker t) {
triggerChecker = t;
}

public void setDestroyerChecker(DestroyerChecker d) {
destroyerChecker = d;
}

public void update(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action)
{
setEmpProd(gui, updateInstructions, ruleName, action);
setNotAcceptanceTesting(gui, updateInstructions, ruleName, action);
setNumFailedTests(gui, updateInstructions, ruleName, action);
incNumUserStories(gui, updateInstructions, ruleName, action);
setCodePcntErroneousAccTesting(gui, updateInstructions, ruleName, action);
incReleasePlanCompleteness(gui, updateInstructions, ruleName, action);
setUSPcntErroneousAccTesting(gui, updateInstructions, ruleName, action);
incIterationPlanCompletenessUserStories(gui, updateInstructions, ruleName, action);
incIterationPlanCompletnessProTasks(gui, updateInstructions, ruleName, action);
incCompletenessAccTests(gui, updateInstructions, ruleName, action);
incDesignCompleteness(gui, updateInstructions, ruleName, action);
incCompletenessUnitTests(gui, updateInstructions, ruleName, action);
increaseCodingStandardKnowledge(gui, updateInstructions, ruleName, action);
incCodeCompletenessProgram(gui, updateInstructions, ruleName, action);
incCodeCompletenessPairProgramRJ(gui, updateInstructions, ruleName, action);
incCodeCompletenessPairProgramTR(gui, updateInstructions, ruleName, action);
setCodePercentErroneousPairProgramRJ(gui, updateInstructions, ruleName, action);
setCodePercentErroneousPairProgramTR(gui, updateInstructions, ruleName, action);
setCodePercentErroneousPairProgramPS(gui, updateInstructions, ruleName, action);
setCodePercentErroneousProgram(gui, updateInstructions, ruleName, action);
incCodeCompletenessPairProgramPS(gui, updateInstructions, ruleName, action);
incSpecificationCompletenessUserStories(gui, updateInstructions, ruleName, action);
setProgrammingProgramCont(gui, updateInstructions, ruleName, action);
incNumUserStoriesImplementedProgram(gui, updateInstructions, ruleName, action);
incNumUSImplPairProgramRJ(gui, updateInstructions, ruleName, action);
setProgrammingPairProgramRJCont(gui, updateInstructions, ruleName, action);
incNumUSImplPairProgramTR(gui, updateInstructions, ruleName, action);
setProgrammingPairProgramTRCont(gui, updateInstructions, ruleName, action);
setProgrammingPairProgramPSCont(gui, updateInstructions, ruleName, action);
incSumRepNumbersProgram(gui, updateInstructions, ruleName, action);
removeErrorsFromCode(gui, updateInstructions, ruleName, action);
incSumRepNumbersPairProgRJ(gui, updateInstructions, ruleName, action);
incSumRepNumbersPairProgTR(gui, updateInstructions, ruleName, action);
incSumRepNumbersPairProgPS(gui, updateInstructions, ruleName, action);
incPercentRefactored(gui, updateInstructions, ruleName, action);
incNumErrorsRefactor(gui, updateInstructions, ruleName, action);
incPercentIntegratedCodeRJ(gui, updateInstructions, ruleName, action);
incPercentIntegratedCodeTR(gui, updateInstructions, ruleName, action);
incPercentIntegratedCodePS(gui, updateInstructions, ruleName, action);
incNumErrorsIntegrateRJ(gui, updateInstructions, ruleName, action);
incNumErrorsIntegrateTR(gui, updateInstructions, ruleName, action);
incNumErrorsIntegratePS(gui, updateInstructions, ruleName, action);
incPercentIntegratedCode(gui, updateInstructions, ruleName, action);
incNumErrorsIntegrate(gui, updateInstructions, ruleName, action);
setIntegratingContRJ(gui, updateInstructions, ruleName, action);
setIntegratingContTR(gui, updateInstructions, ruleName, action);
setIntegratingContPS(gui, updateInstructions, ruleName, action);
setIntegratingCont(gui, updateInstructions, ruleName, action);
incAcceptanceTestRun(gui, updateInstructions, ruleName, action);
incNumUserStoriesIntegrated(gui, updateInstructions, ruleName, action);
incPcntErroneousUserStories(gui, updateInstructions, ruleName, action);
setNotIdleCreateUST(gui, updateInstructions, ruleName, action);
setNotIdleCreateUSC(gui, updateInstructions, ruleName, action);
setIdleCreateUS(gui, updateInstructions, ruleName, action);
setManagementInvolved(gui, updateInstructions, ruleName, action);
setCustomerInvolved(gui, updateInstructions, ruleName, action);
setNotIdleReleaseMtgT(gui, updateInstructions, ruleName, action);
setNotIdleReleaseMtgC(gui, updateInstructions, ruleName, action);
setUserStoriesPrioritized(gui, updateInstructions, ruleName, action);
setIdleReleaseMtg(gui, updateInstructions, ruleName, action);
setIterationStarted(gui, updateInstructions, ruleName, action);
setNumUSIntegratedBeginIteration(gui, updateInstructions, ruleName, action);
setPercentErroneousBeginIteration(gui, updateInstructions, ruleName, action);
resetArtifactAndEmpVals(gui, updateInstructions, ruleName, action);
resetTimeSinceLastRelease(gui, updateInstructions, ruleName, action);
setIterationPlanningMeetingStarted(gui, updateInstructions, ruleName, action);
setCustomerInvolvedItPlanning(gui, updateInstructions, ruleName, action);
setEmpsInvolvedInMeeting(gui, updateInstructions, ruleName, action);
setNotIdleIterationMtgT(gui, updateInstructions, ruleName, action);
setNotIdleIterationMtgC(gui, updateInstructions, ruleName, action);
setIdleIterationMtg(gui, updateInstructions, ruleName, action);
setUserStoriesChosen(gui, updateInstructions, ruleName, action);
setProgrammingTasksChosen(gui, updateInstructions, ruleName, action);
setCustInvolvedAccTests(gui, updateInstructions, ruleName, action);
updateNumActsCreateATTrig(gui, updateInstructions, ruleName, action);
setNotIdleCreateAccTestsT(gui, updateInstructions, ruleName, action);
setNotIdleCreateAccTestsC(gui, updateInstructions, ruleName, action);
setAccTestsCreated(gui, updateInstructions, ruleName, action);
updateNumActsCreateATDest(gui, updateInstructions, ruleName, action);
setIdleCreateAccTests(gui, updateInstructions, ruleName, action);
updateNumActsDesignTrig(gui, updateInstructions, ruleName, action);
setNotIdleDesignT(gui, updateInstructions, ruleName, action);
setNotIdleDesignC(gui, updateInstructions, ruleName, action);
updateNumActsDesignDest(gui, updateInstructions, ruleName, action);
setIdleDesign(gui, updateInstructions, ruleName, action);
setToolUsedOrNot(gui, updateInstructions, ruleName, action);
updateNumActsCreateUTTrig(gui, updateInstructions, ruleName, action);
setNotIdleCreateUTT(gui, updateInstructions, ruleName, action);
setNotIdleCreateUTC(gui, updateInstructions, ruleName, action);
setUnitTestsCreated(gui, updateInstructions, ruleName, action);
updateNumActsCreateUTDest(gui, updateInstructions, ruleName, action);
setIdleCreateUT(gui, updateInstructions, ruleName, action);
setNotIdleLearnStdT(gui, updateInstructions, ruleName, action);
setNotIdleLearnStdC(gui, updateInstructions, ruleName, action);
setKnowsCodingStandard(gui, updateInstructions, ruleName, action);
setIdleLearnStd(gui, updateInstructions, ruleName, action);
setProgrammingProgramTrig(gui, updateInstructions, ruleName, action);
updateNumActsProgramTrig(gui, updateInstructions, ruleName, action);
setNotIdleProgramT(gui, updateInstructions, ruleName, action);
setNotIdleProgramC(gui, updateInstructions, ruleName, action);
setNotProgrammingProgramDest(gui, updateInstructions, ruleName, action);
updateNumActsProgramDest(gui, updateInstructions, ruleName, action);
setIdleProgram(gui, updateInstructions, ruleName, action);
setProgrammingPairProgramRJTrig(gui, updateInstructions, ruleName, action);
setRJPairProgThisIteration(gui, updateInstructions, ruleName, action);
updateNumActsPairProgRJTrig(gui, updateInstructions, ruleName, action);
setNotIdlePairProgRJT(gui, updateInstructions, ruleName, action);
setNotIdlePairProgRJC(gui, updateInstructions, ruleName, action);
setNotProgrammingPairProgramRJDest(gui, updateInstructions, ruleName, action);
updateNumActsPairProgRJDest(gui, updateInstructions, ruleName, action);
setIdlePairProgRJ(gui, updateInstructions, ruleName, action);
setProgrammingPairProgramTRTrig(gui, updateInstructions, ruleName, action);
setTRPairProgThisIteration(gui, updateInstructions, ruleName, action);
updateNumActsPairProgTRTrig(gui, updateInstructions, ruleName, action);
setNotIdlePairProgTRT(gui, updateInstructions, ruleName, action);
setNotIdlePairProgTRC(gui, updateInstructions, ruleName, action);
setNotProgrammingPairProgramTRDest(gui, updateInstructions, ruleName, action);
updateNumActsPairProgTRDest(gui, updateInstructions, ruleName, action);
setIdlePairProgTR(gui, updateInstructions, ruleName, action);
setProgrammingPairProgramPSTrig(gui, updateInstructions, ruleName, action);
setPSPairProgThisIteration(gui, updateInstructions, ruleName, action);
updateNumActsPairProgPSTrig(gui, updateInstructions, ruleName, action);
setNotIdlePairProgPST(gui, updateInstructions, ruleName, action);
incNumUSImplPairProgramPS(gui, updateInstructions, ruleName, action);
setNotIdlePairProgPSC(gui, updateInstructions, ruleName, action);
setNotProgrammingPairProgramPSDest(gui, updateInstructions, ruleName, action);
updateNumActsPairProgPSDest(gui, updateInstructions, ruleName, action);
setIdlePairProgPS(gui, updateInstructions, ruleName, action);
resetNumAcceptanceTestsRun(gui, updateInstructions, ruleName, action);
updateNumActsUTTrig(gui, updateInstructions, ruleName, action);
setNotIdleUTFixT(gui, updateInstructions, ruleName, action);
setNotIdleUTFixC(gui, updateInstructions, ruleName, action);
updateNumActsUTDest(gui, updateInstructions, ruleName, action);
setIdleUTFix(gui, updateInstructions, ruleName, action);
updateNumActsRefactor(gui, updateInstructions, ruleName, action);
setNotIdleRefactorT(gui, updateInstructions, ruleName, action);
setNotIdleRefactorC(gui, updateInstructions, ruleName, action);
updateNumActsRefactorDest(gui, updateInstructions, ruleName, action);
setIdleRefactor(gui, updateInstructions, ruleName, action);
setIntegratingTrigRJ(gui, updateInstructions, ruleName, action);
updateNumActsIntegrateRJTrig(gui, updateInstructions, ruleName, action);
setNotIdleIntRJT(gui, updateInstructions, ruleName, action);
setNotIdleIntRJC(gui, updateInstructions, ruleName, action);
setNotIntegratingRJ(gui, updateInstructions, ruleName, action);
updateNumActsIntegrateRJDest(gui, updateInstructions, ruleName, action);
setIdleIntRJ(gui, updateInstructions, ruleName, action);
setIntegratingTrigTR(gui, updateInstructions, ruleName, action);
updateNumActsIntegrateTRTrig(gui, updateInstructions, ruleName, action);
setNotIdleIntTRT(gui, updateInstructions, ruleName, action);
setNotIdleIntTRC(gui, updateInstructions, ruleName, action);
setNotIntegratingTR(gui, updateInstructions, ruleName, action);
updateNumActsIntegrateTRDest(gui, updateInstructions, ruleName, action);
setIdleIntTR(gui, updateInstructions, ruleName, action);
setIntegratingTrigPS(gui, updateInstructions, ruleName, action);
updateNumActsIntegratePSTrig(gui, updateInstructions, ruleName, action);
setNotIdleIntPST(gui, updateInstructions, ruleName, action);
setNotIdleIntPSC(gui, updateInstructions, ruleName, action);
setNotIntegratingPS(gui, updateInstructions, ruleName, action);
updateNumActsIntegratePSDest(gui, updateInstructions, ruleName, action);
setIdleIntPS(gui, updateInstructions, ruleName, action);
setIntegratingTrig(gui, updateInstructions, ruleName, action);
updateNumActsIntegrateTrig(gui, updateInstructions, ruleName, action);
setNotIdleIntegrateT(gui, updateInstructions, ruleName, action);
setNotIdleIntegrateC(gui, updateInstructions, ruleName, action);
setNotIntegrating(gui, updateInstructions, ruleName, action);
updateNumActsIntegrateDest(gui, updateInstructions, ruleName, action);
setIdleIntegrate(gui, updateInstructions, ruleName, action);
setAcceptanceTesting(gui, updateInstructions, ruleName, action);
setNotIdleAccTestT(gui, updateInstructions, ruleName, action);
setNotIdleAccTestC(gui, updateInstructions, ruleName, action);
setCustomerInvolvedAccTestDest(gui, updateInstructions, ruleName, action);
setIdleAccTest(gui, updateInstructions, ruleName, action);
resetProjectAttributes(gui, updateInstructions, ruleName, action);
updateNumActivitiesOccurring(gui, updateInstructions, ruleName, action);
updateTimeSinceLastRelease(gui, updateInstructions, ruleName, action);
updateTimeElapsed(gui, updateInstructions, ruleName, action);
resetReleasePlanCompleteness(gui, updateInstructions, ruleName, action);
deactivateOtherActions(gui, updateInstructions, ruleName, action);
reactivateOtherActions(gui, updateInstructions, ruleName, action);
setCustomerComplaining(gui, updateInstructions, ruleName, action);
setCustomerNotComplaining(gui, updateInstructions, ruleName, action);
setPerfectScore(gui, updateInstructions, ruleName, action);
calculateScore(gui, updateInstructions, ruleName, action);
((SimSEGUI)gui).update();
}
// SetEmpProd rule (SetEmployeeProductivities Action):
private void setEmpProd(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<SetEmployeeProductivitiesAction>setemployeeproductivitiesActs = state.getActionStateRepository().getSetEmployeeProductivitiesActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<setemployeeproductivitiesActs.size(); i++)
{
SetEmployeeProductivitiesAction setemployeeproductivitiesAct = setemployeeproductivitiesActs.elementAt(i);
if((setemployeeproductivitiesAct.getAllEmps().size() >= 1) && (setemployeeproductivitiesAct.getAllProjs().size() >= 1))
{
Vector <Employee> emps = setemployeeproductivitiesAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
double numActiveActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActiveActions(emp2).size());
double numActiveActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActiveActions(emp2).size());
double numActiveActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActiveActions(emp2).size());
double numActiveActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActiveActions(emp2).size());
double numActiveActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActiveActions(emp2).size());
double numActiveActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActiveActions(emp2).size());
double numActiveActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActiveActions(emp2).size());
double numActiveActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActiveActions(emp2).size());
double numActiveActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActiveActions(emp2).size());
double numActiveActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActiveActions(emp2).size());
double numActiveActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActiveActions(emp2).size());
double numActiveActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActiveActions(emp2).size());
double numActiveActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActiveActions(emp2).size());
double numActiveActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActiveActions(emp2).size());
double numActiveActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActiveActions(emp2).size());
double numActiveActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActiveActions(emp2).size());
double numActiveActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActiveActions(emp2).size());
double numActiveActionsThisPartAcceptanceTesting = (double)(state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActiveActions(emp2).size());
softwaredeveloper.setProductivity((double)(((double)(softwaredeveloper.getSoftwareDevelopmentExperienceNumerical())) / ( numActiveActionsThisPartCreateUserStories + numActiveActionsThisPartReleasePlanningMeeting + numActiveActionsThisPartIterationPlanningMeeting + numActiveActionsThisPartCreateAcceptanceTests + numActiveActionsThisPartDesign + numActiveActionsThisPartCreateUnitTests + numActiveActionsThisPartLearnCodingStandard + numActiveActionsThisPartProgram + numActiveActionsThisPartPairProgramRobertJoyce + numActiveActionsThisPartPairProgramTimothyReda + numActiveActionsThisPartPairProgramPegSigfreido + numActiveActionsThisPartUnitTestingAndFixing + numActiveActionsThisPartRefactor + numActiveActionsThisPartIntegrateRobertJoyce + numActiveActionsThisPartIntegrateTimothyReda + numActiveActionsThisPartIntegratePegSigfreido + numActiveActionsThisPartIntegrate + numActiveActionsThisPartAcceptanceTesting )));
}
else if(emp2 instanceof Manager)
{
Manager manager = (Manager)emp2;
}
else if(emp2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)emp2;
}
}
Vector <Project> projs = setemployeeproductivitiesAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
// SetNotAcceptanceTesting rule (AcceptanceTesting Action):
private void setNotAcceptanceTesting(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<AcceptanceTestingAction>acceptancetestingActs = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotAcceptanceTesting")))
{
for(int i=0; i<acceptancetestingActs.size(); i++)
{
AcceptanceTestingAction acceptancetestingAct = acceptancetestingActs.elementAt(i);
if(acceptancetestingAct == action)
{
if((acceptancetestingAct.getAllEmps().size() >= 1) && (acceptancetestingAct.getAllCusts().size() >= 1) && (acceptancetestingAct.getAllAcceptanceTestCasess().size() >= 1) && (acceptancetestingAct.getAllUserStoriess().size() >= 1) && (acceptancetestingAct.getAllCodes().size() >= 1) && (acceptancetestingAct.getAllProjs().size() >= 1) && (acceptancetestingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = acceptancetestingAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Customer> custs = acceptancetestingAct.getAllActiveCusts();
for(int j=0; j<custs.size(); j++)
{
Customer cust2 = custs.elementAt(j);
if(cust2 instanceof CustomerRepresentative)
{
CustomerRepresentative customerrepresentative = (CustomerRepresentative)cust2;
}
}
Vector <Artifact> acceptancetestcasess = acceptancetestingAct.getAllActiveAcceptanceTestCasess();
for(int j=0; j<acceptancetestcasess.size(); j++)
{
Artifact acceptancetestcases2 = acceptancetestcasess.elementAt(j);
if(acceptancetestcases2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetestcases2;
}
}
Vector <Artifact> userstoriess = acceptancetestingAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Artifact> codes = acceptancetestingAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = acceptancetestingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setAcceptanceTesting(false);
}
}
Vector <Artifact> releaseplans = acceptancetestingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNumFailedTests rule (AcceptanceTesting Action):
private void setNumFailedTests(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<AcceptanceTestingAction>acceptancetestingActs = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNumFailedTests")))
{
for(int i=0; i<acceptancetestingActs.size(); i++)
{
AcceptanceTestingAction acceptancetestingAct = acceptancetestingActs.elementAt(i);
if(acceptancetestingAct == action)
{
if((acceptancetestingAct.getAllEmps().size() >= 1) && (acceptancetestingAct.getAllCusts().size() >= 1) && (acceptancetestingAct.getAllAcceptanceTestCasess().size() >= 1) && (acceptancetestingAct.getAllUserStoriess().size() >= 1) && (acceptancetestingAct.getAllCodes().size() >= 1) && (acceptancetestingAct.getAllProjs().size() >= 1) && (acceptancetestingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = acceptancetestingAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Customer> custs = acceptancetestingAct.getAllActiveCusts();
for(int j=0; j<custs.size(); j++)
{
Customer cust2 = custs.elementAt(j);
if(cust2 instanceof CustomerRepresentative)
{
CustomerRepresentative customerrepresentative = (CustomerRepresentative)cust2;
}
}
Vector <Artifact> acceptancetestcasess = acceptancetestingAct.getAllActiveAcceptanceTestCasess();
for(int j=0; j<acceptancetestcasess.size(); j++)
{
Artifact acceptancetestcases2 = acceptancetestcasess.elementAt(j);
if(acceptancetestcases2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetestcases2;
double allActiveCodeCodePercentErroneous = 0;
Vector allActiveCodes = acceptancetestingAct.getAllActiveCodes();
for(int k=0; k<allActiveCodes.size(); k++)
{
Object code3 = allActiveCodes.elementAt(k);
if(code3 instanceof Code)
{
allActiveCodeCodePercentErroneous += (double)(((Code)code3).getPercentErroneous());
}
}
acceptancetests.setTestsFailed((double)(( ( 1 - ((double)(acceptancetests.getCustomerInvolvedInCreation())) ) * 100 / 2 ) + ( allActiveCodeCodePercentErroneous )));
}
}
Vector <Artifact> userstoriess = acceptancetestingAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Artifact> codes = acceptancetestingAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = acceptancetestingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = acceptancetestingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// IncNumUserStories rule (CreateUserStories Action):
private void incNumUserStories(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateUserStoriesAction>createuserstoriesActs = state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<createuserstoriesActs.size(); i++)
{
CreateUserStoriesAction createuserstoriesAct = createuserstoriesActs.elementAt(i);
if((createuserstoriesAct.getAllDevelopers().size() >= 1) && (createuserstoriesAct.getAllCustomerReps().size() >= 1) && (createuserstoriesAct.getAllUserStoriess().size() >= 1) && (createuserstoriesAct.getAllProjs().size() >= 1))
{
Vector <Employee> developers = createuserstoriesAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Employee> customerreps = createuserstoriesAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
Vector <Artifact> userstoriess = createuserstoriesAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
double allActiveDeveloperSoftwareDeveloperProductivity = 0;
Vector allActiveDevelopers = createuserstoriesAct.getAllActiveDevelopers();
for(int k=0; k<allActiveDevelopers.size(); k++)
{
Object developer3 = allActiveDevelopers.elementAt(k);
if(developer3 instanceof SoftwareDeveloper)
{
allActiveDeveloperSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)developer3).getProductivity());
}
}
userstories.setNumUserStoriesSpecified((double)(((double)(userstories.getNumUserStoriesSpecified())) + ( allActiveDeveloperSoftwareDeveloperProductivity * .05 )));
}
}
Vector <Project> projs = createuserstoriesAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
// SetCodePcntErroneousAccTesting rule (AcceptanceTesting Action):
private void setCodePcntErroneousAccTesting(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<AcceptanceTestingAction>acceptancetestingActs = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetCodePcntErroneousAccTesting")))
{
for(int i=0; i<acceptancetestingActs.size(); i++)
{
AcceptanceTestingAction acceptancetestingAct = acceptancetestingActs.elementAt(i);
if(acceptancetestingAct == action)
{
if((acceptancetestingAct.getAllEmps().size() >= 1) && (acceptancetestingAct.getAllCusts().size() >= 1) && (acceptancetestingAct.getAllAcceptanceTestCasess().size() >= 1) && (acceptancetestingAct.getAllUserStoriess().size() >= 1) && (acceptancetestingAct.getAllCodes().size() >= 1) && (acceptancetestingAct.getAllProjs().size() >= 1) && (acceptancetestingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = acceptancetestingAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Customer> custs = acceptancetestingAct.getAllActiveCusts();
for(int j=0; j<custs.size(); j++)
{
Customer cust2 = custs.elementAt(j);
if(cust2 instanceof CustomerRepresentative)
{
CustomerRepresentative customerrepresentative = (CustomerRepresentative)cust2;
}
}
Vector <Artifact> acceptancetestcasess = acceptancetestingAct.getAllActiveAcceptanceTestCasess();
for(int j=0; j<acceptancetestcasess.size(); j++)
{
Artifact acceptancetestcases2 = acceptancetestcasess.elementAt(j);
if(acceptancetestcases2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetestcases2;
}
}
Vector <Artifact> userstoriess = acceptancetestingAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Artifact> codes = acceptancetestingAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveAcceptanceTestCasesAcceptanceTestsCustomerInvolvedInCreation = 0;
Vector allActiveAcceptanceTestCasess = acceptancetestingAct.getAllActiveAcceptanceTestCasess();
for(int k=0; k<allActiveAcceptanceTestCasess.size(); k++)
{
Object acceptancetestcases3 = allActiveAcceptanceTestCasess.elementAt(k);
if(acceptancetestcases3 instanceof AcceptanceTests)
{
allActiveAcceptanceTestCasesAcceptanceTestsCustomerInvolvedInCreation += (double)(((AcceptanceTests)acceptancetestcases3).getCustomerInvolvedInCreation());
}
}
code.setPercentErroneous((double)(((double)(code.getPercentErroneous())) + ( ( 1 - allActiveAcceptanceTestCasesAcceptanceTestsCustomerInvolvedInCreation ) * 100 / 2 )));
}
}
Vector <Project> projs = acceptancetestingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = acceptancetestingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// IncReleasePlanCompleteness rule (ReleasePlanningMeeting Action):
private void incReleasePlanCompleteness(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ReleasePlanningMeetingAction>releaseplanningmeetingActs = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<releaseplanningmeetingActs.size(); i++)
{
ReleasePlanningMeetingAction releaseplanningmeetingAct = releaseplanningmeetingActs.elementAt(i);
if((releaseplanningmeetingAct.getAllDevelopers().size() >= 1) && (releaseplanningmeetingAct.getAllManagers().size() >= 0) && (releaseplanningmeetingAct.getAllCustomerReps().size() >= 0) && (releaseplanningmeetingAct.getAllReleasePlans().size() >= 1) && (releaseplanningmeetingAct.getAllUserStoriess().size() >= 1) && (releaseplanningmeetingAct.getAllProjs().size() >= 1))
{
Vector <Employee> developers = releaseplanningmeetingAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Employee> managers = releaseplanningmeetingAct.getAllActiveManagers();
for(int j=0; j<managers.size(); j++)
{
Employee manager2 = managers.elementAt(j);
if(manager2 instanceof Manager)
{
Manager manager = (Manager)manager2;
}
}
Vector <Employee> customerreps = releaseplanningmeetingAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
Vector <Artifact> releaseplans = releaseplanningmeetingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
double allActiveDeveloperSoftwareDeveloperProductivity = 0;
Vector allActiveDevelopers = releaseplanningmeetingAct.getAllActiveDevelopers();
for(int k=0; k<allActiveDevelopers.size(); k++)
{
Object developer3 = allActiveDevelopers.elementAt(k);
if(developer3 instanceof SoftwareDeveloper)
{
allActiveDeveloperSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)developer3).getProductivity());
}
}
releaseplan.setCompleteness((double)(((double)(releaseplan.getCompleteness())) + ( allActiveDeveloperSoftwareDeveloperProductivity * .05 )));
}
}
Vector <Artifact> userstoriess = releaseplanningmeetingAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Project> projs = releaseplanningmeetingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
// SetUSPcntErroneousAccTesting rule (AcceptanceTesting Action):
private void setUSPcntErroneousAccTesting(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<AcceptanceTestingAction>acceptancetestingActs = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetUSPcntErroneousAccTesting")))
{
for(int i=0; i<acceptancetestingActs.size(); i++)
{
AcceptanceTestingAction acceptancetestingAct = acceptancetestingActs.elementAt(i);
if(acceptancetestingAct == action)
{
if((acceptancetestingAct.getAllEmps().size() >= 1) && (acceptancetestingAct.getAllCusts().size() >= 1) && (acceptancetestingAct.getAllAcceptanceTestCasess().size() >= 1) && (acceptancetestingAct.getAllUserStoriess().size() >= 1) && (acceptancetestingAct.getAllCodes().size() >= 1) && (acceptancetestingAct.getAllProjs().size() >= 1) && (acceptancetestingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = acceptancetestingAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Customer> custs = acceptancetestingAct.getAllActiveCusts();
for(int j=0; j<custs.size(); j++)
{
Customer cust2 = custs.elementAt(j);
if(cust2 instanceof CustomerRepresentative)
{
CustomerRepresentative customerrepresentative = (CustomerRepresentative)cust2;
}
}
Vector <Artifact> acceptancetestcasess = acceptancetestingAct.getAllActiveAcceptanceTestCasess();
for(int j=0; j<acceptancetestcasess.size(); j++)
{
Artifact acceptancetestcases2 = acceptancetestcasess.elementAt(j);
if(acceptancetestcases2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetestcases2;
}
}
Vector <Artifact> userstoriess = acceptancetestingAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
double allActiveCodeCodePercentIntegrated = 0;
Vector allActiveCodes = acceptancetestingAct.getAllActiveCodes();
for(int k=0; k<allActiveCodes.size(); k++)
{
Object code3 = allActiveCodes.elementAt(k);
if(code3 instanceof Code)
{
allActiveCodeCodePercentIntegrated += (double)(((Code)code3).getPercentIntegrated());
}
}
double allActiveCodeCodePercentErroneous = 0;
for(int k=0; k<allActiveCodes.size(); k++)
{
Object code3 = allActiveCodes.elementAt(k);
if(code3 instanceof Code)
{
allActiveCodeCodePercentErroneous += (double)(((Code)code3).getPercentErroneous());
}
}
userstories.setPercentErroneous((double)(( ( ( allActiveCodeCodePercentIntegrated / 100 ) * 20 * ( allActiveCodeCodePercentErroneous / 100 ) ) + ( ((double)(userstories.getNumUSIntegratedBeginningOfIteration())) * ( ((double)(userstories.getPercentErroneousBeginningOfIteration())) / 100 ) ) ) / ((double)(userstories.getNumUserStoriesIntegrated())) * 100));
}
}
Vector <Artifact> codes = acceptancetestingAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = acceptancetestingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = acceptancetestingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// IncIterationPlanCompletenessUserStories rule (ChooseUserStoriesForIteration Action):
private void incIterationPlanCompletenessUserStories(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ChooseUserStoriesForIterationAction>chooseuserstoriesforiterationActs = state.getActionStateRepository().getChooseUserStoriesForIterationActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<chooseuserstoriesforiterationActs.size(); i++)
{
ChooseUserStoriesForIterationAction chooseuserstoriesforiterationAct = chooseuserstoriesforiterationActs.elementAt(i);
if((chooseuserstoriesforiterationAct.getAllEmps().size() >= 1) && (chooseuserstoriesforiterationAct.getAllProjs().size() >= 1) && (chooseuserstoriesforiterationAct.getAllIterationPlans().size() >= 1) && (chooseuserstoriesforiterationAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = chooseuserstoriesforiterationAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
else if(emp2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)emp2;
}
}
Vector <Project> projs = chooseuserstoriesforiterationAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> iterationplans = chooseuserstoriesforiterationAct.getAllActiveIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact iterationplan2 = iterationplans.elementAt(j);
if(iterationplan2 instanceof CurrentIterationPlan)
{
CurrentIterationPlan currentiterationplan = (CurrentIterationPlan)iterationplan2;
double allActiveEmpSoftwareDeveloperProductivity = 0;
Vector allActiveEmps = chooseuserstoriesforiterationAct.getAllActiveEmps();
for(int k=0; k<allActiveEmps.size(); k++)
{
Object emp3 = allActiveEmps.elementAt(k);
if(emp3 instanceof SoftwareDeveloper)
{
allActiveEmpSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)emp3).getProductivity());
}
}
double allActiveReleasePlanReleasePlanCustomerInvolved = 0;
Vector allActiveReleasePlans = chooseuserstoriesforiterationAct.getAllActiveReleasePlans();
for(int k=0; k<allActiveReleasePlans.size(); k++)
{
Object releaseplan3 = allActiveReleasePlans.elementAt(k);
if(releaseplan3 instanceof ReleasePlan)
{
allActiveReleasePlanReleasePlanCustomerInvolved += (double)(((ReleasePlan)releaseplan3).getCustomerInvolved());
}
}
currentiterationplan.setCompleteness((double)(((double)(currentiterationplan.getCompleteness())) + ( allActiveEmpSoftwareDeveloperProductivity * .05 ) + ( allActiveReleasePlanReleasePlanCustomerInvolved * 1.68 )));
}
}
Vector <Artifact> releaseplans = chooseuserstoriesforiterationAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncIterationPlanCompletnessProTasks rule (CreateProgrammingTasks Action):
private void incIterationPlanCompletnessProTasks(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateProgrammingTasksAction>createprogrammingtasksActs = state.getActionStateRepository().getCreateProgrammingTasksActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<createprogrammingtasksActs.size(); i++)
{
CreateProgrammingTasksAction createprogrammingtasksAct = createprogrammingtasksActs.elementAt(i);
if((createprogrammingtasksAct.getAllEmps().size() >= 1) && (createprogrammingtasksAct.getAllIterationPlans().size() >= 1) && (createprogrammingtasksAct.getAllProjs().size() >= 1) && (createprogrammingtasksAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = createprogrammingtasksAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Artifact> iterationplans = createprogrammingtasksAct.getAllActiveIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact iterationplan2 = iterationplans.elementAt(j);
if(iterationplan2 instanceof CurrentIterationPlan)
{
CurrentIterationPlan currentiterationplan = (CurrentIterationPlan)iterationplan2;
double allActiveEmpSoftwareDeveloperProductivity = 0;
Vector allActiveEmps = createprogrammingtasksAct.getAllActiveEmps();
for(int k=0; k<allActiveEmps.size(); k++)
{
Object emp3 = allActiveEmps.elementAt(k);
if(emp3 instanceof SoftwareDeveloper)
{
allActiveEmpSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)emp3).getProductivity());
}
}
double allActiveReleasePlanReleasePlanCustomerInvolved = 0;
Vector allActiveReleasePlans = createprogrammingtasksAct.getAllActiveReleasePlans();
for(int k=0; k<allActiveReleasePlans.size(); k++)
{
Object releaseplan3 = allActiveReleasePlans.elementAt(k);
if(releaseplan3 instanceof ReleasePlan)
{
allActiveReleasePlanReleasePlanCustomerInvolved += (double)(((ReleasePlan)releaseplan3).getCustomerInvolved());
}
}
currentiterationplan.setCompleteness((double)(((double)(currentiterationplan.getCompleteness())) + ( allActiveEmpSoftwareDeveloperProductivity * .05 ) + ( allActiveReleasePlanReleasePlanCustomerInvolved * 1.68 )));
}
}
Vector <Project> projs = createprogrammingtasksAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = createprogrammingtasksAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncCompletenessAccTests rule (CreateAcceptanceTests Action):
private void incCompletenessAccTests(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateAcceptanceTestsAction>createacceptancetestsActs = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<createacceptancetestsActs.size(); i++)
{
CreateAcceptanceTestsAction createacceptancetestsAct = createacceptancetestsActs.elementAt(i);
if((createacceptancetestsAct.getAllDevelopers().size() >= 1) && (createacceptancetestsAct.getAllCustReps().size() >= 0) && (createacceptancetestsAct.getAllTestss().size() >= 1) && (createacceptancetestsAct.getAllProjs().size() >= 1) && (createacceptancetestsAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = createacceptancetestsAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Employee> custreps = createacceptancetestsAct.getAllActiveCustReps();
for(int j=0; j<custreps.size(); j++)
{
Employee custrep2 = custreps.elementAt(j);
if(custrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)custrep2;
}
}
Vector <Artifact> testss = createacceptancetestsAct.getAllActiveTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact tests2 = testss.elementAt(j);
if(tests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)tests2;
double allActiveDeveloperSoftwareDeveloperProductivity = 0;
Vector allActiveDevelopers = createacceptancetestsAct.getAllActiveDevelopers();
for(int k=0; k<allActiveDevelopers.size(); k++)
{
Object developer3 = allActiveDevelopers.elementAt(k);
if(developer3 instanceof SoftwareDeveloper)
{
allActiveDeveloperSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)developer3).getProductivity());
}
}
double allActiveCustRepCustomerRepRepNumber = 0;
Vector allActiveCustReps = createacceptancetestsAct.getAllActiveCustReps();
for(int k=0; k<allActiveCustReps.size(); k++)
{
Object custrep3 = allActiveCustReps.elementAt(k);
if(custrep3 instanceof CustomerRep)
{
allActiveCustRepCustomerRepRepNumber += (double)(((CustomerRep)custrep3).getRepNumber());
}
}
acceptancetests.setCompleteness((double)(((double)(acceptancetests.getCompleteness())) + ( allActiveDeveloperSoftwareDeveloperProductivity * .075 ) + ( allActiveCustRepCustomerRepRepNumber * .75 )));
}
}
Vector <Project> projs = createacceptancetestsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = createacceptancetestsAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncDesignCompleteness rule (Design Action):
private void incDesignCompleteness(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<DesignAction>designActs = state.getActionStateRepository().getDesignActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<designActs.size(); i++)
{
DesignAction designAct = designActs.elementAt(i);
if((designAct.getAllDevelopers().size() >= 1) && (designAct.getAllCRCCardss().size() >= 1) && (designAct.getAllDesigns().size() >= 1) && (designAct.getAllProjs().size() >= 1) && (designAct.getAllAssociatedUserStoriess().size() >= 1) && (designAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = designAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Tool> crccardss = designAct.getAllActiveCRCCardss();
for(int j=0; j<crccardss.size(); j++)
{
Tool crccards2 = crccardss.elementAt(j);
if(crccards2 instanceof CRCCards)
{
CRCCards crccards = (CRCCards)crccards2;
}
}
Vector <Artifact> designs = designAct.getAllActiveDesigns();
for(int j=0; j<designs.size(); j++)
{
Artifact design2 = designs.elementAt(j);
if(design2 instanceof Design)
{
Design design = (Design)design2;
double allActiveDeveloperSoftwareDeveloperProductivity = 0;
Vector allActiveDevelopers = designAct.getAllActiveDevelopers();
for(int k=0; k<allActiveDevelopers.size(); k++)
{
Object developer3 = allActiveDevelopers.elementAt(k);
if(developer3 instanceof SoftwareDeveloper)
{
allActiveDeveloperSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)developer3).getProductivity());
}
}
double allActiveProjTheProjectAcceptanceTestsCreatedThisIteration = 0;
Vector allActiveProjs = designAct.getAllActiveProjs();
for(int k=0; k<allActiveProjs.size(); k++)
{
Object proj3 = allActiveProjs.elementAt(k);
if(proj3 instanceof TheProject)
{
allActiveProjTheProjectAcceptanceTestsCreatedThisIteration += (double)(((TheProject)proj3).getAcceptanceTestsCreatedThisIteration());
}
}
design.setNumCRCCardsCompleted((double)(((double)(design.getNumCRCCardsCompleted())) + ( allActiveDeveloperSoftwareDeveloperProductivity * .025 ) * ( allActiveProjTheProjectAcceptanceTestsCreatedThisIteration + 1 )));
}
}
Vector <Project> projs = designAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = designAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = designAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncCompletenessUnitTests rule (CreateUnitTests Action):
private void incCompletenessUnitTests(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateUnitTestsAction>createunittestsActs = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<createunittestsActs.size(); i++)
{
CreateUnitTestsAction createunittestsAct = createunittestsActs.elementAt(i);
if((createunittestsAct.getAllDevelopers().size() >= 1) && (createunittestsAct.getAllTestss().size() >= 1) && (createunittestsAct.getAllTestingFrameworks().size() >= 0) && (createunittestsAct.getAllProjs().size() >= 1) && (createunittestsAct.getAllAssociatedDesigns().size() >= 1) && (createunittestsAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = createunittestsAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Artifact> testss = createunittestsAct.getAllActiveTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact tests2 = testss.elementAt(j);
if(tests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)tests2;
double allActiveDeveloperSoftwareDeveloperProductivity = 0;
Vector allActiveDevelopers = createunittestsAct.getAllActiveDevelopers();
for(int k=0; k<allActiveDevelopers.size(); k++)
{
Object developer3 = allActiveDevelopers.elementAt(k);
if(developer3 instanceof SoftwareDeveloper)
{
allActiveDeveloperSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)developer3).getProductivity());
}
}
double allActiveTestingFrameworkUnitTestingFrameworkProductivityIncreaseFactor = 0;
Vector allActiveTestingFrameworks = createunittestsAct.getAllActiveTestingFrameworks();
for(int k=0; k<allActiveTestingFrameworks.size(); k++)
{
Object testingframework3 = allActiveTestingFrameworks.elementAt(k);
if(testingframework3 instanceof UnitTestingFramework)
{
allActiveTestingFrameworkUnitTestingFrameworkProductivityIncreaseFactor += (double)(((UnitTestingFramework)testingframework3).getProductivityIncreaseFactor());
}
}
unittests.setCompleteness((double)(((double)(unittests.getCompleteness())) + ( ( allActiveDeveloperSoftwareDeveloperProductivity * .0375 ) * ( allActiveTestingFrameworkUnitTestingFrameworkProductivityIncreaseFactor + 1 ) )));
}
}
Vector <Tool> testingframeworks = createunittestsAct.getAllActiveTestingFrameworks();
for(int j=0; j<testingframeworks.size(); j++)
{
Tool testingframework2 = testingframeworks.elementAt(j);
if(testingframework2 instanceof UnitTestingFramework)
{
UnitTestingFramework unittestingframework = (UnitTestingFramework)testingframework2;
}
}
Vector <Project> projs = createunittestsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateddesigns = createunittestsAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> releaseplans = createunittestsAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncreaseCodingStandardKnowledge rule (LearnCodingStandard Action):
private void increaseCodingStandardKnowledge(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<LearnCodingStandardAction>learncodingstandardActs = state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<learncodingstandardActs.size(); i++)
{
LearnCodingStandardAction learncodingstandardAct = learncodingstandardActs.elementAt(i);
if((learncodingstandardAct.getAllDevelopers().size() >= 1) && (learncodingstandardAct.getAllCodingStandards().size() >= 1) && (learncodingstandardAct.getAllProjs().size() >= 1))
{
Vector <Employee> developers = learncodingstandardAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setKnowsCodingStandardNumerical((double)(((double)(softwaredeveloper.getKnowsCodingStandardNumerical())) + .05));
}
}
Vector <Tool> codingstandards = learncodingstandardAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Project> projs = learncodingstandardAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
// IncCodeCompletenessProgram rule (Program Action):
private void incCodeCompletenessProgram(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ProgramAction>programActs = state.getActionStateRepository().getProgramActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<programActs.size(); i++)
{
ProgramAction programAct = programActs.elementAt(i);
if((programAct.getAllDevelopers().size() >= 1) && (programAct.getAllCodes().size() >= 1) && (programAct.getAllCodingStandards().size() >= 1) && (programAct.getAllAssociatedDesigns().size() >= 1) && (programAct.getAllAssociatedUnitTestss().size() >= 1) && (programAct.getAllProjs().size() >= 1) && (programAct.getAllAssociatedUserStoriess().size() >= 1) && (programAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = programAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Artifact> codes = programAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveDeveloperSoftwareDeveloperProductivity = 0;
Vector allActiveDevelopers = programAct.getAllActiveDevelopers();
for(int k=0; k<allActiveDevelopers.size(); k++)
{
Object developer3 = allActiveDevelopers.elementAt(k);
if(developer3 instanceof SoftwareDeveloper)
{
allActiveDeveloperSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)developer3).getProductivity());
}
}
double allActiveAssociatedUnitTestsUnitTestsCompleteness = 0;
Vector allActiveAssociatedUnitTestss = programAct.getAllActiveAssociatedUnitTestss();
for(int k=0; k<allActiveAssociatedUnitTestss.size(); k++)
{
Object associatedunittests3 = allActiveAssociatedUnitTestss.elementAt(k);
if(associatedunittests3 instanceof UnitTests)
{
allActiveAssociatedUnitTestsUnitTestsCompleteness += (double)(((UnitTests)associatedunittests3).getCompleteness());
}
}
double allActiveAssociatedDesignDesignNumCRCCardsCompleted = 0;
Vector allActiveAssociatedDesigns = programAct.getAllActiveAssociatedDesigns();
for(int k=0; k<allActiveAssociatedDesigns.size(); k++)
{
Object associateddesign3 = allActiveAssociatedDesigns.elementAt(k);
if(associateddesign3 instanceof Design)
{
allActiveAssociatedDesignDesignNumCRCCardsCompleted += (double)(((Design)associateddesign3).getNumCRCCardsCompleted());
}
}
code.setCompleteness((double)(((double)(code.getCompleteness())) + ( allActiveDeveloperSoftwareDeveloperProductivity * .0125 ) * ( 1 + ( allActiveAssociatedUnitTestsUnitTestsCompleteness / 100 * .5 ) + ( allActiveAssociatedDesignDesignNumCRCCardsCompleted / 100 * .5 ) )));
}
}
Vector <Tool> codingstandards = programAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = programAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = programAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = programAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = programAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = programAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncCodeCompletenessPairProgramRJ rule (PairProgramRobertJoyce Action):
private void incCodeCompletenessPairProgramRJ(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramRobertJoyceAction>pairprogramrobertjoyceActs = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogramrobertjoyceActs.size(); i++)
{
PairProgramRobertJoyceAction pairprogramrobertjoyceAct = pairprogramrobertjoyceActs.elementAt(i);
if((pairprogramrobertjoyceAct.getAllRoberts().size() >= 1) && (pairprogramrobertjoyceAct.getAllJoyces().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodes().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodingStandards().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramrobertjoyceAct.getAllProjs().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramrobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = pairprogramrobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
}
}
Vector <Employee> joyces = pairprogramrobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
}
}
Vector <Artifact> codes = pairprogramrobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveRobertSoftwareDeveloperProductivity = 0;
Vector allActiveRoberts = pairprogramrobertjoyceAct.getAllActiveRoberts();
for(int k=0; k<allActiveRoberts.size(); k++)
{
Object robert3 = allActiveRoberts.elementAt(k);
if(robert3 instanceof SoftwareDeveloper)
{
allActiveRobertSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)robert3).getProductivity());
}
}
double allActiveJoyceSoftwareDeveloperProductivity = 0;
Vector allActiveJoyces = pairprogramrobertjoyceAct.getAllActiveJoyces();
for(int k=0; k<allActiveJoyces.size(); k++)
{
Object joyce3 = allActiveJoyces.elementAt(k);
if(joyce3 instanceof SoftwareDeveloper)
{
allActiveJoyceSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)joyce3).getProductivity());
}
}
double allActiveAssociatedUnitTestsUnitTestsCompleteness = 0;
Vector allActiveAssociatedUnitTestss = pairprogramrobertjoyceAct.getAllActiveAssociatedUnitTestss();
for(int k=0; k<allActiveAssociatedUnitTestss.size(); k++)
{
Object associatedunittests3 = allActiveAssociatedUnitTestss.elementAt(k);
if(associatedunittests3 instanceof UnitTests)
{
allActiveAssociatedUnitTestsUnitTestsCompleteness += (double)(((UnitTests)associatedunittests3).getCompleteness());
}
}
double allActiveAssociatedDesignDesignNumCRCCardsCompleted = 0;
Vector allActiveAssociatedDesigns = pairprogramrobertjoyceAct.getAllActiveAssociatedDesigns();
for(int k=0; k<allActiveAssociatedDesigns.size(); k++)
{
Object associateddesign3 = allActiveAssociatedDesigns.elementAt(k);
if(associateddesign3 instanceof Design)
{
allActiveAssociatedDesignDesignNumCRCCardsCompleted += (double)(((Design)associateddesign3).getNumCRCCardsCompleted());
}
}
code.setCompleteness((double)(((double)(code.getCompleteness())) + ( ( ( allActiveRobertSoftwareDeveloperProductivity + allActiveJoyceSoftwareDeveloperProductivity ) * .0125 ) * ( 1 + ( allActiveAssociatedUnitTestsUnitTestsCompleteness / 100 * .5 ) + ( allActiveAssociatedDesignDesignNumCRCCardsCompleted / 100 * .5 ) ) * .91 )));
}
}
Vector <Tool> codingstandards = pairprogramrobertjoyceAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramrobertjoyceAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramrobertjoyceAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramrobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramrobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramrobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncCodeCompletenessPairProgramTR rule (PairProgramTimothyReda Action):
private void incCodeCompletenessPairProgramTR(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramTimothyRedaAction>pairprogramtimothyredaActs = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogramtimothyredaActs.size(); i++)
{
PairProgramTimothyRedaAction pairprogramtimothyredaAct = pairprogramtimothyredaActs.elementAt(i);
if((pairprogramtimothyredaAct.getAllTimothys().size() >= 1) && (pairprogramtimothyredaAct.getAllRedas().size() >= 1) && (pairprogramtimothyredaAct.getAllCodes().size() >= 1) && (pairprogramtimothyredaAct.getAllCodingStandards().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramtimothyredaAct.getAllProjs().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramtimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = pairprogramtimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
}
}
Vector <Employee> redas = pairprogramtimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
}
}
Vector <Artifact> codes = pairprogramtimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveTimothySoftwareDeveloperProductivity = 0;
Vector allActiveTimothys = pairprogramtimothyredaAct.getAllActiveTimothys();
for(int k=0; k<allActiveTimothys.size(); k++)
{
Object timothy3 = allActiveTimothys.elementAt(k);
if(timothy3 instanceof SoftwareDeveloper)
{
allActiveTimothySoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)timothy3).getProductivity());
}
}
double allActiveRedaSoftwareDeveloperProductivity = 0;
Vector allActiveRedas = pairprogramtimothyredaAct.getAllActiveRedas();
for(int k=0; k<allActiveRedas.size(); k++)
{
Object reda3 = allActiveRedas.elementAt(k);
if(reda3 instanceof SoftwareDeveloper)
{
allActiveRedaSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)reda3).getProductivity());
}
}
double allActiveAssociatedUnitTestsUnitTestsCompleteness = 0;
Vector allActiveAssociatedUnitTestss = pairprogramtimothyredaAct.getAllActiveAssociatedUnitTestss();
for(int k=0; k<allActiveAssociatedUnitTestss.size(); k++)
{
Object associatedunittests3 = allActiveAssociatedUnitTestss.elementAt(k);
if(associatedunittests3 instanceof UnitTests)
{
allActiveAssociatedUnitTestsUnitTestsCompleteness += (double)(((UnitTests)associatedunittests3).getCompleteness());
}
}
double allActiveAssociatedDesignDesignNumCRCCardsCompleted = 0;
Vector allActiveAssociatedDesigns = pairprogramtimothyredaAct.getAllActiveAssociatedDesigns();
for(int k=0; k<allActiveAssociatedDesigns.size(); k++)
{
Object associateddesign3 = allActiveAssociatedDesigns.elementAt(k);
if(associateddesign3 instanceof Design)
{
allActiveAssociatedDesignDesignNumCRCCardsCompleted += (double)(((Design)associateddesign3).getNumCRCCardsCompleted());
}
}
code.setCompleteness((double)(((double)(code.getCompleteness())) + ( ( ( allActiveTimothySoftwareDeveloperProductivity + allActiveRedaSoftwareDeveloperProductivity ) * .0125 ) * ( 1 + ( allActiveAssociatedUnitTestsUnitTestsCompleteness / 100 * .5 ) + ( allActiveAssociatedDesignDesignNumCRCCardsCompleted / 100 * .5 ) ) * .91 )));
}
}
Vector <Tool> codingstandards = pairprogramtimothyredaAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramtimothyredaAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramtimothyredaAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramtimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramtimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramtimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetCodePercentErroneousPairProgramRJ rule (PairProgramRobertJoyce Action):
private void setCodePercentErroneousPairProgramRJ(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramRobertJoyceAction>pairprogramrobertjoyceActs = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogramrobertjoyceActs.size(); i++)
{
PairProgramRobertJoyceAction pairprogramrobertjoyceAct = pairprogramrobertjoyceActs.elementAt(i);
if((pairprogramrobertjoyceAct.getAllRoberts().size() >= 1) && (pairprogramrobertjoyceAct.getAllJoyces().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodes().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodingStandards().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramrobertjoyceAct.getAllProjs().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramrobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = pairprogramrobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
}
}
Vector <Employee> joyces = pairprogramrobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
}
}
Vector <Artifact> codes = pairprogramrobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveAssociatedDesignDesignNumCRCCardsCompleted = 0;
Vector allActiveAssociatedDesigns = pairprogramrobertjoyceAct.getAllActiveAssociatedDesigns();
for(int k=0; k<allActiveAssociatedDesigns.size(); k++)
{
Object associateddesign3 = allActiveAssociatedDesigns.elementAt(k);
if(associateddesign3 instanceof Design)
{
allActiveAssociatedDesignDesignNumCRCCardsCompleted += (double)(((Design)associateddesign3).getNumCRCCardsCompleted());
}
}
double allActiveAssociatedUnitTestsUnitTestsCompleteness = 0;
Vector allActiveAssociatedUnitTestss = pairprogramrobertjoyceAct.getAllActiveAssociatedUnitTestss();
for(int k=0; k<allActiveAssociatedUnitTestss.size(); k++)
{
Object associatedunittests3 = allActiveAssociatedUnitTestss.elementAt(k);
if(associatedunittests3 instanceof UnitTests)
{
allActiveAssociatedUnitTestsUnitTestsCompleteness += (double)(((UnitTests)associatedunittests3).getCompleteness());
}
}
code.setPercentErroneous((double)(6 + ( ( 100 - allActiveAssociatedDesignDesignNumCRCCardsCompleted ) * .01 * 40 ) + ( ( 100 - allActiveAssociatedUnitTestsUnitTestsCompleteness ) * .01 * 40 )));
}
}
Vector <Tool> codingstandards = pairprogramrobertjoyceAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramrobertjoyceAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramrobertjoyceAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramrobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramrobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramrobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetCodePercentErroneousPairProgramTR rule (PairProgramTimothyReda Action):
private void setCodePercentErroneousPairProgramTR(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramTimothyRedaAction>pairprogramtimothyredaActs = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogramtimothyredaActs.size(); i++)
{
PairProgramTimothyRedaAction pairprogramtimothyredaAct = pairprogramtimothyredaActs.elementAt(i);
if((pairprogramtimothyredaAct.getAllTimothys().size() >= 1) && (pairprogramtimothyredaAct.getAllRedas().size() >= 1) && (pairprogramtimothyredaAct.getAllCodes().size() >= 1) && (pairprogramtimothyredaAct.getAllCodingStandards().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramtimothyredaAct.getAllProjs().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramtimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = pairprogramtimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
}
}
Vector <Employee> redas = pairprogramtimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
}
}
Vector <Artifact> codes = pairprogramtimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveAssociatedDesignDesignNumCRCCardsCompleted = 0;
Vector allActiveAssociatedDesigns = pairprogramtimothyredaAct.getAllActiveAssociatedDesigns();
for(int k=0; k<allActiveAssociatedDesigns.size(); k++)
{
Object associateddesign3 = allActiveAssociatedDesigns.elementAt(k);
if(associateddesign3 instanceof Design)
{
allActiveAssociatedDesignDesignNumCRCCardsCompleted += (double)(((Design)associateddesign3).getNumCRCCardsCompleted());
}
}
double allActiveAssociatedUnitTestsUnitTestsCompleteness = 0;
Vector allActiveAssociatedUnitTestss = pairprogramtimothyredaAct.getAllActiveAssociatedUnitTestss();
for(int k=0; k<allActiveAssociatedUnitTestss.size(); k++)
{
Object associatedunittests3 = allActiveAssociatedUnitTestss.elementAt(k);
if(associatedunittests3 instanceof UnitTests)
{
allActiveAssociatedUnitTestsUnitTestsCompleteness += (double)(((UnitTests)associatedunittests3).getCompleteness());
}
}
code.setPercentErroneous((double)(6 + ( ( 100 - allActiveAssociatedDesignDesignNumCRCCardsCompleted ) * .01 * 40 ) + ( ( 100 - allActiveAssociatedUnitTestsUnitTestsCompleteness ) * .01 * 40 )));
}
}
Vector <Tool> codingstandards = pairprogramtimothyredaAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramtimothyredaAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramtimothyredaAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramtimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramtimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramtimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetCodePercentErroneousPairProgramPS rule (PairProgramPegSigfreido Action):
private void setCodePercentErroneousPairProgramPS(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramPegSigfreidoAction>pairprogrampegsigfreidoActs = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogrampegsigfreidoActs.size(); i++)
{
PairProgramPegSigfreidoAction pairprogrampegsigfreidoAct = pairprogrampegsigfreidoActs.elementAt(i);
if((pairprogrampegsigfreidoAct.getAllPegs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllSigfreidos().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodes().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodingStandards().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedDesigns().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogrampegsigfreidoAct.getAllProjs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogrampegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = pairprogrampegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
}
}
Vector <Employee> sigfreidos = pairprogrampegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
}
}
Vector <Artifact> codes = pairprogrampegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveAssociatedDesignDesignNumCRCCardsCompleted = 0;
Vector allActiveAssociatedDesigns = pairprogrampegsigfreidoAct.getAllActiveAssociatedDesigns();
for(int k=0; k<allActiveAssociatedDesigns.size(); k++)
{
Object associateddesign3 = allActiveAssociatedDesigns.elementAt(k);
if(associateddesign3 instanceof Design)
{
allActiveAssociatedDesignDesignNumCRCCardsCompleted += (double)(((Design)associateddesign3).getNumCRCCardsCompleted());
}
}
double allActiveAssociatedUnitTestsUnitTestsCompleteness = 0;
Vector allActiveAssociatedUnitTestss = pairprogrampegsigfreidoAct.getAllActiveAssociatedUnitTestss();
for(int k=0; k<allActiveAssociatedUnitTestss.size(); k++)
{
Object associatedunittests3 = allActiveAssociatedUnitTestss.elementAt(k);
if(associatedunittests3 instanceof UnitTests)
{
allActiveAssociatedUnitTestsUnitTestsCompleteness += (double)(((UnitTests)associatedunittests3).getCompleteness());
}
}
code.setPercentErroneous((double)(6 + ( ( 100 - allActiveAssociatedDesignDesignNumCRCCardsCompleted ) * .01 * 40 ) + ( ( 100 - allActiveAssociatedUnitTestsUnitTestsCompleteness ) * .01 * 40 )));
}
}
Vector <Tool> codingstandards = pairprogrampegsigfreidoAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogrampegsigfreidoAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogrampegsigfreidoAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogrampegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogrampegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogrampegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetCodePercentErroneousProgram rule (Program Action):
private void setCodePercentErroneousProgram(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ProgramAction>programActs = state.getActionStateRepository().getProgramActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<programActs.size(); i++)
{
ProgramAction programAct = programActs.elementAt(i);
if((programAct.getAllDevelopers().size() >= 1) && (programAct.getAllCodes().size() >= 1) && (programAct.getAllCodingStandards().size() >= 1) && (programAct.getAllAssociatedDesigns().size() >= 1) && (programAct.getAllAssociatedUnitTestss().size() >= 1) && (programAct.getAllProjs().size() >= 1) && (programAct.getAllAssociatedUserStoriess().size() >= 1) && (programAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = programAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Artifact> codes = programAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveAssociatedDesignDesignNumCRCCardsCompleted = 0;
Vector allActiveAssociatedDesigns = programAct.getAllActiveAssociatedDesigns();
for(int k=0; k<allActiveAssociatedDesigns.size(); k++)
{
Object associateddesign3 = allActiveAssociatedDesigns.elementAt(k);
if(associateddesign3 instanceof Design)
{
allActiveAssociatedDesignDesignNumCRCCardsCompleted += (double)(((Design)associateddesign3).getNumCRCCardsCompleted());
}
}
double allActiveAssociatedUnitTestsUnitTestsCompleteness = 0;
Vector allActiveAssociatedUnitTestss = programAct.getAllActiveAssociatedUnitTestss();
for(int k=0; k<allActiveAssociatedUnitTestss.size(); k++)
{
Object associatedunittests3 = allActiveAssociatedUnitTestss.elementAt(k);
if(associatedunittests3 instanceof UnitTests)
{
allActiveAssociatedUnitTestsUnitTestsCompleteness += (double)(((UnitTests)associatedunittests3).getCompleteness());
}
}
code.setPercentErroneous((double)(( 10 + ( ( 100 - allActiveAssociatedDesignDesignNumCRCCardsCompleted ) * .01 * 40 ) + ( ( 100 - allActiveAssociatedUnitTestsUnitTestsCompleteness ) * .01 * 40 ) ) * 1.15));
}
}
Vector <Tool> codingstandards = programAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = programAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = programAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = programAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = programAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = programAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncCodeCompletenessPairProgramPS rule (PairProgramPegSigfreido Action):
private void incCodeCompletenessPairProgramPS(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramPegSigfreidoAction>pairprogrampegsigfreidoActs = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogrampegsigfreidoActs.size(); i++)
{
PairProgramPegSigfreidoAction pairprogrampegsigfreidoAct = pairprogrampegsigfreidoActs.elementAt(i);
if((pairprogrampegsigfreidoAct.getAllPegs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllSigfreidos().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodes().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodingStandards().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedDesigns().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogrampegsigfreidoAct.getAllProjs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogrampegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = pairprogrampegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
}
}
Vector <Employee> sigfreidos = pairprogrampegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
}
}
Vector <Artifact> codes = pairprogrampegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActivePegSoftwareDeveloperProductivity = 0;
Vector allActivePegs = pairprogrampegsigfreidoAct.getAllActivePegs();
for(int k=0; k<allActivePegs.size(); k++)
{
Object peg3 = allActivePegs.elementAt(k);
if(peg3 instanceof SoftwareDeveloper)
{
allActivePegSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)peg3).getProductivity());
}
}
double allActiveSigfreidoSoftwareDeveloperProductivity = 0;
Vector allActiveSigfreidos = pairprogrampegsigfreidoAct.getAllActiveSigfreidos();
for(int k=0; k<allActiveSigfreidos.size(); k++)
{
Object sigfreido3 = allActiveSigfreidos.elementAt(k);
if(sigfreido3 instanceof SoftwareDeveloper)
{
allActiveSigfreidoSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)sigfreido3).getProductivity());
}
}
double allActiveAssociatedUnitTestsUnitTestsCompleteness = 0;
Vector allActiveAssociatedUnitTestss = pairprogrampegsigfreidoAct.getAllActiveAssociatedUnitTestss();
for(int k=0; k<allActiveAssociatedUnitTestss.size(); k++)
{
Object associatedunittests3 = allActiveAssociatedUnitTestss.elementAt(k);
if(associatedunittests3 instanceof UnitTests)
{
allActiveAssociatedUnitTestsUnitTestsCompleteness += (double)(((UnitTests)associatedunittests3).getCompleteness());
}
}
double allActiveAssociatedDesignDesignNumCRCCardsCompleted = 0;
Vector allActiveAssociatedDesigns = pairprogrampegsigfreidoAct.getAllActiveAssociatedDesigns();
for(int k=0; k<allActiveAssociatedDesigns.size(); k++)
{
Object associateddesign3 = allActiveAssociatedDesigns.elementAt(k);
if(associateddesign3 instanceof Design)
{
allActiveAssociatedDesignDesignNumCRCCardsCompleted += (double)(((Design)associateddesign3).getNumCRCCardsCompleted());
}
}
code.setCompleteness((double)(((double)(code.getCompleteness())) + ( ( ( allActivePegSoftwareDeveloperProductivity + allActiveSigfreidoSoftwareDeveloperProductivity ) * .0125 ) * ( 1 + ( allActiveAssociatedUnitTestsUnitTestsCompleteness / 100 * .5 ) + ( allActiveAssociatedDesignDesignNumCRCCardsCompleted / 100 * .5 ) ) * .91 )));
}
}
Vector <Tool> codingstandards = pairprogrampegsigfreidoAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogrampegsigfreidoAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogrampegsigfreidoAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogrampegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogrampegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogrampegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncSpecificationCompletenessUserStories rule (CreateUserStories Action):
private void incSpecificationCompletenessUserStories(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateUserStoriesAction>createuserstoriesActs = state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<createuserstoriesActs.size(); i++)
{
CreateUserStoriesAction createuserstoriesAct = createuserstoriesActs.elementAt(i);
if((createuserstoriesAct.getAllDevelopers().size() >= 1) && (createuserstoriesAct.getAllCustomerReps().size() >= 1) && (createuserstoriesAct.getAllUserStoriess().size() >= 1) && (createuserstoriesAct.getAllProjs().size() >= 1))
{
Vector <Employee> developers = createuserstoriesAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Employee> customerreps = createuserstoriesAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
Vector <Artifact> userstoriess = createuserstoriesAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
userstories.setSpecificationCompleteness((double)(((double)(userstories.getNumUserStoriesSpecified())) / 80 * 100));
}
}
Vector <Project> projs = createuserstoriesAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
// SetProgrammingProgramCont rule (Program Action):
private void setProgrammingProgramCont(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ProgramAction>programActs = state.getActionStateRepository().getProgramActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<programActs.size(); i++)
{
ProgramAction programAct = programActs.elementAt(i);
if((programAct.getAllDevelopers().size() >= 1) && (programAct.getAllCodes().size() >= 1) && (programAct.getAllCodingStandards().size() >= 1) && (programAct.getAllAssociatedDesigns().size() >= 1) && (programAct.getAllAssociatedUnitTestss().size() >= 1) && (programAct.getAllProjs().size() >= 1) && (programAct.getAllAssociatedUserStoriess().size() >= 1) && (programAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = programAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setProgramming(true);
}
}
Vector <Artifact> codes = programAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = programAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = programAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = programAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = programAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = programAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = programAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncNumUserStoriesImplementedProgram rule (Program Action):
private void incNumUserStoriesImplementedProgram(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ProgramAction>programActs = state.getActionStateRepository().getProgramActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<programActs.size(); i++)
{
ProgramAction programAct = programActs.elementAt(i);
if((programAct.getAllDevelopers().size() >= 1) && (programAct.getAllCodes().size() >= 1) && (programAct.getAllCodingStandards().size() >= 1) && (programAct.getAllAssociatedDesigns().size() >= 1) && (programAct.getAllAssociatedUnitTestss().size() >= 1) && (programAct.getAllProjs().size() >= 1) && (programAct.getAllAssociatedUserStoriess().size() >= 1) && (programAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = programAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Artifact> codes = programAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = programAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = programAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = programAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = programAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = programAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
userstories.setImplementationCompleteness((double)(((double)(userstories.getNumUserStoriesImplemented())) / ((double)(userstories.getNumUserStoriesSpecified())) * 100));
double allActiveDeveloperSoftwareDeveloperProductivity = 0;
Vector allActiveDevelopers = programAct.getAllActiveDevelopers();
for(int k=0; k<allActiveDevelopers.size(); k++)
{
Object developer3 = allActiveDevelopers.elementAt(k);
if(developer3 instanceof SoftwareDeveloper)
{
allActiveDeveloperSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)developer3).getProductivity());
}
}
double allActiveAssociatedUnitTestsUnitTestsCompleteness = 0;
Vector allActiveAssociatedUnitTestss = programAct.getAllActiveAssociatedUnitTestss();
for(int k=0; k<allActiveAssociatedUnitTestss.size(); k++)
{
Object associatedunittests3 = allActiveAssociatedUnitTestss.elementAt(k);
if(associatedunittests3 instanceof UnitTests)
{
allActiveAssociatedUnitTestsUnitTestsCompleteness += (double)(((UnitTests)associatedunittests3).getCompleteness());
}
}
double allActiveAssociatedDesignDesignNumCRCCardsCompleted = 0;
Vector allActiveAssociatedDesigns = programAct.getAllActiveAssociatedDesigns();
for(int k=0; k<allActiveAssociatedDesigns.size(); k++)
{
Object associateddesign3 = allActiveAssociatedDesigns.elementAt(k);
if(associateddesign3 instanceof Design)
{
allActiveAssociatedDesignDesignNumCRCCardsCompleted += (double)(((Design)associateddesign3).getNumCRCCardsCompleted());
}
}
userstories.setNumUserStoriesImplemented((double)(((double)(userstories.getNumUserStoriesImplemented())) + ( ( allActiveDeveloperSoftwareDeveloperProductivity * .0125 ) * ( 1 + ( allActiveAssociatedUnitTestsUnitTestsCompleteness / 100 * .5 ) + ( allActiveAssociatedDesignDesignNumCRCCardsCompleted / 100 * .5 ) ) * .1987 )));
}
}
Vector <Artifact> releaseplans = programAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncNumUSImplPairProgramRJ rule (PairProgramRobertJoyce Action):
private void incNumUSImplPairProgramRJ(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramRobertJoyceAction>pairprogramrobertjoyceActs = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogramrobertjoyceActs.size(); i++)
{
PairProgramRobertJoyceAction pairprogramrobertjoyceAct = pairprogramrobertjoyceActs.elementAt(i);
if((pairprogramrobertjoyceAct.getAllRoberts().size() >= 1) && (pairprogramrobertjoyceAct.getAllJoyces().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodes().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodingStandards().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramrobertjoyceAct.getAllProjs().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramrobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = pairprogramrobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
}
}
Vector <Employee> joyces = pairprogramrobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
}
}
Vector <Artifact> codes = pairprogramrobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramrobertjoyceAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramrobertjoyceAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramrobertjoyceAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramrobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramrobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
double allActiveRobertSoftwareDeveloperProductivity = 0;
Vector allActiveRoberts = pairprogramrobertjoyceAct.getAllActiveRoberts();
for(int k=0; k<allActiveRoberts.size(); k++)
{
Object robert3 = allActiveRoberts.elementAt(k);
if(robert3 instanceof SoftwareDeveloper)
{
allActiveRobertSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)robert3).getProductivity());
}
}
double allActiveJoyceSoftwareDeveloperProductivity = 0;
Vector allActiveJoyces = pairprogramrobertjoyceAct.getAllActiveJoyces();
for(int k=0; k<allActiveJoyces.size(); k++)
{
Object joyce3 = allActiveJoyces.elementAt(k);
if(joyce3 instanceof SoftwareDeveloper)
{
allActiveJoyceSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)joyce3).getProductivity());
}
}
double allActiveAssociatedUnitTestsUnitTestsCompleteness = 0;
Vector allActiveAssociatedUnitTestss = pairprogramrobertjoyceAct.getAllActiveAssociatedUnitTestss();
for(int k=0; k<allActiveAssociatedUnitTestss.size(); k++)
{
Object associatedunittests3 = allActiveAssociatedUnitTestss.elementAt(k);
if(associatedunittests3 instanceof UnitTests)
{
allActiveAssociatedUnitTestsUnitTestsCompleteness += (double)(((UnitTests)associatedunittests3).getCompleteness());
}
}
double allActiveAssociatedDesignDesignNumCRCCardsCompleted = 0;
Vector allActiveAssociatedDesigns = pairprogramrobertjoyceAct.getAllActiveAssociatedDesigns();
for(int k=0; k<allActiveAssociatedDesigns.size(); k++)
{
Object associateddesign3 = allActiveAssociatedDesigns.elementAt(k);
if(associateddesign3 instanceof Design)
{
allActiveAssociatedDesignDesignNumCRCCardsCompleted += (double)(((Design)associateddesign3).getNumCRCCardsCompleted());
}
}
userstories.setNumUserStoriesImplemented((double)(((double)(userstories.getNumUserStoriesImplemented())) + ( ( ( allActiveRobertSoftwareDeveloperProductivity + allActiveJoyceSoftwareDeveloperProductivity ) * .0125 ) * ( 1 + ( allActiveAssociatedUnitTestsUnitTestsCompleteness / 100 * .5 ) + ( allActiveAssociatedDesignDesignNumCRCCardsCompleted / 100 * .5 ) ) * .91 * .1987 )));
userstories.setImplementationCompleteness((double)(((double)(userstories.getNumUserStoriesImplemented())) / ((double)(userstories.getNumUserStoriesSpecified())) * 100));
}
}
Vector <Artifact> releaseplans = pairprogramrobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetProgrammingPairProgramRJCont rule (PairProgramRobertJoyce Action):
private void setProgrammingPairProgramRJCont(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramRobertJoyceAction>pairprogramrobertjoyceActs = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogramrobertjoyceActs.size(); i++)
{
PairProgramRobertJoyceAction pairprogramrobertjoyceAct = pairprogramrobertjoyceActs.elementAt(i);
if((pairprogramrobertjoyceAct.getAllRoberts().size() >= 1) && (pairprogramrobertjoyceAct.getAllJoyces().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodes().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodingStandards().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramrobertjoyceAct.getAllProjs().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramrobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = pairprogramrobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
softwaredeveloper.setProgramming(true);
}
}
Vector <Employee> joyces = pairprogramrobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
softwaredeveloper.setProgramming(true);
}
}
Vector <Artifact> codes = pairprogramrobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramrobertjoyceAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramrobertjoyceAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramrobertjoyceAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramrobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramrobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramrobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncNumUSImplPairProgramTR rule (PairProgramTimothyReda Action):
private void incNumUSImplPairProgramTR(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramTimothyRedaAction>pairprogramtimothyredaActs = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogramtimothyredaActs.size(); i++)
{
PairProgramTimothyRedaAction pairprogramtimothyredaAct = pairprogramtimothyredaActs.elementAt(i);
if((pairprogramtimothyredaAct.getAllTimothys().size() >= 1) && (pairprogramtimothyredaAct.getAllRedas().size() >= 1) && (pairprogramtimothyredaAct.getAllCodes().size() >= 1) && (pairprogramtimothyredaAct.getAllCodingStandards().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramtimothyredaAct.getAllProjs().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramtimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = pairprogramtimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
}
}
Vector <Employee> redas = pairprogramtimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
}
}
Vector <Artifact> codes = pairprogramtimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramtimothyredaAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramtimothyredaAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramtimothyredaAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramtimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramtimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
double allActiveTimothySoftwareDeveloperProductivity = 0;
Vector allActiveTimothys = pairprogramtimothyredaAct.getAllActiveTimothys();
for(int k=0; k<allActiveTimothys.size(); k++)
{
Object timothy3 = allActiveTimothys.elementAt(k);
if(timothy3 instanceof SoftwareDeveloper)
{
allActiveTimothySoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)timothy3).getProductivity());
}
}
double allActiveRedaSoftwareDeveloperProductivity = 0;
Vector allActiveRedas = pairprogramtimothyredaAct.getAllActiveRedas();
for(int k=0; k<allActiveRedas.size(); k++)
{
Object reda3 = allActiveRedas.elementAt(k);
if(reda3 instanceof SoftwareDeveloper)
{
allActiveRedaSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)reda3).getProductivity());
}
}
double allActiveAssociatedUnitTestsUnitTestsCompleteness = 0;
Vector allActiveAssociatedUnitTestss = pairprogramtimothyredaAct.getAllActiveAssociatedUnitTestss();
for(int k=0; k<allActiveAssociatedUnitTestss.size(); k++)
{
Object associatedunittests3 = allActiveAssociatedUnitTestss.elementAt(k);
if(associatedunittests3 instanceof UnitTests)
{
allActiveAssociatedUnitTestsUnitTestsCompleteness += (double)(((UnitTests)associatedunittests3).getCompleteness());
}
}
double allActiveAssociatedDesignDesignNumCRCCardsCompleted = 0;
Vector allActiveAssociatedDesigns = pairprogramtimothyredaAct.getAllActiveAssociatedDesigns();
for(int k=0; k<allActiveAssociatedDesigns.size(); k++)
{
Object associateddesign3 = allActiveAssociatedDesigns.elementAt(k);
if(associateddesign3 instanceof Design)
{
allActiveAssociatedDesignDesignNumCRCCardsCompleted += (double)(((Design)associateddesign3).getNumCRCCardsCompleted());
}
}
userstories.setNumUserStoriesImplemented((double)(((double)(userstories.getNumUserStoriesImplemented())) + ( ( ( allActiveTimothySoftwareDeveloperProductivity + allActiveRedaSoftwareDeveloperProductivity ) * .0125 ) * ( 1 + ( allActiveAssociatedUnitTestsUnitTestsCompleteness / 100 * .5 ) + ( allActiveAssociatedDesignDesignNumCRCCardsCompleted / 100 * .5 ) ) * .91 * .1987 )));
userstories.setImplementationCompleteness((double)(((double)(userstories.getNumUserStoriesImplemented())) / ((double)(userstories.getNumUserStoriesSpecified())) * 100));
}
}
Vector <Artifact> releaseplans = pairprogramtimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetProgrammingPairProgramTRCont rule (PairProgramTimothyReda Action):
private void setProgrammingPairProgramTRCont(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramTimothyRedaAction>pairprogramtimothyredaActs = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogramtimothyredaActs.size(); i++)
{
PairProgramTimothyRedaAction pairprogramtimothyredaAct = pairprogramtimothyredaActs.elementAt(i);
if((pairprogramtimothyredaAct.getAllTimothys().size() >= 1) && (pairprogramtimothyredaAct.getAllRedas().size() >= 1) && (pairprogramtimothyredaAct.getAllCodes().size() >= 1) && (pairprogramtimothyredaAct.getAllCodingStandards().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramtimothyredaAct.getAllProjs().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramtimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = pairprogramtimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
softwaredeveloper.setProgramming(true);
}
}
Vector <Employee> redas = pairprogramtimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
softwaredeveloper.setProgramming(true);
}
}
Vector <Artifact> codes = pairprogramtimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramtimothyredaAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramtimothyredaAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramtimothyredaAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramtimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramtimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramtimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetProgrammingPairProgramPSCont rule (PairProgramPegSigfreido Action):
private void setProgrammingPairProgramPSCont(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramPegSigfreidoAction>pairprogrampegsigfreidoActs = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogrampegsigfreidoActs.size(); i++)
{
PairProgramPegSigfreidoAction pairprogrampegsigfreidoAct = pairprogrampegsigfreidoActs.elementAt(i);
if((pairprogrampegsigfreidoAct.getAllPegs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllSigfreidos().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodes().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodingStandards().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedDesigns().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogrampegsigfreidoAct.getAllProjs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogrampegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = pairprogrampegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
softwaredeveloper.setProgramming(true);
}
}
Vector <Employee> sigfreidos = pairprogrampegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
softwaredeveloper.setProgramming(true);
}
}
Vector <Artifact> codes = pairprogrampegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogrampegsigfreidoAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogrampegsigfreidoAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogrampegsigfreidoAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogrampegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogrampegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogrampegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncSumRepNumbersProgram rule (Program Action):
private void incSumRepNumbersProgram(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ProgramAction>programActs = state.getActionStateRepository().getProgramActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<programActs.size(); i++)
{
ProgramAction programAct = programActs.elementAt(i);
if((programAct.getAllDevelopers().size() >= 1) && (programAct.getAllCodes().size() >= 1) && (programAct.getAllCodingStandards().size() >= 1) && (programAct.getAllAssociatedDesigns().size() >= 1) && (programAct.getAllAssociatedUnitTestss().size() >= 1) && (programAct.getAllProjs().size() >= 1) && (programAct.getAllAssociatedUserStoriess().size() >= 1) && (programAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = programAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Artifact> codes = programAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveDeveloperSoftwareDeveloperRepNumber = 0;
Vector allActiveDevelopers = programAct.getAllActiveDevelopers();
for(int k=0; k<allActiveDevelopers.size(); k++)
{
Object developer3 = allActiveDevelopers.elementAt(k);
if(developer3 instanceof SoftwareDeveloper)
{
allActiveDeveloperSoftwareDeveloperRepNumber += (double)(((SoftwareDeveloper)developer3).getRepNumber());
}
}
code.setSumEmpRepNumbers((int)(((double)(code.getSumEmpRepNumbers())) + allActiveDeveloperSoftwareDeveloperRepNumber));
double allActiveDeveloperSoftwareDeveloperKnowsCodingStandardNumerical = 0;
for(int k=0; k<allActiveDevelopers.size(); k++)
{
Object developer3 = allActiveDevelopers.elementAt(k);
if(developer3 instanceof SoftwareDeveloper)
{
allActiveDeveloperSoftwareDeveloperKnowsCodingStandardNumerical += (double)(((SoftwareDeveloper)developer3).getKnowsCodingStandardNumerical());
}
}
code.setSumKnowsCodingStandard((int)(((double)(code.getSumKnowsCodingStandard())) + allActiveDeveloperSoftwareDeveloperKnowsCodingStandardNumerical));
}
}
Vector <Tool> codingstandards = programAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = programAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = programAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = programAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = programAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = programAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// RemoveErrorsFromCode rule (UnitTestingAndFixing Action):
private void removeErrorsFromCode(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<UnitTestingAndFixingAction>unittestingandfixingActs = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<unittestingandfixingActs.size(); i++)
{
UnitTestingAndFixingAction unittestingandfixingAct = unittestingandfixingActs.elementAt(i);
if((unittestingandfixingAct.getAllEmps().size() >= 1) && (unittestingandfixingAct.getAllCodes().size() >= 1) && (unittestingandfixingAct.getAllUnitTestss().size() >= 1) && (unittestingandfixingAct.getAllTestingTools().size() >= 0) && (unittestingandfixingAct.getAllProjs().size() >= 1) && (unittestingandfixingAct.getAllAcceptanceTestss().size() >= 1) && (unittestingandfixingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = unittestingandfixingAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Artifact> codes = unittestingandfixingAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveEmpSoftwareDeveloperProductivity = 0;
Vector allActiveEmps = unittestingandfixingAct.getAllActiveEmps();
for(int k=0; k<allActiveEmps.size(); k++)
{
Object emp3 = allActiveEmps.elementAt(k);
if(emp3 instanceof SoftwareDeveloper)
{
allActiveEmpSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)emp3).getProductivity());
}
}
double allActiveUnitTestsUnitTestsTestingToolUsedInCreation = 0;
Vector allActiveUnitTestss = unittestingandfixingAct.getAllActiveUnitTestss();
for(int k=0; k<allActiveUnitTestss.size(); k++)
{
Object unittests3 = allActiveUnitTestss.elementAt(k);
if(unittests3 instanceof UnitTests)
{
allActiveUnitTestsUnitTestsTestingToolUsedInCreation += (double)(((UnitTests)unittests3).getTestingToolUsedInCreation());
}
}
double allActiveTestingToolUnitTestingFrameworkProductivityIncreaseFactor = 0;
Vector allActiveTestingTools = unittestingandfixingAct.getAllActiveTestingTools();
for(int k=0; k<allActiveTestingTools.size(); k++)
{
Object testingtool3 = allActiveTestingTools.elementAt(k);
if(testingtool3 instanceof UnitTestingFramework)
{
allActiveTestingToolUnitTestingFrameworkProductivityIncreaseFactor += (double)(((UnitTestingFramework)testingtool3).getProductivityIncreaseFactor());
}
}
code.setPercentErroneous((double)(((double)(code.getPercentErroneous())) - ( allActiveEmpSoftwareDeveloperProductivity * .003 * ( 1 + ( ((double)(code.getSumKnowsCodingStandard())) / ((double)(code.getSumEmpRepNumbers())) * .3 ) ) * ( 1 + ( allActiveUnitTestsUnitTestsTestingToolUsedInCreation * .3 ) ) * ( 1 + ( allActiveTestingToolUnitTestingFrameworkProductivityIncreaseFactor * .3 ) ) )));
}
}
Vector <Artifact> unittestss = unittestingandfixingAct.getAllActiveUnitTestss();
for(int j=0; j<unittestss.size(); j++)
{
Artifact unittests2 = unittestss.elementAt(j);
if(unittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)unittests2;
}
}
Vector <Tool> testingtools = unittestingandfixingAct.getAllActiveTestingTools();
for(int j=0; j<testingtools.size(); j++)
{
Tool testingtool2 = testingtools.elementAt(j);
if(testingtool2 instanceof UnitTestingFramework)
{
UnitTestingFramework unittestingframework = (UnitTestingFramework)testingtool2;
}
}
Vector <Project> projs = unittestingandfixingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> acceptancetestss = unittestingandfixingAct.getAllActiveAcceptanceTestss();
for(int j=0; j<acceptancetestss.size(); j++)
{
Artifact acceptancetests2 = acceptancetestss.elementAt(j);
if(acceptancetests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetests2;
}
}
Vector <Artifact> releaseplans = unittestingandfixingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncSumRepNumbersPairProgRJ rule (PairProgramRobertJoyce Action):
private void incSumRepNumbersPairProgRJ(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramRobertJoyceAction>pairprogramrobertjoyceActs = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogramrobertjoyceActs.size(); i++)
{
PairProgramRobertJoyceAction pairprogramrobertjoyceAct = pairprogramrobertjoyceActs.elementAt(i);
if((pairprogramrobertjoyceAct.getAllRoberts().size() >= 1) && (pairprogramrobertjoyceAct.getAllJoyces().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodes().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodingStandards().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramrobertjoyceAct.getAllProjs().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramrobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = pairprogramrobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
}
}
Vector <Employee> joyces = pairprogramrobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
}
}
Vector <Artifact> codes = pairprogramrobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveRobertSoftwareDeveloperRepNumber = 0;
Vector allActiveRoberts = pairprogramrobertjoyceAct.getAllActiveRoberts();
for(int k=0; k<allActiveRoberts.size(); k++)
{
Object robert3 = allActiveRoberts.elementAt(k);
if(robert3 instanceof SoftwareDeveloper)
{
allActiveRobertSoftwareDeveloperRepNumber += (double)(((SoftwareDeveloper)robert3).getRepNumber());
}
}
double allActiveJoyceSoftwareDeveloperRepNumber = 0;
Vector allActiveJoyces = pairprogramrobertjoyceAct.getAllActiveJoyces();
for(int k=0; k<allActiveJoyces.size(); k++)
{
Object joyce3 = allActiveJoyces.elementAt(k);
if(joyce3 instanceof SoftwareDeveloper)
{
allActiveJoyceSoftwareDeveloperRepNumber += (double)(((SoftwareDeveloper)joyce3).getRepNumber());
}
}
code.setSumEmpRepNumbers((int)(((double)(code.getSumEmpRepNumbers())) + allActiveRobertSoftwareDeveloperRepNumber + allActiveJoyceSoftwareDeveloperRepNumber));
double allActiveRobertSoftwareDeveloperKnowsCodingStandardNumerical = 0;
for(int k=0; k<allActiveRoberts.size(); k++)
{
Object robert3 = allActiveRoberts.elementAt(k);
if(robert3 instanceof SoftwareDeveloper)
{
allActiveRobertSoftwareDeveloperKnowsCodingStandardNumerical += (double)(((SoftwareDeveloper)robert3).getKnowsCodingStandardNumerical());
}
}
double allActiveJoyceSoftwareDeveloperKnowsCodingStandardNumerical = 0;
for(int k=0; k<allActiveJoyces.size(); k++)
{
Object joyce3 = allActiveJoyces.elementAt(k);
if(joyce3 instanceof SoftwareDeveloper)
{
allActiveJoyceSoftwareDeveloperKnowsCodingStandardNumerical += (double)(((SoftwareDeveloper)joyce3).getKnowsCodingStandardNumerical());
}
}
code.setSumKnowsCodingStandard((int)(((double)(code.getSumKnowsCodingStandard())) + allActiveRobertSoftwareDeveloperKnowsCodingStandardNumerical + allActiveJoyceSoftwareDeveloperKnowsCodingStandardNumerical));
}
}
Vector <Tool> codingstandards = pairprogramrobertjoyceAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramrobertjoyceAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramrobertjoyceAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramrobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramrobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramrobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncSumRepNumbersPairProgTR rule (PairProgramTimothyReda Action):
private void incSumRepNumbersPairProgTR(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramTimothyRedaAction>pairprogramtimothyredaActs = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogramtimothyredaActs.size(); i++)
{
PairProgramTimothyRedaAction pairprogramtimothyredaAct = pairprogramtimothyredaActs.elementAt(i);
if((pairprogramtimothyredaAct.getAllTimothys().size() >= 1) && (pairprogramtimothyredaAct.getAllRedas().size() >= 1) && (pairprogramtimothyredaAct.getAllCodes().size() >= 1) && (pairprogramtimothyredaAct.getAllCodingStandards().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramtimothyredaAct.getAllProjs().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramtimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = pairprogramtimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
}
}
Vector <Employee> redas = pairprogramtimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
}
}
Vector <Artifact> codes = pairprogramtimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveTimothySoftwareDeveloperRepNumber = 0;
Vector allActiveTimothys = pairprogramtimothyredaAct.getAllActiveTimothys();
for(int k=0; k<allActiveTimothys.size(); k++)
{
Object timothy3 = allActiveTimothys.elementAt(k);
if(timothy3 instanceof SoftwareDeveloper)
{
allActiveTimothySoftwareDeveloperRepNumber += (double)(((SoftwareDeveloper)timothy3).getRepNumber());
}
}
double allActiveRedaSoftwareDeveloperRepNumber = 0;
Vector allActiveRedas = pairprogramtimothyredaAct.getAllActiveRedas();
for(int k=0; k<allActiveRedas.size(); k++)
{
Object reda3 = allActiveRedas.elementAt(k);
if(reda3 instanceof SoftwareDeveloper)
{
allActiveRedaSoftwareDeveloperRepNumber += (double)(((SoftwareDeveloper)reda3).getRepNumber());
}
}
code.setSumEmpRepNumbers((int)(((double)(code.getSumEmpRepNumbers())) + allActiveTimothySoftwareDeveloperRepNumber + allActiveRedaSoftwareDeveloperRepNumber));
double allActiveTimothySoftwareDeveloperKnowsCodingStandardNumerical = 0;
for(int k=0; k<allActiveTimothys.size(); k++)
{
Object timothy3 = allActiveTimothys.elementAt(k);
if(timothy3 instanceof SoftwareDeveloper)
{
allActiveTimothySoftwareDeveloperKnowsCodingStandardNumerical += (double)(((SoftwareDeveloper)timothy3).getKnowsCodingStandardNumerical());
}
}
double allActiveRedaSoftwareDeveloperKnowsCodingStandardNumerical = 0;
for(int k=0; k<allActiveRedas.size(); k++)
{
Object reda3 = allActiveRedas.elementAt(k);
if(reda3 instanceof SoftwareDeveloper)
{
allActiveRedaSoftwareDeveloperKnowsCodingStandardNumerical += (double)(((SoftwareDeveloper)reda3).getKnowsCodingStandardNumerical());
}
}
code.setSumKnowsCodingStandard((int)(((double)(code.getSumKnowsCodingStandard())) + allActiveTimothySoftwareDeveloperKnowsCodingStandardNumerical + allActiveRedaSoftwareDeveloperKnowsCodingStandardNumerical));
}
}
Vector <Tool> codingstandards = pairprogramtimothyredaAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramtimothyredaAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramtimothyredaAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramtimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramtimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramtimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncSumRepNumbersPairProgPS rule (PairProgramPegSigfreido Action):
private void incSumRepNumbersPairProgPS(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramPegSigfreidoAction>pairprogrampegsigfreidoActs = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogrampegsigfreidoActs.size(); i++)
{
PairProgramPegSigfreidoAction pairprogrampegsigfreidoAct = pairprogrampegsigfreidoActs.elementAt(i);
if((pairprogrampegsigfreidoAct.getAllPegs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllSigfreidos().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodes().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodingStandards().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedDesigns().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogrampegsigfreidoAct.getAllProjs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogrampegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = pairprogrampegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
}
}
Vector <Employee> sigfreidos = pairprogrampegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
}
}
Vector <Artifact> codes = pairprogrampegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActivePegSoftwareDeveloperRepNumber = 0;
Vector allActivePegs = pairprogrampegsigfreidoAct.getAllActivePegs();
for(int k=0; k<allActivePegs.size(); k++)
{
Object peg3 = allActivePegs.elementAt(k);
if(peg3 instanceof SoftwareDeveloper)
{
allActivePegSoftwareDeveloperRepNumber += (double)(((SoftwareDeveloper)peg3).getRepNumber());
}
}
double allActiveSigfreidoSoftwareDeveloperRepNumber = 0;
Vector allActiveSigfreidos = pairprogrampegsigfreidoAct.getAllActiveSigfreidos();
for(int k=0; k<allActiveSigfreidos.size(); k++)
{
Object sigfreido3 = allActiveSigfreidos.elementAt(k);
if(sigfreido3 instanceof SoftwareDeveloper)
{
allActiveSigfreidoSoftwareDeveloperRepNumber += (double)(((SoftwareDeveloper)sigfreido3).getRepNumber());
}
}
code.setSumEmpRepNumbers((int)(((double)(code.getSumEmpRepNumbers())) + allActivePegSoftwareDeveloperRepNumber + allActiveSigfreidoSoftwareDeveloperRepNumber));
double allActivePegSoftwareDeveloperKnowsCodingStandardNumerical = 0;
for(int k=0; k<allActivePegs.size(); k++)
{
Object peg3 = allActivePegs.elementAt(k);
if(peg3 instanceof SoftwareDeveloper)
{
allActivePegSoftwareDeveloperKnowsCodingStandardNumerical += (double)(((SoftwareDeveloper)peg3).getKnowsCodingStandardNumerical());
}
}
double allActiveSigfreidoSoftwareDeveloperKnowsCodingStandardNumerical = 0;
for(int k=0; k<allActiveSigfreidos.size(); k++)
{
Object sigfreido3 = allActiveSigfreidos.elementAt(k);
if(sigfreido3 instanceof SoftwareDeveloper)
{
allActiveSigfreidoSoftwareDeveloperKnowsCodingStandardNumerical += (double)(((SoftwareDeveloper)sigfreido3).getKnowsCodingStandardNumerical());
}
}
code.setSumKnowsCodingStandard((int)(((double)(code.getSumKnowsCodingStandard())) + allActivePegSoftwareDeveloperKnowsCodingStandardNumerical + allActiveSigfreidoSoftwareDeveloperKnowsCodingStandardNumerical));
}
}
Vector <Tool> codingstandards = pairprogrampegsigfreidoAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogrampegsigfreidoAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogrampegsigfreidoAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogrampegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogrampegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogrampegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncPercentRefactored rule (Refactor Action):
private void incPercentRefactored(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<RefactorAction>refactorActs = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<refactorActs.size(); i++)
{
RefactorAction refactorAct = refactorActs.elementAt(i);
if((refactorAct.getAllEmps().size() >= 1) && (refactorAct.getAllCodes().size() >= 1) && (refactorAct.getAllProjs().size() >= 1) && (refactorAct.getAllRefactoringTools().size() >= 0) && (refactorAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = refactorAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Artifact> codes = refactorAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveEmpSoftwareDeveloperProductivity = 0;
Vector allActiveEmps = refactorAct.getAllActiveEmps();
for(int k=0; k<allActiveEmps.size(); k++)
{
Object emp3 = allActiveEmps.elementAt(k);
if(emp3 instanceof SoftwareDeveloper)
{
allActiveEmpSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)emp3).getProductivity());
}
}
double allActiveRefactoringToolRefactoringToolProductivityIncreaseFactor = 0;
Vector allActiveRefactoringTools = refactorAct.getAllActiveRefactoringTools();
for(int k=0; k<allActiveRefactoringTools.size(); k++)
{
Object refactoringtool3 = allActiveRefactoringTools.elementAt(k);
if(refactoringtool3 instanceof RefactoringTool)
{
allActiveRefactoringToolRefactoringToolProductivityIncreaseFactor += (double)(((RefactoringTool)refactoringtool3).getProductivityIncreaseFactor());
}
}
code.setPercentRefactored((double)(((double)(code.getPercentRefactored())) + ( allActiveEmpSoftwareDeveloperProductivity * .03 * ( ( 1 + ( ((double)(code.getSumKnowsCodingStandard())) / ((double)(code.getSumEmpRepNumbers())) ) ) + ( 1 + ( allActiveRefactoringToolRefactoringToolProductivityIncreaseFactor ) ) + ( 1 + ( ( 100 - ((double)(code.getPercentErroneous())) ) / 100 ) ) ) )));
}
}
Vector <Project> projs = refactorAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Tool> refactoringtools = refactorAct.getAllActiveRefactoringTools();
for(int j=0; j<refactoringtools.size(); j++)
{
Tool refactoringtool2 = refactoringtools.elementAt(j);
if(refactoringtool2 instanceof RefactoringTool)
{
RefactoringTool refactoringtool = (RefactoringTool)refactoringtool2;
}
}
Vector <Artifact> releaseplans = refactorAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncNumErrorsRefactor rule (Refactor Action):
private void incNumErrorsRefactor(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<RefactorAction>refactorActs = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<refactorActs.size(); i++)
{
RefactorAction refactorAct = refactorActs.elementAt(i);
if((refactorAct.getAllEmps().size() >= 1) && (refactorAct.getAllCodes().size() >= 1) && (refactorAct.getAllProjs().size() >= 1) && (refactorAct.getAllRefactoringTools().size() >= 0) && (refactorAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = refactorAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Artifact> codes = refactorAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveEmpSoftwareDeveloperProductivity = 0;
Vector allActiveEmps = refactorAct.getAllActiveEmps();
for(int k=0; k<allActiveEmps.size(); k++)
{
Object emp3 = allActiveEmps.elementAt(k);
if(emp3 instanceof SoftwareDeveloper)
{
allActiveEmpSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)emp3).getProductivity());
}
}
double allActiveRefactoringToolRefactoringToolProductivityIncreaseFactor = 0;
Vector allActiveRefactoringTools = refactorAct.getAllActiveRefactoringTools();
for(int k=0; k<allActiveRefactoringTools.size(); k++)
{
Object refactoringtool3 = allActiveRefactoringTools.elementAt(k);
if(refactoringtool3 instanceof RefactoringTool)
{
allActiveRefactoringToolRefactoringToolProductivityIncreaseFactor += (double)(((RefactoringTool)refactoringtool3).getProductivityIncreaseFactor());
}
}
code.setPercentErroneous((double)(((double)(code.getPercentErroneous())) + ( allActiveEmpSoftwareDeveloperProductivity * .0053 ) + ( .7 * ( 1 - ( ((double)(code.getSumKnowsCodingStandard())) / ((double)(code.getSumEmpRepNumbers())) ) ) ) + ( .7 * ( 1 - allActiveRefactoringToolRefactoringToolProductivityIncreaseFactor ) ) + ( .7 * ( ((double)(code.getPercentErroneous())) / 100 ) )));
}
}
Vector <Project> projs = refactorAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Tool> refactoringtools = refactorAct.getAllActiveRefactoringTools();
for(int j=0; j<refactoringtools.size(); j++)
{
Tool refactoringtool2 = refactoringtools.elementAt(j);
if(refactoringtool2 instanceof RefactoringTool)
{
RefactoringTool refactoringtool = (RefactoringTool)refactoringtool2;
}
}
Vector <Artifact> releaseplans = refactorAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncPercentIntegratedCodeRJ rule (IntegrateRobertJoyce Action):
private void incPercentIntegratedCodeRJ(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateRobertJoyceAction>integraterobertjoyceActs = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<integraterobertjoyceActs.size(); i++)
{
IntegrateRobertJoyceAction integraterobertjoyceAct = integraterobertjoyceActs.elementAt(i);
if((integraterobertjoyceAct.getAllRoberts().size() >= 1) && (integraterobertjoyceAct.getAllJoyces().size() >= 1) && (integraterobertjoyceAct.getAllCodes().size() >= 1) && (integraterobertjoyceAct.getAllProjs().size() >= 1) && (integraterobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (integraterobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = integraterobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
}
}
Vector <Employee> joyces = integraterobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
}
}
Vector <Artifact> codes = integraterobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveRobertSoftwareDeveloperProductivity = 0;
Vector allActiveRoberts = integraterobertjoyceAct.getAllActiveRoberts();
for(int k=0; k<allActiveRoberts.size(); k++)
{
Object robert3 = allActiveRoberts.elementAt(k);
if(robert3 instanceof SoftwareDeveloper)
{
allActiveRobertSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)robert3).getProductivity());
}
}
double allActiveJoyceSoftwareDeveloperProductivity = 0;
Vector allActiveJoyces = integraterobertjoyceAct.getAllActiveJoyces();
for(int k=0; k<allActiveJoyces.size(); k++)
{
Object joyce3 = allActiveJoyces.elementAt(k);
if(joyce3 instanceof SoftwareDeveloper)
{
allActiveJoyceSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)joyce3).getProductivity());
}
}
code.setPercentIntegrated((double)(((double)(code.getPercentIntegrated())) + ( ( allActiveRobertSoftwareDeveloperProductivity + allActiveJoyceSoftwareDeveloperProductivity ) * .03 ) * ( ( 1 + ( ((double)(code.getSumKnowsCodingStandard())) / ((double)(code.getSumEmpRepNumbers())) ) ) + ( 1 + ( ((double)(code.getPercentRefactored())) / 100 ) ) + ( 1 + ( ( 100 - ((double)(code.getPercentErroneous())) ) / 100 ) ) )));
}
}
Vector <Project> projs = integraterobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integraterobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integraterobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncPercentIntegratedCodeTR rule (IntegrateTimothyReda Action):
private void incPercentIntegratedCodeTR(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateTimothyRedaAction>integratetimothyredaActs = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<integratetimothyredaActs.size(); i++)
{
IntegrateTimothyRedaAction integratetimothyredaAct = integratetimothyredaActs.elementAt(i);
if((integratetimothyredaAct.getAllTimothys().size() >= 1) && (integratetimothyredaAct.getAllRedas().size() >= 1) && (integratetimothyredaAct.getAllCodes().size() >= 1) && (integratetimothyredaAct.getAllProjs().size() >= 1) && (integratetimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (integratetimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = integratetimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
}
}
Vector <Employee> redas = integratetimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
}
}
Vector <Artifact> codes = integratetimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveTimothySoftwareDeveloperProductivity = 0;
Vector allActiveTimothys = integratetimothyredaAct.getAllActiveTimothys();
for(int k=0; k<allActiveTimothys.size(); k++)
{
Object timothy3 = allActiveTimothys.elementAt(k);
if(timothy3 instanceof SoftwareDeveloper)
{
allActiveTimothySoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)timothy3).getProductivity());
}
}
double allActiveRedaSoftwareDeveloperProductivity = 0;
Vector allActiveRedas = integratetimothyredaAct.getAllActiveRedas();
for(int k=0; k<allActiveRedas.size(); k++)
{
Object reda3 = allActiveRedas.elementAt(k);
if(reda3 instanceof SoftwareDeveloper)
{
allActiveRedaSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)reda3).getProductivity());
}
}
code.setPercentIntegrated((double)(((double)(code.getPercentIntegrated())) + ( ( allActiveTimothySoftwareDeveloperProductivity + allActiveRedaSoftwareDeveloperProductivity ) * .03 ) * ( ( 1 + ( ((double)(code.getSumKnowsCodingStandard())) / ((double)(code.getSumEmpRepNumbers())) ) ) + ( 1 + ( ((double)(code.getPercentRefactored())) / 100 ) ) + ( 1 + ( ( 100 - ((double)(code.getPercentErroneous())) ) / 100 ) ) )));
}
}
Vector <Project> projs = integratetimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integratetimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratetimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncPercentIntegratedCodePS rule (IntegratePegSigfreido Action):
private void incPercentIntegratedCodePS(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegratePegSigfreidoAction>integratepegsigfreidoActs = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<integratepegsigfreidoActs.size(); i++)
{
IntegratePegSigfreidoAction integratepegsigfreidoAct = integratepegsigfreidoActs.elementAt(i);
if((integratepegsigfreidoAct.getAllPegs().size() >= 1) && (integratepegsigfreidoAct.getAllSigfreidos().size() >= 1) && (integratepegsigfreidoAct.getAllCodes().size() >= 1) && (integratepegsigfreidoAct.getAllProjs().size() >= 1) && (integratepegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (integratepegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = integratepegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
}
}
Vector <Employee> sigfreidos = integratepegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
}
}
Vector <Artifact> codes = integratepegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActivePegSoftwareDeveloperProductivity = 0;
Vector allActivePegs = integratepegsigfreidoAct.getAllActivePegs();
for(int k=0; k<allActivePegs.size(); k++)
{
Object peg3 = allActivePegs.elementAt(k);
if(peg3 instanceof SoftwareDeveloper)
{
allActivePegSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)peg3).getProductivity());
}
}
double allActiveSigfreidoSoftwareDeveloperProductivity = 0;
Vector allActiveSigfreidos = integratepegsigfreidoAct.getAllActiveSigfreidos();
for(int k=0; k<allActiveSigfreidos.size(); k++)
{
Object sigfreido3 = allActiveSigfreidos.elementAt(k);
if(sigfreido3 instanceof SoftwareDeveloper)
{
allActiveSigfreidoSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)sigfreido3).getProductivity());
}
}
code.setPercentIntegrated((double)(((double)(code.getPercentIntegrated())) + ( ( allActivePegSoftwareDeveloperProductivity + allActiveSigfreidoSoftwareDeveloperProductivity ) * .03 ) * ( ( 1 + ( ((double)(code.getSumKnowsCodingStandard())) / ((double)(code.getSumEmpRepNumbers())) ) ) + ( 1 + ( ((double)(code.getPercentRefactored())) / 100 ) ) + ( 1 + ( ( 100 - ((double)(code.getPercentErroneous())) ) / 100 ) ) )));
}
}
Vector <Project> projs = integratepegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integratepegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratepegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncNumErrorsIntegrateRJ rule (IntegrateRobertJoyce Action):
private void incNumErrorsIntegrateRJ(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateRobertJoyceAction>integraterobertjoyceActs = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<integraterobertjoyceActs.size(); i++)
{
IntegrateRobertJoyceAction integraterobertjoyceAct = integraterobertjoyceActs.elementAt(i);
if((integraterobertjoyceAct.getAllRoberts().size() >= 1) && (integraterobertjoyceAct.getAllJoyces().size() >= 1) && (integraterobertjoyceAct.getAllCodes().size() >= 1) && (integraterobertjoyceAct.getAllProjs().size() >= 1) && (integraterobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (integraterobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = integraterobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
}
}
Vector <Employee> joyces = integraterobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
}
}
Vector <Artifact> codes = integraterobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveRobertSoftwareDeveloperProductivity = 0;
Vector allActiveRoberts = integraterobertjoyceAct.getAllActiveRoberts();
for(int k=0; k<allActiveRoberts.size(); k++)
{
Object robert3 = allActiveRoberts.elementAt(k);
if(robert3 instanceof SoftwareDeveloper)
{
allActiveRobertSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)robert3).getProductivity());
}
}
double allActiveJoyceSoftwareDeveloperProductivity = 0;
Vector allActiveJoyces = integraterobertjoyceAct.getAllActiveJoyces();
for(int k=0; k<allActiveJoyces.size(); k++)
{
Object joyce3 = allActiveJoyces.elementAt(k);
if(joyce3 instanceof SoftwareDeveloper)
{
allActiveJoyceSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)joyce3).getProductivity());
}
}
code.setPercentErroneous((double)(((double)(code.getPercentErroneous())) + ( .0055 * ( allActiveRobertSoftwareDeveloperProductivity + allActiveJoyceSoftwareDeveloperProductivity ) ) + ( ((double)(code.getPercentErroneous())) / 100 ) + ( ( 100 - ((double)(code.getPercentRefactored())) ) / 100 * .25 )));
}
}
Vector <Project> projs = integraterobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integraterobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integraterobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncNumErrorsIntegrateTR rule (IntegrateTimothyReda Action):
private void incNumErrorsIntegrateTR(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateTimothyRedaAction>integratetimothyredaActs = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<integratetimothyredaActs.size(); i++)
{
IntegrateTimothyRedaAction integratetimothyredaAct = integratetimothyredaActs.elementAt(i);
if((integratetimothyredaAct.getAllTimothys().size() >= 1) && (integratetimothyredaAct.getAllRedas().size() >= 1) && (integratetimothyredaAct.getAllCodes().size() >= 1) && (integratetimothyredaAct.getAllProjs().size() >= 1) && (integratetimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (integratetimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = integratetimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
}
}
Vector <Employee> redas = integratetimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
}
}
Vector <Artifact> codes = integratetimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveTimothySoftwareDeveloperProductivity = 0;
Vector allActiveTimothys = integratetimothyredaAct.getAllActiveTimothys();
for(int k=0; k<allActiveTimothys.size(); k++)
{
Object timothy3 = allActiveTimothys.elementAt(k);
if(timothy3 instanceof SoftwareDeveloper)
{
allActiveTimothySoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)timothy3).getProductivity());
}
}
double allActiveRedaSoftwareDeveloperProductivity = 0;
Vector allActiveRedas = integratetimothyredaAct.getAllActiveRedas();
for(int k=0; k<allActiveRedas.size(); k++)
{
Object reda3 = allActiveRedas.elementAt(k);
if(reda3 instanceof SoftwareDeveloper)
{
allActiveRedaSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)reda3).getProductivity());
}
}
code.setPercentErroneous((double)(((double)(code.getPercentErroneous())) + ( .0055 * ( allActiveTimothySoftwareDeveloperProductivity + allActiveRedaSoftwareDeveloperProductivity ) ) + ( ((double)(code.getPercentErroneous())) / 100 ) + ( ( 100 - ((double)(code.getPercentRefactored())) ) / 100 * .25 )));
}
}
Vector <Project> projs = integratetimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integratetimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratetimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncNumErrorsIntegratePS rule (IntegratePegSigfreido Action):
private void incNumErrorsIntegratePS(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegratePegSigfreidoAction>integratepegsigfreidoActs = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<integratepegsigfreidoActs.size(); i++)
{
IntegratePegSigfreidoAction integratepegsigfreidoAct = integratepegsigfreidoActs.elementAt(i);
if((integratepegsigfreidoAct.getAllPegs().size() >= 1) && (integratepegsigfreidoAct.getAllSigfreidos().size() >= 1) && (integratepegsigfreidoAct.getAllCodes().size() >= 1) && (integratepegsigfreidoAct.getAllProjs().size() >= 1) && (integratepegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (integratepegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = integratepegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
}
}
Vector <Employee> sigfreidos = integratepegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
}
}
Vector <Artifact> codes = integratepegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActivePegSoftwareDeveloperProductivity = 0;
Vector allActivePegs = integratepegsigfreidoAct.getAllActivePegs();
for(int k=0; k<allActivePegs.size(); k++)
{
Object peg3 = allActivePegs.elementAt(k);
if(peg3 instanceof SoftwareDeveloper)
{
allActivePegSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)peg3).getProductivity());
}
}
double allActiveSigfreidoSoftwareDeveloperProductivity = 0;
Vector allActiveSigfreidos = integratepegsigfreidoAct.getAllActiveSigfreidos();
for(int k=0; k<allActiveSigfreidos.size(); k++)
{
Object sigfreido3 = allActiveSigfreidos.elementAt(k);
if(sigfreido3 instanceof SoftwareDeveloper)
{
allActiveSigfreidoSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)sigfreido3).getProductivity());
}
}
code.setPercentErroneous((double)(((double)(code.getPercentErroneous())) + ( .0055 * ( allActivePegSoftwareDeveloperProductivity + allActiveSigfreidoSoftwareDeveloperProductivity ) ) + ( ((double)(code.getPercentErroneous())) / 100 ) + ( ( 100 - ((double)(code.getPercentRefactored())) ) / 100 * .25 )));
}
}
Vector <Project> projs = integratepegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integratepegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratepegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncPercentIntegratedCode rule (Integrate Action):
private void incPercentIntegratedCode(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateAction>integrateActs = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<integrateActs.size(); i++)
{
IntegrateAction integrateAct = integrateActs.elementAt(i);
if((integrateAct.getAllEmps().size() >= 1) && (integrateAct.getAllCodes().size() >= 1) && (integrateAct.getAllProjs().size() >= 1) && (integrateAct.getAllAssociatedUserStoriess().size() >= 1) && (integrateAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = integrateAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Artifact> codes = integrateAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveEmpSoftwareDeveloperProductivity = 0;
Vector allActiveEmps = integrateAct.getAllActiveEmps();
for(int k=0; k<allActiveEmps.size(); k++)
{
Object emp3 = allActiveEmps.elementAt(k);
if(emp3 instanceof SoftwareDeveloper)
{
allActiveEmpSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)emp3).getProductivity());
}
}
code.setPercentIntegrated((double)(((double)(code.getPercentIntegrated())) + ( ( allActiveEmpSoftwareDeveloperProductivity * .03 ) * ( ( 1 + ( ((double)(code.getSumKnowsCodingStandard())) / ((double)(code.getSumEmpRepNumbers())) ) ) + ( 1 + ( ((double)(code.getPercentRefactored())) / 100 ) ) + ( 1 + ( ( 100 - ((double)(code.getPercentErroneous())) ) / 100 ) ) ) * 1.098 )));
}
}
Vector <Project> projs = integrateAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integrateAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integrateAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncNumErrorsIntegrate rule (Integrate Action):
private void incNumErrorsIntegrate(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateAction>integrateActs = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<integrateActs.size(); i++)
{
IntegrateAction integrateAct = integrateActs.elementAt(i);
if((integrateAct.getAllEmps().size() >= 1) && (integrateAct.getAllCodes().size() >= 1) && (integrateAct.getAllProjs().size() >= 1) && (integrateAct.getAllAssociatedUserStoriess().size() >= 1) && (integrateAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = integrateAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Artifact> codes = integrateAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
double allActiveEmpSoftwareDeveloperProductivity = 0;
Vector allActiveEmps = integrateAct.getAllActiveEmps();
for(int k=0; k<allActiveEmps.size(); k++)
{
Object emp3 = allActiveEmps.elementAt(k);
if(emp3 instanceof SoftwareDeveloper)
{
allActiveEmpSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)emp3).getProductivity());
}
}
code.setPercentErroneous((double)(((double)(code.getPercentErroneous())) + ( ( ( .0055 * allActiveEmpSoftwareDeveloperProductivity ) + ( ((double)(code.getPercentErroneous())) / 100 ) + ( ( 100 - ((double)(code.getPercentRefactored())) ) / 100 * .25 ) ) * 2 )));
}
}
Vector <Project> projs = integrateAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integrateAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integrateAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetIntegratingContRJ rule (IntegrateRobertJoyce Action):
private void setIntegratingContRJ(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateRobertJoyceAction>integraterobertjoyceActs = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<integraterobertjoyceActs.size(); i++)
{
IntegrateRobertJoyceAction integraterobertjoyceAct = integraterobertjoyceActs.elementAt(i);
if((integraterobertjoyceAct.getAllRoberts().size() >= 1) && (integraterobertjoyceAct.getAllJoyces().size() >= 1) && (integraterobertjoyceAct.getAllCodes().size() >= 1) && (integraterobertjoyceAct.getAllProjs().size() >= 1) && (integraterobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (integraterobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = integraterobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
softwaredeveloper.setIntegrating(true);
}
}
Vector <Employee> joyces = integraterobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
softwaredeveloper.setIntegrating(true);
}
}
Vector <Artifact> codes = integraterobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integraterobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integraterobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integraterobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetIntegratingContTR rule (IntegrateTimothyReda Action):
private void setIntegratingContTR(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateTimothyRedaAction>integratetimothyredaActs = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<integratetimothyredaActs.size(); i++)
{
IntegrateTimothyRedaAction integratetimothyredaAct = integratetimothyredaActs.elementAt(i);
if((integratetimothyredaAct.getAllTimothys().size() >= 1) && (integratetimothyredaAct.getAllRedas().size() >= 1) && (integratetimothyredaAct.getAllCodes().size() >= 1) && (integratetimothyredaAct.getAllProjs().size() >= 1) && (integratetimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (integratetimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = integratetimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
softwaredeveloper.setIntegrating(true);
}
}
Vector <Employee> redas = integratetimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
softwaredeveloper.setIntegrating(true);
}
}
Vector <Artifact> codes = integratetimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integratetimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integratetimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratetimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetIntegratingContPS rule (IntegratePegSigfreido Action):
private void setIntegratingContPS(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegratePegSigfreidoAction>integratepegsigfreidoActs = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<integratepegsigfreidoActs.size(); i++)
{
IntegratePegSigfreidoAction integratepegsigfreidoAct = integratepegsigfreidoActs.elementAt(i);
if((integratepegsigfreidoAct.getAllPegs().size() >= 1) && (integratepegsigfreidoAct.getAllSigfreidos().size() >= 1) && (integratepegsigfreidoAct.getAllCodes().size() >= 1) && (integratepegsigfreidoAct.getAllProjs().size() >= 1) && (integratepegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (integratepegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = integratepegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
softwaredeveloper.setIntegrating(true);
}
}
Vector <Employee> sigfreidos = integratepegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
softwaredeveloper.setIntegrating(true);
}
}
Vector <Artifact> codes = integratepegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integratepegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integratepegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratepegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetIntegratingCont rule (Integrate Action):
private void setIntegratingCont(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateAction>integrateActs = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<integrateActs.size(); i++)
{
IntegrateAction integrateAct = integrateActs.elementAt(i);
if((integrateAct.getAllEmps().size() >= 1) && (integrateAct.getAllCodes().size() >= 1) && (integrateAct.getAllProjs().size() >= 1) && (integrateAct.getAllAssociatedUserStoriess().size() >= 1) && (integrateAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = integrateAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
softwaredeveloper.setIntegrating(true);
}
}
Vector <Artifact> codes = integrateAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integrateAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integrateAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integrateAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncAcceptanceTestRun rule (AcceptanceTesting Action):
private void incAcceptanceTestRun(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<AcceptanceTestingAction>acceptancetestingActs = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<acceptancetestingActs.size(); i++)
{
AcceptanceTestingAction acceptancetestingAct = acceptancetestingActs.elementAt(i);
if((acceptancetestingAct.getAllEmps().size() >= 1) && (acceptancetestingAct.getAllCusts().size() >= 1) && (acceptancetestingAct.getAllAcceptanceTestCasess().size() >= 1) && (acceptancetestingAct.getAllUserStoriess().size() >= 1) && (acceptancetestingAct.getAllCodes().size() >= 1) && (acceptancetestingAct.getAllProjs().size() >= 1) && (acceptancetestingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = acceptancetestingAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Customer> custs = acceptancetestingAct.getAllActiveCusts();
for(int j=0; j<custs.size(); j++)
{
Customer cust2 = custs.elementAt(j);
if(cust2 instanceof CustomerRepresentative)
{
CustomerRepresentative customerrepresentative = (CustomerRepresentative)cust2;
}
}
Vector <Artifact> acceptancetestcasess = acceptancetestingAct.getAllActiveAcceptanceTestCasess();
for(int j=0; j<acceptancetestcasess.size(); j++)
{
Artifact acceptancetestcases2 = acceptancetestcasess.elementAt(j);
if(acceptancetestcases2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetestcases2;
double allActiveEmpSoftwareDeveloperProductivity = 0;
Vector allActiveEmps = acceptancetestingAct.getAllActiveEmps();
for(int k=0; k<allActiveEmps.size(); k++)
{
Object emp3 = allActiveEmps.elementAt(k);
if(emp3 instanceof SoftwareDeveloper)
{
allActiveEmpSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)emp3).getProductivity());
}
}
acceptancetests.setTestsRun((double)(((double)(acceptancetests.getTestsRun())) + ( allActiveEmpSoftwareDeveloperProductivity * .17 )));
}
}
Vector <Artifact> userstoriess = acceptancetestingAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Artifact> codes = acceptancetestingAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = acceptancetestingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = acceptancetestingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// IncNumUserStoriesIntegrated rule (UpdateUserStoriesAttributes Action):
private void incNumUserStoriesIntegrated(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<UpdateUserStoriesAttributesAction>updateuserstoriesattributesActs = state.getActionStateRepository().getUpdateUserStoriesAttributesActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<updateuserstoriesattributesActs.size(); i++)
{
UpdateUserStoriesAttributesAction updateuserstoriesattributesAct = updateuserstoriesattributesActs.elementAt(i);
if((updateuserstoriesattributesAct.getAllUserStoriess().size() >= 1) && (updateuserstoriesattributesAct.getAllProjs().size() >= 1) && (updateuserstoriesattributesAct.getAllCodes().size() >= 1))
{
Vector <Artifact> userstoriess = updateuserstoriesattributesAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
double allActiveCodeCodePercentIntegrated = 0;
Vector allActiveCodes = updateuserstoriesattributesAct.getAllActiveCodes();
for(int k=0; k<allActiveCodes.size(); k++)
{
Object code3 = allActiveCodes.elementAt(k);
if(code3 instanceof Code)
{
allActiveCodeCodePercentIntegrated += (double)(((Code)code3).getPercentIntegrated());
}
}
userstories.setNumUserStoriesIntegrated((double)(((double)(userstories.getNumUSIntegratedBeginningOfIteration())) + ( allActiveCodeCodePercentIntegrated / 100 * 20 )));
}
}
Vector <Project> projs = updateuserstoriesattributesAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> codes = updateuserstoriesattributesAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
}
}
}
}
// IncPcntErroneousUserStories rule (UpdateUserStoriesAttributes Action):
private void incPcntErroneousUserStories(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<UpdateUserStoriesAttributesAction>updateuserstoriesattributesActs = state.getActionStateRepository().getUpdateUserStoriesAttributesActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<updateuserstoriesattributesActs.size(); i++)
{
UpdateUserStoriesAttributesAction updateuserstoriesattributesAct = updateuserstoriesattributesActs.elementAt(i);
if((updateuserstoriesattributesAct.getAllUserStoriess().size() >= 1) && (updateuserstoriesattributesAct.getAllProjs().size() >= 1) && (updateuserstoriesattributesAct.getAllCodes().size() >= 1))
{
Vector <Artifact> userstoriess = updateuserstoriesattributesAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
double allActiveCodeCodePercentIntegrated = 0;
Vector allActiveCodes = updateuserstoriesattributesAct.getAllActiveCodes();
for(int k=0; k<allActiveCodes.size(); k++)
{
Object code3 = allActiveCodes.elementAt(k);
if(code3 instanceof Code)
{
allActiveCodeCodePercentIntegrated += (double)(((Code)code3).getPercentIntegrated());
}
}
double allActiveCodeCodePercentErroneous = 0;
for(int k=0; k<allActiveCodes.size(); k++)
{
Object code3 = allActiveCodes.elementAt(k);
if(code3 instanceof Code)
{
allActiveCodeCodePercentErroneous += (double)(((Code)code3).getPercentErroneous());
}
}
userstories.setPercentErroneous((double)(( ( ( allActiveCodeCodePercentIntegrated / 100 ) * 20 * ( allActiveCodeCodePercentErroneous / 100 ) ) + ( ((double)(userstories.getNumUSIntegratedBeginningOfIteration())) * ( ((double)(userstories.getPercentErroneousBeginningOfIteration())) / 100 ) ) ) / ((double)(userstories.getNumUserStoriesIntegrated())) * 100));
}
}
Vector <Project> projs = updateuserstoriesattributesAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> codes = updateuserstoriesattributesAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
}
}
}
}
// SetNotIdleCreateUST rule (CreateUserStories Action):
private void setNotIdleCreateUST(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateUserStoriesAction>createuserstoriesActs = state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdleCreateUST")))
{
for(int i=0; i<createuserstoriesActs.size(); i++)
{
CreateUserStoriesAction createuserstoriesAct = createuserstoriesActs.elementAt(i);
if(createuserstoriesAct == action)
{
if((createuserstoriesAct.getAllDevelopers().size() >= 1) && (createuserstoriesAct.getAllCustomerReps().size() >= 1) && (createuserstoriesAct.getAllUserStoriess().size() >= 1) && (createuserstoriesAct.getAllProjs().size() >= 1))
{
Vector <Employee> developers = createuserstoriesAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> customerreps = createuserstoriesAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
Vector <Artifact> userstoriess = createuserstoriesAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Project> projs = createuserstoriesAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
}
// SetNotIdleCreateUSC rule (CreateUserStories Action):
private void setNotIdleCreateUSC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateUserStoriesAction>createuserstoriesActs = state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<createuserstoriesActs.size(); i++)
{
CreateUserStoriesAction createuserstoriesAct = createuserstoriesActs.elementAt(i);
if((createuserstoriesAct.getAllDevelopers().size() >= 1) && (createuserstoriesAct.getAllCustomerReps().size() >= 1) && (createuserstoriesAct.getAllUserStoriess().size() >= 1) && (createuserstoriesAct.getAllProjs().size() >= 1))
{
Vector <Employee> developers = createuserstoriesAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> customerreps = createuserstoriesAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
Vector <Artifact> userstoriess = createuserstoriesAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Project> projs = createuserstoriesAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
// SetIdleCreateUS rule (CreateUserStories Action):
private void setIdleCreateUS(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateUserStoriesAction>createuserstoriesActs = state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdleCreateUS")))
{
for(int i=0; i<createuserstoriesActs.size(); i++)
{
CreateUserStoriesAction createuserstoriesAct = createuserstoriesActs.elementAt(i);
if(createuserstoriesAct == action)
{
if((createuserstoriesAct.getAllDevelopers().size() >= 1) && (createuserstoriesAct.getAllCustomerReps().size() >= 1) && (createuserstoriesAct.getAllUserStoriess().size() >= 1) && (createuserstoriesAct.getAllProjs().size() >= 1))
{
Vector <Employee> developers = createuserstoriesAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(true);
}
}
Vector <Employee> customerreps = createuserstoriesAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
Vector <Artifact> userstoriess = createuserstoriesAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Project> projs = createuserstoriesAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
}
// SetManagementInvolved rule (ReleasePlanningMeeting Action):
private void setManagementInvolved(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ReleasePlanningMeetingAction>releaseplanningmeetingActs = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetManagementInvolved")))
{
for(int i=0; i<releaseplanningmeetingActs.size(); i++)
{
ReleasePlanningMeetingAction releaseplanningmeetingAct = releaseplanningmeetingActs.elementAt(i);
if(releaseplanningmeetingAct == action)
{
if((releaseplanningmeetingAct.getAllDevelopers().size() >= 1) && (releaseplanningmeetingAct.getAllManagers().size() >= 0) && (releaseplanningmeetingAct.getAllCustomerReps().size() >= 0) && (releaseplanningmeetingAct.getAllReleasePlans().size() >= 1) && (releaseplanningmeetingAct.getAllUserStoriess().size() >= 1) && (releaseplanningmeetingAct.getAllProjs().size() >= 1))
{
Vector <Employee> developers = releaseplanningmeetingAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Employee> managers = releaseplanningmeetingAct.getAllActiveManagers();
for(int j=0; j<managers.size(); j++)
{
Employee manager2 = managers.elementAt(j);
if(manager2 instanceof Manager)
{
Manager manager = (Manager)manager2;
}
}
Vector <Employee> customerreps = releaseplanningmeetingAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
Vector <Artifact> releaseplans = releaseplanningmeetingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
double allActiveManagerManagerManagerNumber = 0;
Vector allActiveManagers = releaseplanningmeetingAct.getAllActiveManagers();
for(int k=0; k<allActiveManagers.size(); k++)
{
Object manager3 = allActiveManagers.elementAt(k);
if(manager3 instanceof Manager)
{
allActiveManagerManagerManagerNumber += (double)(((Manager)manager3).getManagerNumber());
}
}
releaseplan.setManagementInvolved((int)(allActiveManagerManagerManagerNumber));
}
}
Vector <Artifact> userstoriess = releaseplanningmeetingAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Project> projs = releaseplanningmeetingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
}
// SetCustomerInvolved rule (ReleasePlanningMeeting Action):
private void setCustomerInvolved(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ReleasePlanningMeetingAction>releaseplanningmeetingActs = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetCustomerInvolved")))
{
for(int i=0; i<releaseplanningmeetingActs.size(); i++)
{
ReleasePlanningMeetingAction releaseplanningmeetingAct = releaseplanningmeetingActs.elementAt(i);
if(releaseplanningmeetingAct == action)
{
if((releaseplanningmeetingAct.getAllDevelopers().size() >= 1) && (releaseplanningmeetingAct.getAllManagers().size() >= 0) && (releaseplanningmeetingAct.getAllCustomerReps().size() >= 0) && (releaseplanningmeetingAct.getAllReleasePlans().size() >= 1) && (releaseplanningmeetingAct.getAllUserStoriess().size() >= 1) && (releaseplanningmeetingAct.getAllProjs().size() >= 1))
{
Vector <Employee> developers = releaseplanningmeetingAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Employee> managers = releaseplanningmeetingAct.getAllActiveManagers();
for(int j=0; j<managers.size(); j++)
{
Employee manager2 = managers.elementAt(j);
if(manager2 instanceof Manager)
{
Manager manager = (Manager)manager2;
}
}
Vector <Employee> customerreps = releaseplanningmeetingAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
Vector <Artifact> releaseplans = releaseplanningmeetingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
double allActiveCustomerRepCustomerRepRepNumber = 0;
Vector allActiveCustomerReps = releaseplanningmeetingAct.getAllActiveCustomerReps();
for(int k=0; k<allActiveCustomerReps.size(); k++)
{
Object customerrep3 = allActiveCustomerReps.elementAt(k);
if(customerrep3 instanceof CustomerRep)
{
allActiveCustomerRepCustomerRepRepNumber += (double)(((CustomerRep)customerrep3).getRepNumber());
}
}
releaseplan.setCustomerInvolved((int)(allActiveCustomerRepCustomerRepRepNumber));
}
}
Vector <Artifact> userstoriess = releaseplanningmeetingAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Project> projs = releaseplanningmeetingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
}
// SetNotIdleReleaseMtgT rule (ReleasePlanningMeeting Action):
private void setNotIdleReleaseMtgT(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ReleasePlanningMeetingAction>releaseplanningmeetingActs = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdleReleaseMtgT")))
{
for(int i=0; i<releaseplanningmeetingActs.size(); i++)
{
ReleasePlanningMeetingAction releaseplanningmeetingAct = releaseplanningmeetingActs.elementAt(i);
if(releaseplanningmeetingAct == action)
{
if((releaseplanningmeetingAct.getAllDevelopers().size() >= 1) && (releaseplanningmeetingAct.getAllManagers().size() >= 0) && (releaseplanningmeetingAct.getAllCustomerReps().size() >= 0) && (releaseplanningmeetingAct.getAllReleasePlans().size() >= 1) && (releaseplanningmeetingAct.getAllUserStoriess().size() >= 1) && (releaseplanningmeetingAct.getAllProjs().size() >= 1))
{
Vector <Employee> developers = releaseplanningmeetingAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> managers = releaseplanningmeetingAct.getAllActiveManagers();
for(int j=0; j<managers.size(); j++)
{
Employee manager2 = managers.elementAt(j);
if(manager2 instanceof Manager)
{
Manager manager = (Manager)manager2;
}
}
Vector <Employee> customerreps = releaseplanningmeetingAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
Vector <Artifact> releaseplans = releaseplanningmeetingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
Vector <Artifact> userstoriess = releaseplanningmeetingAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Project> projs = releaseplanningmeetingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
}
// SetNotIdleReleaseMtgC rule (ReleasePlanningMeeting Action):
private void setNotIdleReleaseMtgC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ReleasePlanningMeetingAction>releaseplanningmeetingActs = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<releaseplanningmeetingActs.size(); i++)
{
ReleasePlanningMeetingAction releaseplanningmeetingAct = releaseplanningmeetingActs.elementAt(i);
if((releaseplanningmeetingAct.getAllDevelopers().size() >= 1) && (releaseplanningmeetingAct.getAllManagers().size() >= 0) && (releaseplanningmeetingAct.getAllCustomerReps().size() >= 0) && (releaseplanningmeetingAct.getAllReleasePlans().size() >= 1) && (releaseplanningmeetingAct.getAllUserStoriess().size() >= 1) && (releaseplanningmeetingAct.getAllProjs().size() >= 1))
{
Vector <Employee> developers = releaseplanningmeetingAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> managers = releaseplanningmeetingAct.getAllActiveManagers();
for(int j=0; j<managers.size(); j++)
{
Employee manager2 = managers.elementAt(j);
if(manager2 instanceof Manager)
{
Manager manager = (Manager)manager2;
}
}
Vector <Employee> customerreps = releaseplanningmeetingAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
Vector <Artifact> releaseplans = releaseplanningmeetingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
Vector <Artifact> userstoriess = releaseplanningmeetingAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Project> projs = releaseplanningmeetingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
// SetUserStoriesPrioritized rule (ReleasePlanningMeeting Action):
private void setUserStoriesPrioritized(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ReleasePlanningMeetingAction>releaseplanningmeetingActs = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetUserStoriesPrioritized")))
{
for(int i=0; i<releaseplanningmeetingActs.size(); i++)
{
ReleasePlanningMeetingAction releaseplanningmeetingAct = releaseplanningmeetingActs.elementAt(i);
if(releaseplanningmeetingAct == action)
{
if((releaseplanningmeetingAct.getAllDevelopers().size() >= 1) && (releaseplanningmeetingAct.getAllManagers().size() >= 0) && (releaseplanningmeetingAct.getAllCustomerReps().size() >= 0) && (releaseplanningmeetingAct.getAllReleasePlans().size() >= 1) && (releaseplanningmeetingAct.getAllUserStoriess().size() >= 1) && (releaseplanningmeetingAct.getAllProjs().size() >= 1))
{
Vector <Employee> developers = releaseplanningmeetingAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Employee> managers = releaseplanningmeetingAct.getAllActiveManagers();
for(int j=0; j<managers.size(); j++)
{
Employee manager2 = managers.elementAt(j);
if(manager2 instanceof Manager)
{
Manager manager = (Manager)manager2;
}
}
Vector <Employee> customerreps = releaseplanningmeetingAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
Vector <Artifact> releaseplans = releaseplanningmeetingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
Vector <Artifact> userstoriess = releaseplanningmeetingAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
userstories.setPrioritized("Yes");
}
}
Vector <Project> projs = releaseplanningmeetingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
}
// SetIdleReleaseMtg rule (ReleasePlanningMeeting Action):
private void setIdleReleaseMtg(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ReleasePlanningMeetingAction>releaseplanningmeetingActs = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdleReleaseMtg")))
{
for(int i=0; i<releaseplanningmeetingActs.size(); i++)
{
ReleasePlanningMeetingAction releaseplanningmeetingAct = releaseplanningmeetingActs.elementAt(i);
if(releaseplanningmeetingAct == action)
{
if((releaseplanningmeetingAct.getAllDevelopers().size() >= 1) && (releaseplanningmeetingAct.getAllManagers().size() >= 0) && (releaseplanningmeetingAct.getAllCustomerReps().size() >= 0) && (releaseplanningmeetingAct.getAllReleasePlans().size() >= 1) && (releaseplanningmeetingAct.getAllUserStoriess().size() >= 1) && (releaseplanningmeetingAct.getAllProjs().size() >= 1))
{
Vector <Employee> developers = releaseplanningmeetingAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(true);
}
}
Vector <Employee> managers = releaseplanningmeetingAct.getAllActiveManagers();
for(int j=0; j<managers.size(); j++)
{
Employee manager2 = managers.elementAt(j);
if(manager2 instanceof Manager)
{
Manager manager = (Manager)manager2;
}
}
Vector <Employee> customerreps = releaseplanningmeetingAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
Vector <Artifact> releaseplans = releaseplanningmeetingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
Vector <Artifact> userstoriess = releaseplanningmeetingAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Project> projs = releaseplanningmeetingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
}
// SetIterationStarted rule (StartIteration Action):
private void setIterationStarted(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<StartIterationAction>startiterationActs = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIterationStarted")))
{
for(int i=0; i<startiterationActs.size(); i++)
{
StartIterationAction startiterationAct = startiterationActs.elementAt(i);
if(startiterationAct == action)
{
if((startiterationAct.getAllEmps().size() >= 6) && (startiterationAct.getAllProjs().size() >= 1) && (startiterationAct.getAllReleasePlans().size() >= 1) && (startiterationAct.getAllUserStoriess().size() >= 1) && (startiterationAct.getAllIterationPlans().size() >= 1) && (startiterationAct.getAllDesigns().size() >= 1) && (startiterationAct.getAllUnitTestss().size() >= 1) && (startiterationAct.getAllAcceptanceTestss().size() >= 1) && (startiterationAct.getAllCodes().size() >= 1) && (startiterationAct.getAllCustomerReps().size() >= 1))
{
Vector <Employee> emps = startiterationAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Project> projs = startiterationAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setReleaseMadeThisIteration(false);
theproject.setCurrentIteration((int)(((double)(theproject.getCurrentIteration())) + 1));
theproject.setIterationStarted(true);
}
}
Vector <Artifact> releaseplans = startiterationAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
Vector <Artifact> userstoriess = startiterationAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Artifact> iterationplans = startiterationAct.getAllActiveIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact iterationplan2 = iterationplans.elementAt(j);
if(iterationplan2 instanceof CurrentIterationPlan)
{
CurrentIterationPlan currentiterationplan = (CurrentIterationPlan)iterationplan2;
}
}
Vector <Artifact> designs = startiterationAct.getAllActiveDesigns();
for(int j=0; j<designs.size(); j++)
{
Artifact design2 = designs.elementAt(j);
if(design2 instanceof Design)
{
Design design = (Design)design2;
}
}
Vector <Artifact> unittestss = startiterationAct.getAllActiveUnitTestss();
for(int j=0; j<unittestss.size(); j++)
{
Artifact unittests2 = unittestss.elementAt(j);
if(unittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)unittests2;
}
}
Vector <Artifact> acceptancetestss = startiterationAct.getAllActiveAcceptanceTestss();
for(int j=0; j<acceptancetestss.size(); j++)
{
Artifact acceptancetests2 = acceptancetestss.elementAt(j);
if(acceptancetests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetests2;
}
}
Vector <Artifact> codes = startiterationAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Employee> customerreps = startiterationAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
}
}
}
}
}
// SetNumUSIntegratedBeginIteration rule (StartIteration Action):
private void setNumUSIntegratedBeginIteration(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<StartIterationAction>startiterationActs = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNumUSIntegratedBeginIteration")))
{
for(int i=0; i<startiterationActs.size(); i++)
{
StartIterationAction startiterationAct = startiterationActs.elementAt(i);
if(startiterationAct == action)
{
if((startiterationAct.getAllEmps().size() >= 6) && (startiterationAct.getAllProjs().size() >= 1) && (startiterationAct.getAllReleasePlans().size() >= 1) && (startiterationAct.getAllUserStoriess().size() >= 1) && (startiterationAct.getAllIterationPlans().size() >= 1) && (startiterationAct.getAllDesigns().size() >= 1) && (startiterationAct.getAllUnitTestss().size() >= 1) && (startiterationAct.getAllAcceptanceTestss().size() >= 1) && (startiterationAct.getAllCodes().size() >= 1) && (startiterationAct.getAllCustomerReps().size() >= 1))
{
Vector <Employee> emps = startiterationAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Project> projs = startiterationAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = startiterationAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
Vector <Artifact> userstoriess = startiterationAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
userstories.setNumUSIntegratedBeginningOfIteration((double)(((double)(userstories.getNumUserStoriesIntegrated()))));
}
}
Vector <Artifact> iterationplans = startiterationAct.getAllActiveIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact iterationplan2 = iterationplans.elementAt(j);
if(iterationplan2 instanceof CurrentIterationPlan)
{
CurrentIterationPlan currentiterationplan = (CurrentIterationPlan)iterationplan2;
}
}
Vector <Artifact> designs = startiterationAct.getAllActiveDesigns();
for(int j=0; j<designs.size(); j++)
{
Artifact design2 = designs.elementAt(j);
if(design2 instanceof Design)
{
Design design = (Design)design2;
}
}
Vector <Artifact> unittestss = startiterationAct.getAllActiveUnitTestss();
for(int j=0; j<unittestss.size(); j++)
{
Artifact unittests2 = unittestss.elementAt(j);
if(unittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)unittests2;
}
}
Vector <Artifact> acceptancetestss = startiterationAct.getAllActiveAcceptanceTestss();
for(int j=0; j<acceptancetestss.size(); j++)
{
Artifact acceptancetests2 = acceptancetestss.elementAt(j);
if(acceptancetests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetests2;
}
}
Vector <Artifact> codes = startiterationAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Employee> customerreps = startiterationAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
}
}
}
}
}
// SetPercentErroneousBeginIteration rule (StartIteration Action):
private void setPercentErroneousBeginIteration(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<StartIterationAction>startiterationActs = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetPercentErroneousBeginIteration")))
{
for(int i=0; i<startiterationActs.size(); i++)
{
StartIterationAction startiterationAct = startiterationActs.elementAt(i);
if(startiterationAct == action)
{
if((startiterationAct.getAllEmps().size() >= 6) && (startiterationAct.getAllProjs().size() >= 1) && (startiterationAct.getAllReleasePlans().size() >= 1) && (startiterationAct.getAllUserStoriess().size() >= 1) && (startiterationAct.getAllIterationPlans().size() >= 1) && (startiterationAct.getAllDesigns().size() >= 1) && (startiterationAct.getAllUnitTestss().size() >= 1) && (startiterationAct.getAllAcceptanceTestss().size() >= 1) && (startiterationAct.getAllCodes().size() >= 1) && (startiterationAct.getAllCustomerReps().size() >= 1))
{
Vector <Employee> emps = startiterationAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Project> projs = startiterationAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = startiterationAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
Vector <Artifact> userstoriess = startiterationAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
userstories.setPercentErroneousBeginningOfIteration((double)(((double)(userstories.getPercentErroneous()))));
}
}
Vector <Artifact> iterationplans = startiterationAct.getAllActiveIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact iterationplan2 = iterationplans.elementAt(j);
if(iterationplan2 instanceof CurrentIterationPlan)
{
CurrentIterationPlan currentiterationplan = (CurrentIterationPlan)iterationplan2;
}
}
Vector <Artifact> designs = startiterationAct.getAllActiveDesigns();
for(int j=0; j<designs.size(); j++)
{
Artifact design2 = designs.elementAt(j);
if(design2 instanceof Design)
{
Design design = (Design)design2;
}
}
Vector <Artifact> unittestss = startiterationAct.getAllActiveUnitTestss();
for(int j=0; j<unittestss.size(); j++)
{
Artifact unittests2 = unittestss.elementAt(j);
if(unittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)unittests2;
}
}
Vector <Artifact> acceptancetestss = startiterationAct.getAllActiveAcceptanceTestss();
for(int j=0; j<acceptancetestss.size(); j++)
{
Artifact acceptancetests2 = acceptancetestss.elementAt(j);
if(acceptancetests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetests2;
}
}
Vector <Artifact> codes = startiterationAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Employee> customerreps = startiterationAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
}
}
}
}
}
// ResetArtifactAndEmpVals rule (StartIteration Action):
private void resetArtifactAndEmpVals(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<StartIterationAction>startiterationActs = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("ResetArtifactAndEmpVals")))
{
for(int i=0; i<startiterationActs.size(); i++)
{
StartIterationAction startiterationAct = startiterationActs.elementAt(i);
if(startiterationAct == action)
{
if((startiterationAct.getAllEmps().size() >= 6) && (startiterationAct.getAllProjs().size() >= 1) && (startiterationAct.getAllReleasePlans().size() >= 1) && (startiterationAct.getAllUserStoriess().size() >= 1) && (startiterationAct.getAllIterationPlans().size() >= 1) && (startiterationAct.getAllDesigns().size() >= 1) && (startiterationAct.getAllUnitTestss().size() >= 1) && (startiterationAct.getAllAcceptanceTestss().size() >= 1) && (startiterationAct.getAllCodes().size() >= 1) && (startiterationAct.getAllCustomerReps().size() >= 1))
{
Vector <Employee> emps = startiterationAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
softwaredeveloper.setInIterationPlanningMeeting(false);
}
}
Vector <Project> projs = startiterationAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = startiterationAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
Vector <Artifact> userstoriess = startiterationAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Artifact> iterationplans = startiterationAct.getAllActiveIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact iterationplan2 = iterationplans.elementAt(j);
if(iterationplan2 instanceof CurrentIterationPlan)
{
CurrentIterationPlan currentiterationplan = (CurrentIterationPlan)iterationplan2;
currentiterationplan.setCompleteness((double)(0));
currentiterationplan.setCustomerInvolved((int)(0));
}
}
Vector <Artifact> designs = startiterationAct.getAllActiveDesigns();
for(int j=0; j<designs.size(); j++)
{
Artifact design2 = designs.elementAt(j);
if(design2 instanceof Design)
{
Design design = (Design)design2;
design.setNumCRCCardsCompleted((double)(0));
}
}
Vector <Artifact> unittestss = startiterationAct.getAllActiveUnitTestss();
for(int j=0; j<unittestss.size(); j++)
{
Artifact unittests2 = unittestss.elementAt(j);
if(unittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)unittests2;
unittests.setCompleteness((double)(0));
unittests.setTestingToolUsedInCreation((int)(0));
}
}
Vector <Artifact> acceptancetestss = startiterationAct.getAllActiveAcceptanceTestss();
for(int j=0; j<acceptancetestss.size(); j++)
{
Artifact acceptancetests2 = acceptancetestss.elementAt(j);
if(acceptancetests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetests2;
acceptancetests.setCompleteness((double)(0));
acceptancetests.setCustomerInvolvedInCreation((int)(0));
acceptancetests.setTestsRun((double)(0));
acceptancetests.setTestsFailed((double)(0));
}
}
Vector <Artifact> codes = startiterationAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
code.setPercentErroneous((double)(0));
code.setCompleteness((double)(0));
code.setSumEmpRepNumbers((int)(0));
code.setSumKnowsCodingStandard((int)(0));
code.setPercentRefactored((double)(0));
code.setPercentIntegrated((double)(0));
}
}
Vector <Employee> customerreps = startiterationAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
customerrep.setInIterationPlanningMeeting(false);
}
}
}
}
}
}
}
// ResetTimeSinceLastRelease rule (StartIteration Action):
private void resetTimeSinceLastRelease(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<StartIterationAction>startiterationActs = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("ResetTimeSinceLastRelease")))
{
for(int i=0; i<startiterationActs.size(); i++)
{
StartIterationAction startiterationAct = startiterationActs.elementAt(i);
if(startiterationAct == action)
{
if((startiterationAct.getAllEmps().size() >= 6) && (startiterationAct.getAllProjs().size() >= 1) && (startiterationAct.getAllReleasePlans().size() >= 1) && (startiterationAct.getAllUserStoriess().size() >= 1) && (startiterationAct.getAllIterationPlans().size() >= 1) && (startiterationAct.getAllDesigns().size() >= 1) && (startiterationAct.getAllUnitTestss().size() >= 1) && (startiterationAct.getAllAcceptanceTestss().size() >= 1) && (startiterationAct.getAllCodes().size() >= 1) && (startiterationAct.getAllCustomerReps().size() >= 1))
{
Vector <Employee> emps = startiterationAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Project> projs = startiterationAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setTimeSinceLastRelease((int)(0));
}
}
Vector <Artifact> releaseplans = startiterationAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
Vector <Artifact> userstoriess = startiterationAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Artifact> iterationplans = startiterationAct.getAllActiveIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact iterationplan2 = iterationplans.elementAt(j);
if(iterationplan2 instanceof CurrentIterationPlan)
{
CurrentIterationPlan currentiterationplan = (CurrentIterationPlan)iterationplan2;
}
}
Vector <Artifact> designs = startiterationAct.getAllActiveDesigns();
for(int j=0; j<designs.size(); j++)
{
Artifact design2 = designs.elementAt(j);
if(design2 instanceof Design)
{
Design design = (Design)design2;
}
}
Vector <Artifact> unittestss = startiterationAct.getAllActiveUnitTestss();
for(int j=0; j<unittestss.size(); j++)
{
Artifact unittests2 = unittestss.elementAt(j);
if(unittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)unittests2;
}
}
Vector <Artifact> acceptancetestss = startiterationAct.getAllActiveAcceptanceTestss();
for(int j=0; j<acceptancetestss.size(); j++)
{
Artifact acceptancetests2 = acceptancetestss.elementAt(j);
if(acceptancetests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetests2;
}
}
Vector <Artifact> codes = startiterationAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Employee> customerreps = startiterationAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
}
}
}
}
}
// SetIterationPlanningMeetingStarted rule (IterationPlanningMeeting Action):
private void setIterationPlanningMeetingStarted(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IterationPlanningMeetingAction>iterationplanningmeetingActs = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIterationPlanningMeetingStarted")))
{
for(int i=0; i<iterationplanningmeetingActs.size(); i++)
{
IterationPlanningMeetingAction iterationplanningmeetingAct = iterationplanningmeetingActs.elementAt(i);
if(iterationplanningmeetingAct == action)
{
if((iterationplanningmeetingAct.getAllDevelopers().size() >= 1) && (iterationplanningmeetingAct.getAllCustomerReps().size() >= 1) && (iterationplanningmeetingAct.getAllIterationPlans().size() >= 1) && (iterationplanningmeetingAct.getAllProjs().size() >= 1) && (iterationplanningmeetingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = iterationplanningmeetingAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Employee> customerreps = iterationplanningmeetingAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
Vector <Artifact> iterationplans = iterationplanningmeetingAct.getAllActiveIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact iterationplan2 = iterationplans.elementAt(j);
if(iterationplan2 instanceof CurrentIterationPlan)
{
CurrentIterationPlan currentiterationplan = (CurrentIterationPlan)iterationplan2;
}
}
Vector <Project> projs = iterationplanningmeetingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setIterationPlanningMeetingStarted(true);
}
}
Vector <Artifact> releaseplans = iterationplanningmeetingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetCustomerInvolvedItPlanning rule (IterationPlanningMeeting Action):
private void setCustomerInvolvedItPlanning(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IterationPlanningMeetingAction>iterationplanningmeetingActs = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetCustomerInvolvedItPlanning")))
{
for(int i=0; i<iterationplanningmeetingActs.size(); i++)
{
IterationPlanningMeetingAction iterationplanningmeetingAct = iterationplanningmeetingActs.elementAt(i);
if(iterationplanningmeetingAct == action)
{
if((iterationplanningmeetingAct.getAllDevelopers().size() >= 1) && (iterationplanningmeetingAct.getAllCustomerReps().size() >= 1) && (iterationplanningmeetingAct.getAllIterationPlans().size() >= 1) && (iterationplanningmeetingAct.getAllProjs().size() >= 1) && (iterationplanningmeetingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = iterationplanningmeetingAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Employee> customerreps = iterationplanningmeetingAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
Vector <Artifact> iterationplans = iterationplanningmeetingAct.getAllActiveIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact iterationplan2 = iterationplans.elementAt(j);
if(iterationplan2 instanceof CurrentIterationPlan)
{
CurrentIterationPlan currentiterationplan = (CurrentIterationPlan)iterationplan2;
double allActiveCustomerRepCustomerRepRepNumber = 0;
Vector allActiveCustomerReps = iterationplanningmeetingAct.getAllActiveCustomerReps();
for(int k=0; k<allActiveCustomerReps.size(); k++)
{
Object customerrep3 = allActiveCustomerReps.elementAt(k);
if(customerrep3 instanceof CustomerRep)
{
allActiveCustomerRepCustomerRepRepNumber += (double)(((CustomerRep)customerrep3).getRepNumber());
}
}
currentiterationplan.setCustomerInvolved((int)(allActiveCustomerRepCustomerRepRepNumber));
}
}
Vector <Project> projs = iterationplanningmeetingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = iterationplanningmeetingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetEmpsInvolvedInMeeting rule (IterationPlanningMeeting Action):
private void setEmpsInvolvedInMeeting(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IterationPlanningMeetingAction>iterationplanningmeetingActs = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetEmpsInvolvedInMeeting")))
{
for(int i=0; i<iterationplanningmeetingActs.size(); i++)
{
IterationPlanningMeetingAction iterationplanningmeetingAct = iterationplanningmeetingActs.elementAt(i);
if(iterationplanningmeetingAct == action)
{
if((iterationplanningmeetingAct.getAllDevelopers().size() >= 1) && (iterationplanningmeetingAct.getAllCustomerReps().size() >= 1) && (iterationplanningmeetingAct.getAllIterationPlans().size() >= 1) && (iterationplanningmeetingAct.getAllProjs().size() >= 1) && (iterationplanningmeetingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = iterationplanningmeetingAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setInIterationPlanningMeeting(true);
}
}
Vector <Employee> customerreps = iterationplanningmeetingAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
customerrep.setInIterationPlanningMeeting(true);
}
}
Vector <Artifact> iterationplans = iterationplanningmeetingAct.getAllActiveIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact iterationplan2 = iterationplans.elementAt(j);
if(iterationplan2 instanceof CurrentIterationPlan)
{
CurrentIterationPlan currentiterationplan = (CurrentIterationPlan)iterationplan2;
}
}
Vector <Project> projs = iterationplanningmeetingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = iterationplanningmeetingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleIterationMtgT rule (IterationPlanningMeeting Action):
private void setNotIdleIterationMtgT(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IterationPlanningMeetingAction>iterationplanningmeetingActs = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdleIterationMtgT")))
{
for(int i=0; i<iterationplanningmeetingActs.size(); i++)
{
IterationPlanningMeetingAction iterationplanningmeetingAct = iterationplanningmeetingActs.elementAt(i);
if(iterationplanningmeetingAct == action)
{
if((iterationplanningmeetingAct.getAllDevelopers().size() >= 1) && (iterationplanningmeetingAct.getAllCustomerReps().size() >= 1) && (iterationplanningmeetingAct.getAllIterationPlans().size() >= 1) && (iterationplanningmeetingAct.getAllProjs().size() >= 1) && (iterationplanningmeetingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = iterationplanningmeetingAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> customerreps = iterationplanningmeetingAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
Vector <Artifact> iterationplans = iterationplanningmeetingAct.getAllActiveIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact iterationplan2 = iterationplans.elementAt(j);
if(iterationplan2 instanceof CurrentIterationPlan)
{
CurrentIterationPlan currentiterationplan = (CurrentIterationPlan)iterationplan2;
}
}
Vector <Project> projs = iterationplanningmeetingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = iterationplanningmeetingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleIterationMtgC rule (IterationPlanningMeeting Action):
private void setNotIdleIterationMtgC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IterationPlanningMeetingAction>iterationplanningmeetingActs = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<iterationplanningmeetingActs.size(); i++)
{
IterationPlanningMeetingAction iterationplanningmeetingAct = iterationplanningmeetingActs.elementAt(i);
if((iterationplanningmeetingAct.getAllDevelopers().size() >= 1) && (iterationplanningmeetingAct.getAllCustomerReps().size() >= 1) && (iterationplanningmeetingAct.getAllIterationPlans().size() >= 1) && (iterationplanningmeetingAct.getAllProjs().size() >= 1) && (iterationplanningmeetingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = iterationplanningmeetingAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> customerreps = iterationplanningmeetingAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
Vector <Artifact> iterationplans = iterationplanningmeetingAct.getAllActiveIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact iterationplan2 = iterationplans.elementAt(j);
if(iterationplan2 instanceof CurrentIterationPlan)
{
CurrentIterationPlan currentiterationplan = (CurrentIterationPlan)iterationplan2;
}
}
Vector <Project> projs = iterationplanningmeetingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = iterationplanningmeetingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetIdleIterationMtg rule (IterationPlanningMeeting Action):
private void setIdleIterationMtg(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IterationPlanningMeetingAction>iterationplanningmeetingActs = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdleIterationMtg")))
{
for(int i=0; i<iterationplanningmeetingActs.size(); i++)
{
IterationPlanningMeetingAction iterationplanningmeetingAct = iterationplanningmeetingActs.elementAt(i);
if(iterationplanningmeetingAct == action)
{
if((iterationplanningmeetingAct.getAllDevelopers().size() >= 1) && (iterationplanningmeetingAct.getAllCustomerReps().size() >= 1) && (iterationplanningmeetingAct.getAllIterationPlans().size() >= 1) && (iterationplanningmeetingAct.getAllProjs().size() >= 1) && (iterationplanningmeetingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = iterationplanningmeetingAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(true);
}
}
Vector <Employee> customerreps = iterationplanningmeetingAct.getAllActiveCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee customerrep2 = customerreps.elementAt(j);
if(customerrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)customerrep2;
}
}
Vector <Artifact> iterationplans = iterationplanningmeetingAct.getAllActiveIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact iterationplan2 = iterationplans.elementAt(j);
if(iterationplan2 instanceof CurrentIterationPlan)
{
CurrentIterationPlan currentiterationplan = (CurrentIterationPlan)iterationplan2;
}
}
Vector <Project> projs = iterationplanningmeetingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = iterationplanningmeetingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetUserStoriesChosen rule (ChooseUserStoriesForIteration Action):
private void setUserStoriesChosen(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ChooseUserStoriesForIterationAction>chooseuserstoriesforiterationActs = state.getActionStateRepository().getChooseUserStoriesForIterationActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetUserStoriesChosen")))
{
for(int i=0; i<chooseuserstoriesforiterationActs.size(); i++)
{
ChooseUserStoriesForIterationAction chooseuserstoriesforiterationAct = chooseuserstoriesforiterationActs.elementAt(i);
if(chooseuserstoriesforiterationAct == action)
{
if((chooseuserstoriesforiterationAct.getAllEmps().size() >= 1) && (chooseuserstoriesforiterationAct.getAllProjs().size() >= 1) && (chooseuserstoriesforiterationAct.getAllIterationPlans().size() >= 1) && (chooseuserstoriesforiterationAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = chooseuserstoriesforiterationAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
else if(emp2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)emp2;
}
}
Vector <Project> projs = chooseuserstoriesforiterationAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setUserStoriesChosenForThisIteration(true);
}
}
Vector <Artifact> iterationplans = chooseuserstoriesforiterationAct.getAllActiveIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact iterationplan2 = iterationplans.elementAt(j);
if(iterationplan2 instanceof CurrentIterationPlan)
{
CurrentIterationPlan currentiterationplan = (CurrentIterationPlan)iterationplan2;
}
}
Vector <Artifact> releaseplans = chooseuserstoriesforiterationAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetProgrammingTasksChosen rule (CreateProgrammingTasks Action):
private void setProgrammingTasksChosen(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateProgrammingTasksAction>createprogrammingtasksActs = state.getActionStateRepository().getCreateProgrammingTasksActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetProgrammingTasksChosen")))
{
for(int i=0; i<createprogrammingtasksActs.size(); i++)
{
CreateProgrammingTasksAction createprogrammingtasksAct = createprogrammingtasksActs.elementAt(i);
if(createprogrammingtasksAct == action)
{
if((createprogrammingtasksAct.getAllEmps().size() >= 1) && (createprogrammingtasksAct.getAllIterationPlans().size() >= 1) && (createprogrammingtasksAct.getAllProjs().size() >= 1) && (createprogrammingtasksAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = createprogrammingtasksAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Artifact> iterationplans = createprogrammingtasksAct.getAllActiveIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact iterationplan2 = iterationplans.elementAt(j);
if(iterationplan2 instanceof CurrentIterationPlan)
{
CurrentIterationPlan currentiterationplan = (CurrentIterationPlan)iterationplan2;
}
}
Vector <Project> projs = createprogrammingtasksAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setProgrammingTasksAssignedThisIteration(true);
}
}
Vector <Artifact> releaseplans = createprogrammingtasksAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetCustInvolvedAccTests rule (CreateAcceptanceTests Action):
private void setCustInvolvedAccTests(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateAcceptanceTestsAction>createacceptancetestsActs = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetCustInvolvedAccTests")))
{
for(int i=0; i<createacceptancetestsActs.size(); i++)
{
CreateAcceptanceTestsAction createacceptancetestsAct = createacceptancetestsActs.elementAt(i);
if(createacceptancetestsAct == action)
{
if((createacceptancetestsAct.getAllDevelopers().size() >= 1) && (createacceptancetestsAct.getAllCustReps().size() >= 0) && (createacceptancetestsAct.getAllTestss().size() >= 1) && (createacceptancetestsAct.getAllProjs().size() >= 1) && (createacceptancetestsAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = createacceptancetestsAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Employee> custreps = createacceptancetestsAct.getAllActiveCustReps();
for(int j=0; j<custreps.size(); j++)
{
Employee custrep2 = custreps.elementAt(j);
if(custrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)custrep2;
}
}
Vector <Artifact> testss = createacceptancetestsAct.getAllActiveTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact tests2 = testss.elementAt(j);
if(tests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)tests2;
double allActiveCustRepCustomerRepRepNumber = 0;
Vector allActiveCustReps = createacceptancetestsAct.getAllActiveCustReps();
for(int k=0; k<allActiveCustReps.size(); k++)
{
Object custrep3 = allActiveCustReps.elementAt(k);
if(custrep3 instanceof CustomerRep)
{
allActiveCustRepCustomerRepRepNumber += (double)(((CustomerRep)custrep3).getRepNumber());
}
}
acceptancetests.setCustomerInvolvedInCreation((int)(allActiveCustRepCustomerRepRepNumber));
}
}
Vector <Project> projs = createacceptancetestsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = createacceptancetestsAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsCreateATTrig rule (CreateAcceptanceTests Action):
private void updateNumActsCreateATTrig(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateAcceptanceTestsAction>createacceptancetestsActs = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsCreateATTrig")))
{
for(int i=0; i<createacceptancetestsActs.size(); i++)
{
CreateAcceptanceTestsAction createacceptancetestsAct = createacceptancetestsActs.elementAt(i);
if(createacceptancetestsAct == action)
{
if((createacceptancetestsAct.getAllDevelopers().size() >= 1) && (createacceptancetestsAct.getAllCustReps().size() >= 0) && (createacceptancetestsAct.getAllTestss().size() >= 1) && (createacceptancetestsAct.getAllProjs().size() >= 1) && (createacceptancetestsAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = createacceptancetestsAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Employee> custreps = createacceptancetestsAct.getAllActiveCustReps();
for(int j=0; j<custreps.size(); j++)
{
Employee custrep2 = custreps.elementAt(j);
if(custrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)custrep2;
}
}
Vector <Artifact> testss = createacceptancetestsAct.getAllActiveTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact tests2 = testss.elementAt(j);
if(tests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)tests2;
}
}
Vector <Project> projs = createacceptancetestsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> releaseplans = createacceptancetestsAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleCreateAccTestsT rule (CreateAcceptanceTests Action):
private void setNotIdleCreateAccTestsT(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateAcceptanceTestsAction>createacceptancetestsActs = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdleCreateAccTestsT")))
{
for(int i=0; i<createacceptancetestsActs.size(); i++)
{
CreateAcceptanceTestsAction createacceptancetestsAct = createacceptancetestsActs.elementAt(i);
if(createacceptancetestsAct == action)
{
if((createacceptancetestsAct.getAllDevelopers().size() >= 1) && (createacceptancetestsAct.getAllCustReps().size() >= 0) && (createacceptancetestsAct.getAllTestss().size() >= 1) && (createacceptancetestsAct.getAllProjs().size() >= 1) && (createacceptancetestsAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = createacceptancetestsAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> custreps = createacceptancetestsAct.getAllActiveCustReps();
for(int j=0; j<custreps.size(); j++)
{
Employee custrep2 = custreps.elementAt(j);
if(custrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)custrep2;
}
}
Vector <Artifact> testss = createacceptancetestsAct.getAllActiveTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact tests2 = testss.elementAt(j);
if(tests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)tests2;
}
}
Vector <Project> projs = createacceptancetestsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = createacceptancetestsAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleCreateAccTestsC rule (CreateAcceptanceTests Action):
private void setNotIdleCreateAccTestsC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateAcceptanceTestsAction>createacceptancetestsActs = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<createacceptancetestsActs.size(); i++)
{
CreateAcceptanceTestsAction createacceptancetestsAct = createacceptancetestsActs.elementAt(i);
if((createacceptancetestsAct.getAllDevelopers().size() >= 1) && (createacceptancetestsAct.getAllCustReps().size() >= 0) && (createacceptancetestsAct.getAllTestss().size() >= 1) && (createacceptancetestsAct.getAllProjs().size() >= 1) && (createacceptancetestsAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = createacceptancetestsAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> custreps = createacceptancetestsAct.getAllActiveCustReps();
for(int j=0; j<custreps.size(); j++)
{
Employee custrep2 = custreps.elementAt(j);
if(custrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)custrep2;
}
}
Vector <Artifact> testss = createacceptancetestsAct.getAllActiveTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact tests2 = testss.elementAt(j);
if(tests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)tests2;
}
}
Vector <Project> projs = createacceptancetestsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = createacceptancetestsAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetAccTestsCreated rule (CreateAcceptanceTests Action):
private void setAccTestsCreated(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateAcceptanceTestsAction>createacceptancetestsActs = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetAccTestsCreated")))
{
for(int i=0; i<createacceptancetestsActs.size(); i++)
{
CreateAcceptanceTestsAction createacceptancetestsAct = createacceptancetestsActs.elementAt(i);
if(createacceptancetestsAct == action)
{
if((createacceptancetestsAct.getAllDevelopers().size() >= 1) && (createacceptancetestsAct.getAllCustReps().size() >= 0) && (createacceptancetestsAct.getAllTestss().size() >= 1) && (createacceptancetestsAct.getAllProjs().size() >= 1) && (createacceptancetestsAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = createacceptancetestsAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Employee> custreps = createacceptancetestsAct.getAllActiveCustReps();
for(int j=0; j<custreps.size(); j++)
{
Employee custrep2 = custreps.elementAt(j);
if(custrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)custrep2;
}
}
Vector <Artifact> testss = createacceptancetestsAct.getAllActiveTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact tests2 = testss.elementAt(j);
if(tests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)tests2;
}
}
Vector <Project> projs = createacceptancetestsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setAcceptanceTestsCreatedThisIteration((int)(1));
}
}
Vector <Artifact> releaseplans = createacceptancetestsAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsCreateATDest rule (CreateAcceptanceTests Action):
private void updateNumActsCreateATDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateAcceptanceTestsAction>createacceptancetestsActs = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsCreateATDest")))
{
for(int i=0; i<createacceptancetestsActs.size(); i++)
{
CreateAcceptanceTestsAction createacceptancetestsAct = createacceptancetestsActs.elementAt(i);
if(createacceptancetestsAct == action)
{
if((createacceptancetestsAct.getAllDevelopers().size() >= 1) && (createacceptancetestsAct.getAllCustReps().size() >= 0) && (createacceptancetestsAct.getAllTestss().size() >= 1) && (createacceptancetestsAct.getAllProjs().size() >= 1) && (createacceptancetestsAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = createacceptancetestsAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Employee> custreps = createacceptancetestsAct.getAllActiveCustReps();
for(int j=0; j<custreps.size(); j++)
{
Employee custrep2 = custreps.elementAt(j);
if(custrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)custrep2;
}
}
Vector <Artifact> testss = createacceptancetestsAct.getAllActiveTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact tests2 = testss.elementAt(j);
if(tests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)tests2;
}
}
Vector <Project> projs = createacceptancetestsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> releaseplans = createacceptancetestsAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIdleCreateAccTests rule (CreateAcceptanceTests Action):
private void setIdleCreateAccTests(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateAcceptanceTestsAction>createacceptancetestsActs = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdleCreateAccTests")))
{
for(int i=0; i<createacceptancetestsActs.size(); i++)
{
CreateAcceptanceTestsAction createacceptancetestsAct = createacceptancetestsActs.elementAt(i);
if(createacceptancetestsAct == action)
{
if((createacceptancetestsAct.getAllDevelopers().size() >= 1) && (createacceptancetestsAct.getAllCustReps().size() >= 0) && (createacceptancetestsAct.getAllTestss().size() >= 1) && (createacceptancetestsAct.getAllProjs().size() >= 1) && (createacceptancetestsAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = createacceptancetestsAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(true);
}
}
Vector <Employee> custreps = createacceptancetestsAct.getAllActiveCustReps();
for(int j=0; j<custreps.size(); j++)
{
Employee custrep2 = custreps.elementAt(j);
if(custrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)custrep2;
}
}
Vector <Artifact> testss = createacceptancetestsAct.getAllActiveTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact tests2 = testss.elementAt(j);
if(tests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)tests2;
}
}
Vector <Project> projs = createacceptancetestsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = createacceptancetestsAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsDesignTrig rule (Design Action):
private void updateNumActsDesignTrig(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<DesignAction>designActs = state.getActionStateRepository().getDesignActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsDesignTrig")))
{
for(int i=0; i<designActs.size(); i++)
{
DesignAction designAct = designActs.elementAt(i);
if(designAct == action)
{
if((designAct.getAllDevelopers().size() >= 1) && (designAct.getAllCRCCardss().size() >= 1) && (designAct.getAllDesigns().size() >= 1) && (designAct.getAllProjs().size() >= 1) && (designAct.getAllAssociatedUserStoriess().size() >= 1) && (designAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = designAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Tool> crccardss = designAct.getAllActiveCRCCardss();
for(int j=0; j<crccardss.size(); j++)
{
Tool crccards2 = crccardss.elementAt(j);
if(crccards2 instanceof CRCCards)
{
CRCCards crccards = (CRCCards)crccards2;
}
}
Vector <Artifact> designs = designAct.getAllActiveDesigns();
for(int j=0; j<designs.size(); j++)
{
Artifact design2 = designs.elementAt(j);
if(design2 instanceof Design)
{
Design design = (Design)design2;
}
}
Vector <Project> projs = designAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateduserstoriess = designAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = designAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleDesignT rule (Design Action):
private void setNotIdleDesignT(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<DesignAction>designActs = state.getActionStateRepository().getDesignActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdleDesignT")))
{
for(int i=0; i<designActs.size(); i++)
{
DesignAction designAct = designActs.elementAt(i);
if(designAct == action)
{
if((designAct.getAllDevelopers().size() >= 1) && (designAct.getAllCRCCardss().size() >= 1) && (designAct.getAllDesigns().size() >= 1) && (designAct.getAllProjs().size() >= 1) && (designAct.getAllAssociatedUserStoriess().size() >= 1) && (designAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = designAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(false);
}
}
Vector <Tool> crccardss = designAct.getAllActiveCRCCardss();
for(int j=0; j<crccardss.size(); j++)
{
Tool crccards2 = crccardss.elementAt(j);
if(crccards2 instanceof CRCCards)
{
CRCCards crccards = (CRCCards)crccards2;
}
}
Vector <Artifact> designs = designAct.getAllActiveDesigns();
for(int j=0; j<designs.size(); j++)
{
Artifact design2 = designs.elementAt(j);
if(design2 instanceof Design)
{
Design design = (Design)design2;
}
}
Vector <Project> projs = designAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = designAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = designAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleDesignC rule (Design Action):
private void setNotIdleDesignC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<DesignAction>designActs = state.getActionStateRepository().getDesignActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<designActs.size(); i++)
{
DesignAction designAct = designActs.elementAt(i);
if((designAct.getAllDevelopers().size() >= 1) && (designAct.getAllCRCCardss().size() >= 1) && (designAct.getAllDesigns().size() >= 1) && (designAct.getAllProjs().size() >= 1) && (designAct.getAllAssociatedUserStoriess().size() >= 1) && (designAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = designAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(false);
}
}
Vector <Tool> crccardss = designAct.getAllActiveCRCCardss();
for(int j=0; j<crccardss.size(); j++)
{
Tool crccards2 = crccardss.elementAt(j);
if(crccards2 instanceof CRCCards)
{
CRCCards crccards = (CRCCards)crccards2;
}
}
Vector <Artifact> designs = designAct.getAllActiveDesigns();
for(int j=0; j<designs.size(); j++)
{
Artifact design2 = designs.elementAt(j);
if(design2 instanceof Design)
{
Design design = (Design)design2;
}
}
Vector <Project> projs = designAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = designAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = designAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// UpdateNumActsDesignDest rule (Design Action):
private void updateNumActsDesignDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<DesignAction>designActs = state.getActionStateRepository().getDesignActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsDesignDest")))
{
for(int i=0; i<designActs.size(); i++)
{
DesignAction designAct = designActs.elementAt(i);
if(designAct == action)
{
if((designAct.getAllDevelopers().size() >= 1) && (designAct.getAllCRCCardss().size() >= 1) && (designAct.getAllDesigns().size() >= 1) && (designAct.getAllProjs().size() >= 1) && (designAct.getAllAssociatedUserStoriess().size() >= 1) && (designAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = designAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Tool> crccardss = designAct.getAllActiveCRCCardss();
for(int j=0; j<crccardss.size(); j++)
{
Tool crccards2 = crccardss.elementAt(j);
if(crccards2 instanceof CRCCards)
{
CRCCards crccards = (CRCCards)crccards2;
}
}
Vector <Artifact> designs = designAct.getAllActiveDesigns();
for(int j=0; j<designs.size(); j++)
{
Artifact design2 = designs.elementAt(j);
if(design2 instanceof Design)
{
Design design = (Design)design2;
}
}
Vector <Project> projs = designAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateduserstoriess = designAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = designAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIdleDesign rule (Design Action):
private void setIdleDesign(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<DesignAction>designActs = state.getActionStateRepository().getDesignActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdleDesign")))
{
for(int i=0; i<designActs.size(); i++)
{
DesignAction designAct = designActs.elementAt(i);
if(designAct == action)
{
if((designAct.getAllDevelopers().size() >= 1) && (designAct.getAllCRCCardss().size() >= 1) && (designAct.getAllDesigns().size() >= 1) && (designAct.getAllProjs().size() >= 1) && (designAct.getAllAssociatedUserStoriess().size() >= 1) && (designAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = designAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(true);
}
}
Vector <Tool> crccardss = designAct.getAllActiveCRCCardss();
for(int j=0; j<crccardss.size(); j++)
{
Tool crccards2 = crccardss.elementAt(j);
if(crccards2 instanceof CRCCards)
{
CRCCards crccards = (CRCCards)crccards2;
}
}
Vector <Artifact> designs = designAct.getAllActiveDesigns();
for(int j=0; j<designs.size(); j++)
{
Artifact design2 = designs.elementAt(j);
if(design2 instanceof Design)
{
Design design = (Design)design2;
}
}
Vector <Project> projs = designAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = designAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = designAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetToolUsedOrNot rule (CreateUnitTests Action):
private void setToolUsedOrNot(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateUnitTestsAction>createunittestsActs = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetToolUsedOrNot")))
{
for(int i=0; i<createunittestsActs.size(); i++)
{
CreateUnitTestsAction createunittestsAct = createunittestsActs.elementAt(i);
if(createunittestsAct == action)
{
if((createunittestsAct.getAllDevelopers().size() >= 1) && (createunittestsAct.getAllTestss().size() >= 1) && (createunittestsAct.getAllTestingFrameworks().size() >= 0) && (createunittestsAct.getAllProjs().size() >= 1) && (createunittestsAct.getAllAssociatedDesigns().size() >= 1) && (createunittestsAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = createunittestsAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Artifact> testss = createunittestsAct.getAllActiveTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact tests2 = testss.elementAt(j);
if(tests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)tests2;
double numTestingFramework = (double)(createunittestsAct.getAllTestingFrameworks().size());
unittests.setTestingToolUsedInCreation((int)(numTestingFramework));
}
}
Vector <Tool> testingframeworks = createunittestsAct.getAllActiveTestingFrameworks();
for(int j=0; j<testingframeworks.size(); j++)
{
Tool testingframework2 = testingframeworks.elementAt(j);
if(testingframework2 instanceof UnitTestingFramework)
{
UnitTestingFramework unittestingframework = (UnitTestingFramework)testingframework2;
}
}
Vector <Project> projs = createunittestsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateddesigns = createunittestsAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> releaseplans = createunittestsAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsCreateUTTrig rule (CreateUnitTests Action):
private void updateNumActsCreateUTTrig(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateUnitTestsAction>createunittestsActs = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsCreateUTTrig")))
{
for(int i=0; i<createunittestsActs.size(); i++)
{
CreateUnitTestsAction createunittestsAct = createunittestsActs.elementAt(i);
if(createunittestsAct == action)
{
if((createunittestsAct.getAllDevelopers().size() >= 1) && (createunittestsAct.getAllTestss().size() >= 1) && (createunittestsAct.getAllTestingFrameworks().size() >= 0) && (createunittestsAct.getAllProjs().size() >= 1) && (createunittestsAct.getAllAssociatedDesigns().size() >= 1) && (createunittestsAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = createunittestsAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Artifact> testss = createunittestsAct.getAllActiveTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact tests2 = testss.elementAt(j);
if(tests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)tests2;
}
}
Vector <Tool> testingframeworks = createunittestsAct.getAllActiveTestingFrameworks();
for(int j=0; j<testingframeworks.size(); j++)
{
Tool testingframework2 = testingframeworks.elementAt(j);
if(testingframework2 instanceof UnitTestingFramework)
{
UnitTestingFramework unittestingframework = (UnitTestingFramework)testingframework2;
}
}
Vector <Project> projs = createunittestsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateddesigns = createunittestsAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> releaseplans = createunittestsAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleCreateUTT rule (CreateUnitTests Action):
private void setNotIdleCreateUTT(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateUnitTestsAction>createunittestsActs = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdleCreateUTT")))
{
for(int i=0; i<createunittestsActs.size(); i++)
{
CreateUnitTestsAction createunittestsAct = createunittestsActs.elementAt(i);
if(createunittestsAct == action)
{
if((createunittestsAct.getAllDevelopers().size() >= 1) && (createunittestsAct.getAllTestss().size() >= 1) && (createunittestsAct.getAllTestingFrameworks().size() >= 0) && (createunittestsAct.getAllProjs().size() >= 1) && (createunittestsAct.getAllAssociatedDesigns().size() >= 1) && (createunittestsAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = createunittestsAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> testss = createunittestsAct.getAllActiveTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact tests2 = testss.elementAt(j);
if(tests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)tests2;
}
}
Vector <Tool> testingframeworks = createunittestsAct.getAllActiveTestingFrameworks();
for(int j=0; j<testingframeworks.size(); j++)
{
Tool testingframework2 = testingframeworks.elementAt(j);
if(testingframework2 instanceof UnitTestingFramework)
{
UnitTestingFramework unittestingframework = (UnitTestingFramework)testingframework2;
}
}
Vector <Project> projs = createunittestsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateddesigns = createunittestsAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> releaseplans = createunittestsAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleCreateUTC rule (CreateUnitTests Action):
private void setNotIdleCreateUTC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateUnitTestsAction>createunittestsActs = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<createunittestsActs.size(); i++)
{
CreateUnitTestsAction createunittestsAct = createunittestsActs.elementAt(i);
if((createunittestsAct.getAllDevelopers().size() >= 1) && (createunittestsAct.getAllTestss().size() >= 1) && (createunittestsAct.getAllTestingFrameworks().size() >= 0) && (createunittestsAct.getAllProjs().size() >= 1) && (createunittestsAct.getAllAssociatedDesigns().size() >= 1) && (createunittestsAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = createunittestsAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> testss = createunittestsAct.getAllActiveTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact tests2 = testss.elementAt(j);
if(tests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)tests2;
}
}
Vector <Tool> testingframeworks = createunittestsAct.getAllActiveTestingFrameworks();
for(int j=0; j<testingframeworks.size(); j++)
{
Tool testingframework2 = testingframeworks.elementAt(j);
if(testingframework2 instanceof UnitTestingFramework)
{
UnitTestingFramework unittestingframework = (UnitTestingFramework)testingframework2;
}
}
Vector <Project> projs = createunittestsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateddesigns = createunittestsAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> releaseplans = createunittestsAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetUnitTestsCreated rule (CreateUnitTests Action):
private void setUnitTestsCreated(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateUnitTestsAction>createunittestsActs = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetUnitTestsCreated")))
{
for(int i=0; i<createunittestsActs.size(); i++)
{
CreateUnitTestsAction createunittestsAct = createunittestsActs.elementAt(i);
if(createunittestsAct == action)
{
if((createunittestsAct.getAllDevelopers().size() >= 1) && (createunittestsAct.getAllTestss().size() >= 1) && (createunittestsAct.getAllTestingFrameworks().size() >= 0) && (createunittestsAct.getAllProjs().size() >= 1) && (createunittestsAct.getAllAssociatedDesigns().size() >= 1) && (createunittestsAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = createunittestsAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Artifact> testss = createunittestsAct.getAllActiveTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact tests2 = testss.elementAt(j);
if(tests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)tests2;
}
}
Vector <Tool> testingframeworks = createunittestsAct.getAllActiveTestingFrameworks();
for(int j=0; j<testingframeworks.size(); j++)
{
Tool testingframework2 = testingframeworks.elementAt(j);
if(testingframework2 instanceof UnitTestingFramework)
{
UnitTestingFramework unittestingframework = (UnitTestingFramework)testingframework2;
}
}
Vector <Project> projs = createunittestsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setUnitTestsCreatedThisIteration((int)(1));
}
}
Vector <Artifact> associateddesigns = createunittestsAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> releaseplans = createunittestsAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsCreateUTDest rule (CreateUnitTests Action):
private void updateNumActsCreateUTDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateUnitTestsAction>createunittestsActs = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsCreateUTDest")))
{
for(int i=0; i<createunittestsActs.size(); i++)
{
CreateUnitTestsAction createunittestsAct = createunittestsActs.elementAt(i);
if(createunittestsAct == action)
{
if((createunittestsAct.getAllDevelopers().size() >= 1) && (createunittestsAct.getAllTestss().size() >= 1) && (createunittestsAct.getAllTestingFrameworks().size() >= 0) && (createunittestsAct.getAllProjs().size() >= 1) && (createunittestsAct.getAllAssociatedDesigns().size() >= 1) && (createunittestsAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = createunittestsAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Artifact> testss = createunittestsAct.getAllActiveTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact tests2 = testss.elementAt(j);
if(tests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)tests2;
}
}
Vector <Tool> testingframeworks = createunittestsAct.getAllActiveTestingFrameworks();
for(int j=0; j<testingframeworks.size(); j++)
{
Tool testingframework2 = testingframeworks.elementAt(j);
if(testingframework2 instanceof UnitTestingFramework)
{
UnitTestingFramework unittestingframework = (UnitTestingFramework)testingframework2;
}
}
Vector <Project> projs = createunittestsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateddesigns = createunittestsAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> releaseplans = createunittestsAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIdleCreateUT rule (CreateUnitTests Action):
private void setIdleCreateUT(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CreateUnitTestsAction>createunittestsActs = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdleCreateUT")))
{
for(int i=0; i<createunittestsActs.size(); i++)
{
CreateUnitTestsAction createunittestsAct = createunittestsActs.elementAt(i);
if(createunittestsAct == action)
{
if((createunittestsAct.getAllDevelopers().size() >= 1) && (createunittestsAct.getAllTestss().size() >= 1) && (createunittestsAct.getAllTestingFrameworks().size() >= 0) && (createunittestsAct.getAllProjs().size() >= 1) && (createunittestsAct.getAllAssociatedDesigns().size() >= 1) && (createunittestsAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = createunittestsAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(true);
}
}
Vector <Artifact> testss = createunittestsAct.getAllActiveTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact tests2 = testss.elementAt(j);
if(tests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)tests2;
}
}
Vector <Tool> testingframeworks = createunittestsAct.getAllActiveTestingFrameworks();
for(int j=0; j<testingframeworks.size(); j++)
{
Tool testingframework2 = testingframeworks.elementAt(j);
if(testingframework2 instanceof UnitTestingFramework)
{
UnitTestingFramework unittestingframework = (UnitTestingFramework)testingframework2;
}
}
Vector <Project> projs = createunittestsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateddesigns = createunittestsAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> releaseplans = createunittestsAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleLearnStdT rule (LearnCodingStandard Action):
private void setNotIdleLearnStdT(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<LearnCodingStandardAction>learncodingstandardActs = state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdleLearnStdT")))
{
for(int i=0; i<learncodingstandardActs.size(); i++)
{
LearnCodingStandardAction learncodingstandardAct = learncodingstandardActs.elementAt(i);
if(learncodingstandardAct == action)
{
if((learncodingstandardAct.getAllDevelopers().size() >= 1) && (learncodingstandardAct.getAllCodingStandards().size() >= 1) && (learncodingstandardAct.getAllProjs().size() >= 1))
{
Vector <Employee> developers = learncodingstandardAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(false);
}
}
Vector <Tool> codingstandards = learncodingstandardAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Project> projs = learncodingstandardAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
}
// SetNotIdleLearnStdC rule (LearnCodingStandard Action):
private void setNotIdleLearnStdC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<LearnCodingStandardAction>learncodingstandardActs = state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<learncodingstandardActs.size(); i++)
{
LearnCodingStandardAction learncodingstandardAct = learncodingstandardActs.elementAt(i);
if((learncodingstandardAct.getAllDevelopers().size() >= 1) && (learncodingstandardAct.getAllCodingStandards().size() >= 1) && (learncodingstandardAct.getAllProjs().size() >= 1))
{
Vector <Employee> developers = learncodingstandardAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(false);
}
}
Vector <Tool> codingstandards = learncodingstandardAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Project> projs = learncodingstandardAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
// SetKnowsCodingStandard rule (LearnCodingStandard Action):
private void setKnowsCodingStandard(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<LearnCodingStandardAction>learncodingstandardActs = state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetKnowsCodingStandard")))
{
for(int i=0; i<learncodingstandardActs.size(); i++)
{
LearnCodingStandardAction learncodingstandardAct = learncodingstandardActs.elementAt(i);
if(learncodingstandardAct == action)
{
if((learncodingstandardAct.getAllDevelopers().size() >= 1) && (learncodingstandardAct.getAllCodingStandards().size() >= 1) && (learncodingstandardAct.getAllProjs().size() >= 1))
{
Vector <Employee> developers = learncodingstandardAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setKnowsCodingStandard(true);
}
}
Vector <Tool> codingstandards = learncodingstandardAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Project> projs = learncodingstandardAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
}
// SetIdleLearnStd rule (LearnCodingStandard Action):
private void setIdleLearnStd(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<LearnCodingStandardAction>learncodingstandardActs = state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdleLearnStd")))
{
for(int i=0; i<learncodingstandardActs.size(); i++)
{
LearnCodingStandardAction learncodingstandardAct = learncodingstandardActs.elementAt(i);
if(learncodingstandardAct == action)
{
if((learncodingstandardAct.getAllDevelopers().size() >= 1) && (learncodingstandardAct.getAllCodingStandards().size() >= 1) && (learncodingstandardAct.getAllProjs().size() >= 1))
{
Vector <Employee> developers = learncodingstandardAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(true);
}
}
Vector <Tool> codingstandards = learncodingstandardAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Project> projs = learncodingstandardAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
}
}
}
}
}
// SetProgrammingProgramTrig rule (Program Action):
private void setProgrammingProgramTrig(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ProgramAction>programActs = state.getActionStateRepository().getProgramActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetProgrammingProgramTrig")))
{
for(int i=0; i<programActs.size(); i++)
{
ProgramAction programAct = programActs.elementAt(i);
if(programAct == action)
{
if((programAct.getAllDevelopers().size() >= 1) && (programAct.getAllCodes().size() >= 1) && (programAct.getAllCodingStandards().size() >= 1) && (programAct.getAllAssociatedDesigns().size() >= 1) && (programAct.getAllAssociatedUnitTestss().size() >= 1) && (programAct.getAllProjs().size() >= 1) && (programAct.getAllAssociatedUserStoriess().size() >= 1) && (programAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = programAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setProgramming(true);
}
}
Vector <Artifact> codes = programAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = programAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = programAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = programAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = programAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = programAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = programAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsProgramTrig rule (Program Action):
private void updateNumActsProgramTrig(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ProgramAction>programActs = state.getActionStateRepository().getProgramActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsProgramTrig")))
{
for(int i=0; i<programActs.size(); i++)
{
ProgramAction programAct = programActs.elementAt(i);
if(programAct == action)
{
if((programAct.getAllDevelopers().size() >= 1) && (programAct.getAllCodes().size() >= 1) && (programAct.getAllCodingStandards().size() >= 1) && (programAct.getAllAssociatedDesigns().size() >= 1) && (programAct.getAllAssociatedUnitTestss().size() >= 1) && (programAct.getAllProjs().size() >= 1) && (programAct.getAllAssociatedUserStoriess().size() >= 1) && (programAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = programAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Artifact> codes = programAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = programAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = programAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = programAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = programAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateduserstoriess = programAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = programAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleProgramT rule (Program Action):
private void setNotIdleProgramT(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ProgramAction>programActs = state.getActionStateRepository().getProgramActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdleProgramT")))
{
for(int i=0; i<programActs.size(); i++)
{
ProgramAction programAct = programActs.elementAt(i);
if(programAct == action)
{
if((programAct.getAllDevelopers().size() >= 1) && (programAct.getAllCodes().size() >= 1) && (programAct.getAllCodingStandards().size() >= 1) && (programAct.getAllAssociatedDesigns().size() >= 1) && (programAct.getAllAssociatedUnitTestss().size() >= 1) && (programAct.getAllProjs().size() >= 1) && (programAct.getAllAssociatedUserStoriess().size() >= 1) && (programAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = programAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = programAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = programAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = programAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = programAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = programAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = programAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = programAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleProgramC rule (Program Action):
private void setNotIdleProgramC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ProgramAction>programActs = state.getActionStateRepository().getProgramActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<programActs.size(); i++)
{
ProgramAction programAct = programActs.elementAt(i);
if((programAct.getAllDevelopers().size() >= 1) && (programAct.getAllCodes().size() >= 1) && (programAct.getAllCodingStandards().size() >= 1) && (programAct.getAllAssociatedDesigns().size() >= 1) && (programAct.getAllAssociatedUnitTestss().size() >= 1) && (programAct.getAllProjs().size() >= 1) && (programAct.getAllAssociatedUserStoriess().size() >= 1) && (programAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = programAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = programAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = programAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = programAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = programAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = programAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = programAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = programAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetNotProgrammingProgramDest rule (Program Action):
private void setNotProgrammingProgramDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ProgramAction>programActs = state.getActionStateRepository().getProgramActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotProgrammingProgramDest")))
{
for(int i=0; i<programActs.size(); i++)
{
ProgramAction programAct = programActs.elementAt(i);
if(programAct == action)
{
if((programAct.getAllDevelopers().size() >= 1) && (programAct.getAllCodes().size() >= 1) && (programAct.getAllCodingStandards().size() >= 1) && (programAct.getAllAssociatedDesigns().size() >= 1) && (programAct.getAllAssociatedUnitTestss().size() >= 1) && (programAct.getAllProjs().size() >= 1) && (programAct.getAllAssociatedUserStoriess().size() >= 1) && (programAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = programAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setProgramming(false);
}
}
Vector <Artifact> codes = programAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = programAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = programAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = programAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = programAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = programAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = programAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsProgramDest rule (Program Action):
private void updateNumActsProgramDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ProgramAction>programActs = state.getActionStateRepository().getProgramActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsProgramDest")))
{
for(int i=0; i<programActs.size(); i++)
{
ProgramAction programAct = programActs.elementAt(i);
if(programAct == action)
{
if((programAct.getAllDevelopers().size() >= 1) && (programAct.getAllCodes().size() >= 1) && (programAct.getAllCodingStandards().size() >= 1) && (programAct.getAllAssociatedDesigns().size() >= 1) && (programAct.getAllAssociatedUnitTestss().size() >= 1) && (programAct.getAllProjs().size() >= 1) && (programAct.getAllAssociatedUserStoriess().size() >= 1) && (programAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = programAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
}
}
Vector <Artifact> codes = programAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = programAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = programAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = programAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = programAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateduserstoriess = programAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = programAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIdleProgram rule (Program Action):
private void setIdleProgram(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ProgramAction>programActs = state.getActionStateRepository().getProgramActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdleProgram")))
{
for(int i=0; i<programActs.size(); i++)
{
ProgramAction programAct = programActs.elementAt(i);
if(programAct == action)
{
if((programAct.getAllDevelopers().size() >= 1) && (programAct.getAllCodes().size() >= 1) && (programAct.getAllCodingStandards().size() >= 1) && (programAct.getAllAssociatedDesigns().size() >= 1) && (programAct.getAllAssociatedUnitTestss().size() >= 1) && (programAct.getAllProjs().size() >= 1) && (programAct.getAllAssociatedUserStoriess().size() >= 1) && (programAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> developers = programAct.getAllActiveDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee developer2 = developers.elementAt(j);
if(developer2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)developer2;
softwaredeveloper.setIdle(true);
}
}
Vector <Artifact> codes = programAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = programAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = programAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = programAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = programAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = programAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = programAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetProgrammingPairProgramRJTrig rule (PairProgramRobertJoyce Action):
private void setProgrammingPairProgramRJTrig(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramRobertJoyceAction>pairprogramrobertjoyceActs = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetProgrammingPairProgramRJTrig")))
{
for(int i=0; i<pairprogramrobertjoyceActs.size(); i++)
{
PairProgramRobertJoyceAction pairprogramrobertjoyceAct = pairprogramrobertjoyceActs.elementAt(i);
if(pairprogramrobertjoyceAct == action)
{
if((pairprogramrobertjoyceAct.getAllRoberts().size() >= 1) && (pairprogramrobertjoyceAct.getAllJoyces().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodes().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodingStandards().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramrobertjoyceAct.getAllProjs().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramrobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = pairprogramrobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
softwaredeveloper.setProgramming(true);
}
}
Vector <Employee> joyces = pairprogramrobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
softwaredeveloper.setProgramming(true);
}
}
Vector <Artifact> codes = pairprogramrobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramrobertjoyceAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramrobertjoyceAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramrobertjoyceAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramrobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramrobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramrobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetRJPairProgThisIteration rule (PairProgramRobertJoyce Action):
private void setRJPairProgThisIteration(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramRobertJoyceAction>pairprogramrobertjoyceActs = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetRJPairProgThisIteration")))
{
for(int i=0; i<pairprogramrobertjoyceActs.size(); i++)
{
PairProgramRobertJoyceAction pairprogramrobertjoyceAct = pairprogramrobertjoyceActs.elementAt(i);
if(pairprogramrobertjoyceAct == action)
{
if((pairprogramrobertjoyceAct.getAllRoberts().size() >= 1) && (pairprogramrobertjoyceAct.getAllJoyces().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodes().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodingStandards().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramrobertjoyceAct.getAllProjs().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramrobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = pairprogramrobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
}
}
Vector <Employee> joyces = pairprogramrobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
}
}
Vector <Artifact> codes = pairprogramrobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramrobertjoyceAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramrobertjoyceAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramrobertjoyceAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramrobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setRobertAndJoycePairProgThisIteration(true);
}
}
Vector <Artifact> associateduserstoriess = pairprogramrobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramrobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsPairProgRJTrig rule (PairProgramRobertJoyce Action):
private void updateNumActsPairProgRJTrig(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramRobertJoyceAction>pairprogramrobertjoyceActs = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsPairProgRJTrig")))
{
for(int i=0; i<pairprogramrobertjoyceActs.size(); i++)
{
PairProgramRobertJoyceAction pairprogramrobertjoyceAct = pairprogramrobertjoyceActs.elementAt(i);
if(pairprogramrobertjoyceAct == action)
{
if((pairprogramrobertjoyceAct.getAllRoberts().size() >= 1) && (pairprogramrobertjoyceAct.getAllJoyces().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodes().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodingStandards().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramrobertjoyceAct.getAllProjs().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramrobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = pairprogramrobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
}
}
Vector <Employee> joyces = pairprogramrobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
}
}
Vector <Artifact> codes = pairprogramrobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramrobertjoyceAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramrobertjoyceAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramrobertjoyceAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramrobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateduserstoriess = pairprogramrobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramrobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdlePairProgRJT rule (PairProgramRobertJoyce Action):
private void setNotIdlePairProgRJT(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramRobertJoyceAction>pairprogramrobertjoyceActs = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdlePairProgRJT")))
{
for(int i=0; i<pairprogramrobertjoyceActs.size(); i++)
{
PairProgramRobertJoyceAction pairprogramrobertjoyceAct = pairprogramrobertjoyceActs.elementAt(i);
if(pairprogramrobertjoyceAct == action)
{
if((pairprogramrobertjoyceAct.getAllRoberts().size() >= 1) && (pairprogramrobertjoyceAct.getAllJoyces().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodes().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodingStandards().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramrobertjoyceAct.getAllProjs().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramrobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = pairprogramrobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> joyces = pairprogramrobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = pairprogramrobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramrobertjoyceAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramrobertjoyceAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramrobertjoyceAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramrobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramrobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramrobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdlePairProgRJC rule (PairProgramRobertJoyce Action):
private void setNotIdlePairProgRJC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramRobertJoyceAction>pairprogramrobertjoyceActs = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogramrobertjoyceActs.size(); i++)
{
PairProgramRobertJoyceAction pairprogramrobertjoyceAct = pairprogramrobertjoyceActs.elementAt(i);
if((pairprogramrobertjoyceAct.getAllRoberts().size() >= 1) && (pairprogramrobertjoyceAct.getAllJoyces().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodes().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodingStandards().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramrobertjoyceAct.getAllProjs().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramrobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = pairprogramrobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> joyces = pairprogramrobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = pairprogramrobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramrobertjoyceAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramrobertjoyceAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramrobertjoyceAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramrobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramrobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramrobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetNotProgrammingPairProgramRJDest rule (PairProgramRobertJoyce Action):
private void setNotProgrammingPairProgramRJDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramRobertJoyceAction>pairprogramrobertjoyceActs = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotProgrammingPairProgramRJDest")))
{
for(int i=0; i<pairprogramrobertjoyceActs.size(); i++)
{
PairProgramRobertJoyceAction pairprogramrobertjoyceAct = pairprogramrobertjoyceActs.elementAt(i);
if(pairprogramrobertjoyceAct == action)
{
if((pairprogramrobertjoyceAct.getAllRoberts().size() >= 1) && (pairprogramrobertjoyceAct.getAllJoyces().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodes().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodingStandards().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramrobertjoyceAct.getAllProjs().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramrobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = pairprogramrobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
softwaredeveloper.setProgramming(false);
}
}
Vector <Employee> joyces = pairprogramrobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
softwaredeveloper.setProgramming(false);
}
}
Vector <Artifact> codes = pairprogramrobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramrobertjoyceAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramrobertjoyceAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramrobertjoyceAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramrobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramrobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramrobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsPairProgRJDest rule (PairProgramRobertJoyce Action):
private void updateNumActsPairProgRJDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramRobertJoyceAction>pairprogramrobertjoyceActs = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsPairProgRJDest")))
{
for(int i=0; i<pairprogramrobertjoyceActs.size(); i++)
{
PairProgramRobertJoyceAction pairprogramrobertjoyceAct = pairprogramrobertjoyceActs.elementAt(i);
if(pairprogramrobertjoyceAct == action)
{
if((pairprogramrobertjoyceAct.getAllRoberts().size() >= 1) && (pairprogramrobertjoyceAct.getAllJoyces().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodes().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodingStandards().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramrobertjoyceAct.getAllProjs().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramrobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = pairprogramrobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
}
}
Vector <Employee> joyces = pairprogramrobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
}
}
Vector <Artifact> codes = pairprogramrobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramrobertjoyceAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramrobertjoyceAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramrobertjoyceAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramrobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateduserstoriess = pairprogramrobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramrobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIdlePairProgRJ rule (PairProgramRobertJoyce Action):
private void setIdlePairProgRJ(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramRobertJoyceAction>pairprogramrobertjoyceActs = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdlePairProgRJ")))
{
for(int i=0; i<pairprogramrobertjoyceActs.size(); i++)
{
PairProgramRobertJoyceAction pairprogramrobertjoyceAct = pairprogramrobertjoyceActs.elementAt(i);
if(pairprogramrobertjoyceAct == action)
{
if((pairprogramrobertjoyceAct.getAllRoberts().size() >= 1) && (pairprogramrobertjoyceAct.getAllJoyces().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodes().size() >= 1) && (pairprogramrobertjoyceAct.getAllCodingStandards().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramrobertjoyceAct.getAllProjs().size() >= 1) && (pairprogramrobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramrobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = pairprogramrobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
softwaredeveloper.setIdle(true);
}
}
Vector <Employee> joyces = pairprogramrobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
softwaredeveloper.setIdle(true);
}
}
Vector <Artifact> codes = pairprogramrobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramrobertjoyceAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramrobertjoyceAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramrobertjoyceAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramrobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramrobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramrobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetProgrammingPairProgramTRTrig rule (PairProgramTimothyReda Action):
private void setProgrammingPairProgramTRTrig(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramTimothyRedaAction>pairprogramtimothyredaActs = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetProgrammingPairProgramTRTrig")))
{
for(int i=0; i<pairprogramtimothyredaActs.size(); i++)
{
PairProgramTimothyRedaAction pairprogramtimothyredaAct = pairprogramtimothyredaActs.elementAt(i);
if(pairprogramtimothyredaAct == action)
{
if((pairprogramtimothyredaAct.getAllTimothys().size() >= 1) && (pairprogramtimothyredaAct.getAllRedas().size() >= 1) && (pairprogramtimothyredaAct.getAllCodes().size() >= 1) && (pairprogramtimothyredaAct.getAllCodingStandards().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramtimothyredaAct.getAllProjs().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramtimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = pairprogramtimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
softwaredeveloper.setProgramming(true);
}
}
Vector <Employee> redas = pairprogramtimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
softwaredeveloper.setProgramming(true);
}
}
Vector <Artifact> codes = pairprogramtimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramtimothyredaAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramtimothyredaAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramtimothyredaAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramtimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramtimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramtimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetTRPairProgThisIteration rule (PairProgramTimothyReda Action):
private void setTRPairProgThisIteration(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramTimothyRedaAction>pairprogramtimothyredaActs = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetTRPairProgThisIteration")))
{
for(int i=0; i<pairprogramtimothyredaActs.size(); i++)
{
PairProgramTimothyRedaAction pairprogramtimothyredaAct = pairprogramtimothyredaActs.elementAt(i);
if(pairprogramtimothyredaAct == action)
{
if((pairprogramtimothyredaAct.getAllTimothys().size() >= 1) && (pairprogramtimothyredaAct.getAllRedas().size() >= 1) && (pairprogramtimothyredaAct.getAllCodes().size() >= 1) && (pairprogramtimothyredaAct.getAllCodingStandards().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramtimothyredaAct.getAllProjs().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramtimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = pairprogramtimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
}
}
Vector <Employee> redas = pairprogramtimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
}
}
Vector <Artifact> codes = pairprogramtimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramtimothyredaAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramtimothyredaAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramtimothyredaAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramtimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setTimothyAndRedaPairProgThisIteration(true);
}
}
Vector <Artifact> associateduserstoriess = pairprogramtimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramtimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsPairProgTRTrig rule (PairProgramTimothyReda Action):
private void updateNumActsPairProgTRTrig(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramTimothyRedaAction>pairprogramtimothyredaActs = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsPairProgTRTrig")))
{
for(int i=0; i<pairprogramtimothyredaActs.size(); i++)
{
PairProgramTimothyRedaAction pairprogramtimothyredaAct = pairprogramtimothyredaActs.elementAt(i);
if(pairprogramtimothyredaAct == action)
{
if((pairprogramtimothyredaAct.getAllTimothys().size() >= 1) && (pairprogramtimothyredaAct.getAllRedas().size() >= 1) && (pairprogramtimothyredaAct.getAllCodes().size() >= 1) && (pairprogramtimothyredaAct.getAllCodingStandards().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramtimothyredaAct.getAllProjs().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramtimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = pairprogramtimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
}
}
Vector <Employee> redas = pairprogramtimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
}
}
Vector <Artifact> codes = pairprogramtimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramtimothyredaAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramtimothyredaAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramtimothyredaAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramtimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateduserstoriess = pairprogramtimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramtimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdlePairProgTRT rule (PairProgramTimothyReda Action):
private void setNotIdlePairProgTRT(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramTimothyRedaAction>pairprogramtimothyredaActs = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdlePairProgTRT")))
{
for(int i=0; i<pairprogramtimothyredaActs.size(); i++)
{
PairProgramTimothyRedaAction pairprogramtimothyredaAct = pairprogramtimothyredaActs.elementAt(i);
if(pairprogramtimothyredaAct == action)
{
if((pairprogramtimothyredaAct.getAllTimothys().size() >= 1) && (pairprogramtimothyredaAct.getAllRedas().size() >= 1) && (pairprogramtimothyredaAct.getAllCodes().size() >= 1) && (pairprogramtimothyredaAct.getAllCodingStandards().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramtimothyredaAct.getAllProjs().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramtimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = pairprogramtimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> redas = pairprogramtimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = pairprogramtimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramtimothyredaAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramtimothyredaAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramtimothyredaAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramtimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramtimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramtimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdlePairProgTRC rule (PairProgramTimothyReda Action):
private void setNotIdlePairProgTRC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramTimothyRedaAction>pairprogramtimothyredaActs = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogramtimothyredaActs.size(); i++)
{
PairProgramTimothyRedaAction pairprogramtimothyredaAct = pairprogramtimothyredaActs.elementAt(i);
if((pairprogramtimothyredaAct.getAllTimothys().size() >= 1) && (pairprogramtimothyredaAct.getAllRedas().size() >= 1) && (pairprogramtimothyredaAct.getAllCodes().size() >= 1) && (pairprogramtimothyredaAct.getAllCodingStandards().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramtimothyredaAct.getAllProjs().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramtimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = pairprogramtimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> redas = pairprogramtimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = pairprogramtimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramtimothyredaAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramtimothyredaAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramtimothyredaAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramtimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramtimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramtimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetNotProgrammingPairProgramTRDest rule (PairProgramTimothyReda Action):
private void setNotProgrammingPairProgramTRDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramTimothyRedaAction>pairprogramtimothyredaActs = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotProgrammingPairProgramTRDest")))
{
for(int i=0; i<pairprogramtimothyredaActs.size(); i++)
{
PairProgramTimothyRedaAction pairprogramtimothyredaAct = pairprogramtimothyredaActs.elementAt(i);
if(pairprogramtimothyredaAct == action)
{
if((pairprogramtimothyredaAct.getAllTimothys().size() >= 1) && (pairprogramtimothyredaAct.getAllRedas().size() >= 1) && (pairprogramtimothyredaAct.getAllCodes().size() >= 1) && (pairprogramtimothyredaAct.getAllCodingStandards().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramtimothyredaAct.getAllProjs().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramtimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = pairprogramtimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
softwaredeveloper.setProgramming(false);
}
}
Vector <Employee> redas = pairprogramtimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
softwaredeveloper.setProgramming(false);
}
}
Vector <Artifact> codes = pairprogramtimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramtimothyredaAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramtimothyredaAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramtimothyredaAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramtimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramtimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramtimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsPairProgTRDest rule (PairProgramTimothyReda Action):
private void updateNumActsPairProgTRDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramTimothyRedaAction>pairprogramtimothyredaActs = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsPairProgTRDest")))
{
for(int i=0; i<pairprogramtimothyredaActs.size(); i++)
{
PairProgramTimothyRedaAction pairprogramtimothyredaAct = pairprogramtimothyredaActs.elementAt(i);
if(pairprogramtimothyredaAct == action)
{
if((pairprogramtimothyredaAct.getAllTimothys().size() >= 1) && (pairprogramtimothyredaAct.getAllRedas().size() >= 1) && (pairprogramtimothyredaAct.getAllCodes().size() >= 1) && (pairprogramtimothyredaAct.getAllCodingStandards().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramtimothyredaAct.getAllProjs().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramtimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = pairprogramtimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
}
}
Vector <Employee> redas = pairprogramtimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
}
}
Vector <Artifact> codes = pairprogramtimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramtimothyredaAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramtimothyredaAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramtimothyredaAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramtimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateduserstoriess = pairprogramtimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramtimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIdlePairProgTR rule (PairProgramTimothyReda Action):
private void setIdlePairProgTR(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramTimothyRedaAction>pairprogramtimothyredaActs = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdlePairProgTR")))
{
for(int i=0; i<pairprogramtimothyredaActs.size(); i++)
{
PairProgramTimothyRedaAction pairprogramtimothyredaAct = pairprogramtimothyredaActs.elementAt(i);
if(pairprogramtimothyredaAct == action)
{
if((pairprogramtimothyredaAct.getAllTimothys().size() >= 1) && (pairprogramtimothyredaAct.getAllRedas().size() >= 1) && (pairprogramtimothyredaAct.getAllCodes().size() >= 1) && (pairprogramtimothyredaAct.getAllCodingStandards().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedDesigns().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogramtimothyredaAct.getAllProjs().size() >= 1) && (pairprogramtimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogramtimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = pairprogramtimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
softwaredeveloper.setIdle(true);
}
}
Vector <Employee> redas = pairprogramtimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
softwaredeveloper.setIdle(true);
}
}
Vector <Artifact> codes = pairprogramtimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogramtimothyredaAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogramtimothyredaAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogramtimothyredaAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogramtimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogramtimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogramtimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetProgrammingPairProgramPSTrig rule (PairProgramPegSigfreido Action):
private void setProgrammingPairProgramPSTrig(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramPegSigfreidoAction>pairprogrampegsigfreidoActs = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetProgrammingPairProgramPSTrig")))
{
for(int i=0; i<pairprogrampegsigfreidoActs.size(); i++)
{
PairProgramPegSigfreidoAction pairprogrampegsigfreidoAct = pairprogrampegsigfreidoActs.elementAt(i);
if(pairprogrampegsigfreidoAct == action)
{
if((pairprogrampegsigfreidoAct.getAllPegs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllSigfreidos().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodes().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodingStandards().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedDesigns().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogrampegsigfreidoAct.getAllProjs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogrampegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = pairprogrampegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
softwaredeveloper.setProgramming(true);
}
}
Vector <Employee> sigfreidos = pairprogrampegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
softwaredeveloper.setProgramming(true);
}
}
Vector <Artifact> codes = pairprogrampegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogrampegsigfreidoAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogrampegsigfreidoAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogrampegsigfreidoAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogrampegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogrampegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogrampegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetPSPairProgThisIteration rule (PairProgramPegSigfreido Action):
private void setPSPairProgThisIteration(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramPegSigfreidoAction>pairprogrampegsigfreidoActs = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetPSPairProgThisIteration")))
{
for(int i=0; i<pairprogrampegsigfreidoActs.size(); i++)
{
PairProgramPegSigfreidoAction pairprogrampegsigfreidoAct = pairprogrampegsigfreidoActs.elementAt(i);
if(pairprogrampegsigfreidoAct == action)
{
if((pairprogrampegsigfreidoAct.getAllPegs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllSigfreidos().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodes().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodingStandards().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedDesigns().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogrampegsigfreidoAct.getAllProjs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogrampegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = pairprogrampegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
}
}
Vector <Employee> sigfreidos = pairprogrampegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
}
}
Vector <Artifact> codes = pairprogrampegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogrampegsigfreidoAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogrampegsigfreidoAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogrampegsigfreidoAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogrampegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setPegAndSigfreidoPairProgThisIteration(true);
}
}
Vector <Artifact> associateduserstoriess = pairprogrampegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogrampegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsPairProgPSTrig rule (PairProgramPegSigfreido Action):
private void updateNumActsPairProgPSTrig(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramPegSigfreidoAction>pairprogrampegsigfreidoActs = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsPairProgPSTrig")))
{
for(int i=0; i<pairprogrampegsigfreidoActs.size(); i++)
{
PairProgramPegSigfreidoAction pairprogrampegsigfreidoAct = pairprogrampegsigfreidoActs.elementAt(i);
if(pairprogrampegsigfreidoAct == action)
{
if((pairprogrampegsigfreidoAct.getAllPegs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllSigfreidos().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodes().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodingStandards().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedDesigns().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogrampegsigfreidoAct.getAllProjs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogrampegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = pairprogrampegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
}
}
Vector <Employee> sigfreidos = pairprogrampegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
}
}
Vector <Artifact> codes = pairprogrampegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogrampegsigfreidoAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogrampegsigfreidoAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogrampegsigfreidoAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogrampegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateduserstoriess = pairprogrampegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogrampegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdlePairProgPST rule (PairProgramPegSigfreido Action):
private void setNotIdlePairProgPST(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramPegSigfreidoAction>pairprogrampegsigfreidoActs = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdlePairProgPST")))
{
for(int i=0; i<pairprogrampegsigfreidoActs.size(); i++)
{
PairProgramPegSigfreidoAction pairprogrampegsigfreidoAct = pairprogrampegsigfreidoActs.elementAt(i);
if(pairprogrampegsigfreidoAct == action)
{
if((pairprogrampegsigfreidoAct.getAllPegs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllSigfreidos().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodes().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodingStandards().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedDesigns().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogrampegsigfreidoAct.getAllProjs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogrampegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = pairprogrampegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> sigfreidos = pairprogrampegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = pairprogrampegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogrampegsigfreidoAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogrampegsigfreidoAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogrampegsigfreidoAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogrampegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogrampegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogrampegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// IncNumUSImplPairProgramPS rule (PairProgramPegSigfreido Action):
private void incNumUSImplPairProgramPS(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramPegSigfreidoAction>pairprogrampegsigfreidoActs = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogrampegsigfreidoActs.size(); i++)
{
PairProgramPegSigfreidoAction pairprogrampegsigfreidoAct = pairprogrampegsigfreidoActs.elementAt(i);
if((pairprogrampegsigfreidoAct.getAllPegs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllSigfreidos().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodes().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodingStandards().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedDesigns().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogrampegsigfreidoAct.getAllProjs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogrampegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = pairprogrampegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
}
}
Vector <Employee> sigfreidos = pairprogrampegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
}
}
Vector <Artifact> codes = pairprogrampegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogrampegsigfreidoAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogrampegsigfreidoAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogrampegsigfreidoAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogrampegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogrampegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
double allActivePegSoftwareDeveloperProductivity = 0;
Vector allActivePegs = pairprogrampegsigfreidoAct.getAllActivePegs();
for(int k=0; k<allActivePegs.size(); k++)
{
Object peg3 = allActivePegs.elementAt(k);
if(peg3 instanceof SoftwareDeveloper)
{
allActivePegSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)peg3).getProductivity());
}
}
double allActiveSigfreidoSoftwareDeveloperProductivity = 0;
Vector allActiveSigfreidos = pairprogrampegsigfreidoAct.getAllActiveSigfreidos();
for(int k=0; k<allActiveSigfreidos.size(); k++)
{
Object sigfreido3 = allActiveSigfreidos.elementAt(k);
if(sigfreido3 instanceof SoftwareDeveloper)
{
allActiveSigfreidoSoftwareDeveloperProductivity += (double)(((SoftwareDeveloper)sigfreido3).getProductivity());
}
}
double allActiveAssociatedUnitTestsUnitTestsCompleteness = 0;
Vector allActiveAssociatedUnitTestss = pairprogrampegsigfreidoAct.getAllActiveAssociatedUnitTestss();
for(int k=0; k<allActiveAssociatedUnitTestss.size(); k++)
{
Object associatedunittests3 = allActiveAssociatedUnitTestss.elementAt(k);
if(associatedunittests3 instanceof UnitTests)
{
allActiveAssociatedUnitTestsUnitTestsCompleteness += (double)(((UnitTests)associatedunittests3).getCompleteness());
}
}
double allActiveAssociatedDesignDesignNumCRCCardsCompleted = 0;
Vector allActiveAssociatedDesigns = pairprogrampegsigfreidoAct.getAllActiveAssociatedDesigns();
for(int k=0; k<allActiveAssociatedDesigns.size(); k++)
{
Object associateddesign3 = allActiveAssociatedDesigns.elementAt(k);
if(associateddesign3 instanceof Design)
{
allActiveAssociatedDesignDesignNumCRCCardsCompleted += (double)(((Design)associateddesign3).getNumCRCCardsCompleted());
}
}
userstories.setNumUserStoriesImplemented((double)(((double)(userstories.getNumUserStoriesImplemented())) + ( ( ( allActivePegSoftwareDeveloperProductivity + allActiveSigfreidoSoftwareDeveloperProductivity ) * .0125 ) * ( 1 + ( allActiveAssociatedUnitTestsUnitTestsCompleteness / 100 * .5 ) + ( allActiveAssociatedDesignDesignNumCRCCardsCompleted / 100 * .5 ) ) * .91 * .1987 )));
}
}
Vector <Artifact> releaseplans = pairprogrampegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetNotIdlePairProgPSC rule (PairProgramPegSigfreido Action):
private void setNotIdlePairProgPSC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramPegSigfreidoAction>pairprogrampegsigfreidoActs = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<pairprogrampegsigfreidoActs.size(); i++)
{
PairProgramPegSigfreidoAction pairprogrampegsigfreidoAct = pairprogrampegsigfreidoActs.elementAt(i);
if((pairprogrampegsigfreidoAct.getAllPegs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllSigfreidos().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodes().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodingStandards().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedDesigns().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogrampegsigfreidoAct.getAllProjs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogrampegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = pairprogrampegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> sigfreidos = pairprogrampegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = pairprogrampegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogrampegsigfreidoAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogrampegsigfreidoAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogrampegsigfreidoAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogrampegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogrampegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogrampegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetNotProgrammingPairProgramPSDest rule (PairProgramPegSigfreido Action):
private void setNotProgrammingPairProgramPSDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramPegSigfreidoAction>pairprogrampegsigfreidoActs = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotProgrammingPairProgramPSDest")))
{
for(int i=0; i<pairprogrampegsigfreidoActs.size(); i++)
{
PairProgramPegSigfreidoAction pairprogrampegsigfreidoAct = pairprogrampegsigfreidoActs.elementAt(i);
if(pairprogrampegsigfreidoAct == action)
{
if((pairprogrampegsigfreidoAct.getAllPegs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllSigfreidos().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodes().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodingStandards().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedDesigns().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogrampegsigfreidoAct.getAllProjs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogrampegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = pairprogrampegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
softwaredeveloper.setProgramming(false);
}
}
Vector <Employee> sigfreidos = pairprogrampegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
softwaredeveloper.setProgramming(false);
}
}
Vector <Artifact> codes = pairprogrampegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogrampegsigfreidoAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogrampegsigfreidoAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogrampegsigfreidoAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogrampegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogrampegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogrampegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsPairProgPSDest rule (PairProgramPegSigfreido Action):
private void updateNumActsPairProgPSDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramPegSigfreidoAction>pairprogrampegsigfreidoActs = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsPairProgPSDest")))
{
for(int i=0; i<pairprogrampegsigfreidoActs.size(); i++)
{
PairProgramPegSigfreidoAction pairprogrampegsigfreidoAct = pairprogrampegsigfreidoActs.elementAt(i);
if(pairprogrampegsigfreidoAct == action)
{
if((pairprogrampegsigfreidoAct.getAllPegs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllSigfreidos().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodes().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodingStandards().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedDesigns().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogrampegsigfreidoAct.getAllProjs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogrampegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = pairprogrampegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
}
}
Vector <Employee> sigfreidos = pairprogrampegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
}
}
Vector <Artifact> codes = pairprogrampegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogrampegsigfreidoAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogrampegsigfreidoAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogrampegsigfreidoAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogrampegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateduserstoriess = pairprogrampegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogrampegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIdlePairProgPS rule (PairProgramPegSigfreido Action):
private void setIdlePairProgPS(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<PairProgramPegSigfreidoAction>pairprogrampegsigfreidoActs = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdlePairProgPS")))
{
for(int i=0; i<pairprogrampegsigfreidoActs.size(); i++)
{
PairProgramPegSigfreidoAction pairprogrampegsigfreidoAct = pairprogrampegsigfreidoActs.elementAt(i);
if(pairprogrampegsigfreidoAct == action)
{
if((pairprogrampegsigfreidoAct.getAllPegs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllSigfreidos().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodes().size() >= 1) && (pairprogrampegsigfreidoAct.getAllCodingStandards().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedDesigns().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUnitTestss().size() >= 1) && (pairprogrampegsigfreidoAct.getAllProjs().size() >= 1) && (pairprogrampegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (pairprogrampegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = pairprogrampegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
softwaredeveloper.setIdle(true);
}
}
Vector <Employee> sigfreidos = pairprogrampegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
softwaredeveloper.setIdle(true);
}
}
Vector <Artifact> codes = pairprogrampegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Tool> codingstandards = pairprogrampegsigfreidoAct.getAllActiveCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool codingstandard2 = codingstandards.elementAt(j);
if(codingstandard2 instanceof CodingStandard)
{
CodingStandard codingstandard = (CodingStandard)codingstandard2;
}
}
Vector <Artifact> associateddesigns = pairprogrampegsigfreidoAct.getAllActiveAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact associateddesign2 = associateddesigns.elementAt(j);
if(associateddesign2 instanceof Design)
{
Design design = (Design)associateddesign2;
}
}
Vector <Artifact> associatedunittestss = pairprogrampegsigfreidoAct.getAllActiveAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact associatedunittests2 = associatedunittestss.elementAt(j);
if(associatedunittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)associatedunittests2;
}
}
Vector <Project> projs = pairprogrampegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = pairprogrampegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = pairprogrampegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// ResetNumAcceptanceTestsRun rule (UnitTestingAndFixing Action):
private void resetNumAcceptanceTestsRun(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<UnitTestingAndFixingAction>unittestingandfixingActs = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("ResetNumAcceptanceTestsRun")))
{
for(int i=0; i<unittestingandfixingActs.size(); i++)
{
UnitTestingAndFixingAction unittestingandfixingAct = unittestingandfixingActs.elementAt(i);
if(unittestingandfixingAct == action)
{
if((unittestingandfixingAct.getAllEmps().size() >= 1) && (unittestingandfixingAct.getAllCodes().size() >= 1) && (unittestingandfixingAct.getAllUnitTestss().size() >= 1) && (unittestingandfixingAct.getAllTestingTools().size() >= 0) && (unittestingandfixingAct.getAllProjs().size() >= 1) && (unittestingandfixingAct.getAllAcceptanceTestss().size() >= 1) && (unittestingandfixingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = unittestingandfixingAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Artifact> codes = unittestingandfixingAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Artifact> unittestss = unittestingandfixingAct.getAllActiveUnitTestss();
for(int j=0; j<unittestss.size(); j++)
{
Artifact unittests2 = unittestss.elementAt(j);
if(unittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)unittests2;
}
}
Vector <Tool> testingtools = unittestingandfixingAct.getAllActiveTestingTools();
for(int j=0; j<testingtools.size(); j++)
{
Tool testingtool2 = testingtools.elementAt(j);
if(testingtool2 instanceof UnitTestingFramework)
{
UnitTestingFramework unittestingframework = (UnitTestingFramework)testingtool2;
}
}
Vector <Project> projs = unittestingandfixingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> acceptancetestss = unittestingandfixingAct.getAllActiveAcceptanceTestss();
for(int j=0; j<acceptancetestss.size(); j++)
{
Artifact acceptancetests2 = acceptancetestss.elementAt(j);
if(acceptancetests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetests2;
acceptancetests.setTestsRun((double)(0));
acceptancetests.setTestsFailed((double)(0));
}
}
Vector <Artifact> releaseplans = unittestingandfixingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsUTTrig rule (UnitTestingAndFixing Action):
private void updateNumActsUTTrig(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<UnitTestingAndFixingAction>unittestingandfixingActs = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsUTTrig")))
{
for(int i=0; i<unittestingandfixingActs.size(); i++)
{
UnitTestingAndFixingAction unittestingandfixingAct = unittestingandfixingActs.elementAt(i);
if(unittestingandfixingAct == action)
{
if((unittestingandfixingAct.getAllEmps().size() >= 1) && (unittestingandfixingAct.getAllCodes().size() >= 1) && (unittestingandfixingAct.getAllUnitTestss().size() >= 1) && (unittestingandfixingAct.getAllTestingTools().size() >= 0) && (unittestingandfixingAct.getAllProjs().size() >= 1) && (unittestingandfixingAct.getAllAcceptanceTestss().size() >= 1) && (unittestingandfixingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = unittestingandfixingAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Artifact> codes = unittestingandfixingAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Artifact> unittestss = unittestingandfixingAct.getAllActiveUnitTestss();
for(int j=0; j<unittestss.size(); j++)
{
Artifact unittests2 = unittestss.elementAt(j);
if(unittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)unittests2;
}
}
Vector <Tool> testingtools = unittestingandfixingAct.getAllActiveTestingTools();
for(int j=0; j<testingtools.size(); j++)
{
Tool testingtool2 = testingtools.elementAt(j);
if(testingtool2 instanceof UnitTestingFramework)
{
UnitTestingFramework unittestingframework = (UnitTestingFramework)testingtool2;
}
}
Vector <Project> projs = unittestingandfixingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> acceptancetestss = unittestingandfixingAct.getAllActiveAcceptanceTestss();
for(int j=0; j<acceptancetestss.size(); j++)
{
Artifact acceptancetests2 = acceptancetestss.elementAt(j);
if(acceptancetests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetests2;
}
}
Vector <Artifact> releaseplans = unittestingandfixingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleUTFixT rule (UnitTestingAndFixing Action):
private void setNotIdleUTFixT(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<UnitTestingAndFixingAction>unittestingandfixingActs = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdleUTFixT")))
{
for(int i=0; i<unittestingandfixingActs.size(); i++)
{
UnitTestingAndFixingAction unittestingandfixingAct = unittestingandfixingActs.elementAt(i);
if(unittestingandfixingAct == action)
{
if((unittestingandfixingAct.getAllEmps().size() >= 1) && (unittestingandfixingAct.getAllCodes().size() >= 1) && (unittestingandfixingAct.getAllUnitTestss().size() >= 1) && (unittestingandfixingAct.getAllTestingTools().size() >= 0) && (unittestingandfixingAct.getAllProjs().size() >= 1) && (unittestingandfixingAct.getAllAcceptanceTestss().size() >= 1) && (unittestingandfixingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = unittestingandfixingAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = unittestingandfixingAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Artifact> unittestss = unittestingandfixingAct.getAllActiveUnitTestss();
for(int j=0; j<unittestss.size(); j++)
{
Artifact unittests2 = unittestss.elementAt(j);
if(unittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)unittests2;
}
}
Vector <Tool> testingtools = unittestingandfixingAct.getAllActiveTestingTools();
for(int j=0; j<testingtools.size(); j++)
{
Tool testingtool2 = testingtools.elementAt(j);
if(testingtool2 instanceof UnitTestingFramework)
{
UnitTestingFramework unittestingframework = (UnitTestingFramework)testingtool2;
}
}
Vector <Project> projs = unittestingandfixingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> acceptancetestss = unittestingandfixingAct.getAllActiveAcceptanceTestss();
for(int j=0; j<acceptancetestss.size(); j++)
{
Artifact acceptancetests2 = acceptancetestss.elementAt(j);
if(acceptancetests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetests2;
}
}
Vector <Artifact> releaseplans = unittestingandfixingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleUTFixC rule (UnitTestingAndFixing Action):
private void setNotIdleUTFixC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<UnitTestingAndFixingAction>unittestingandfixingActs = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<unittestingandfixingActs.size(); i++)
{
UnitTestingAndFixingAction unittestingandfixingAct = unittestingandfixingActs.elementAt(i);
if((unittestingandfixingAct.getAllEmps().size() >= 1) && (unittestingandfixingAct.getAllCodes().size() >= 1) && (unittestingandfixingAct.getAllUnitTestss().size() >= 1) && (unittestingandfixingAct.getAllTestingTools().size() >= 0) && (unittestingandfixingAct.getAllProjs().size() >= 1) && (unittestingandfixingAct.getAllAcceptanceTestss().size() >= 1) && (unittestingandfixingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = unittestingandfixingAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = unittestingandfixingAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Artifact> unittestss = unittestingandfixingAct.getAllActiveUnitTestss();
for(int j=0; j<unittestss.size(); j++)
{
Artifact unittests2 = unittestss.elementAt(j);
if(unittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)unittests2;
}
}
Vector <Tool> testingtools = unittestingandfixingAct.getAllActiveTestingTools();
for(int j=0; j<testingtools.size(); j++)
{
Tool testingtool2 = testingtools.elementAt(j);
if(testingtool2 instanceof UnitTestingFramework)
{
UnitTestingFramework unittestingframework = (UnitTestingFramework)testingtool2;
}
}
Vector <Project> projs = unittestingandfixingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> acceptancetestss = unittestingandfixingAct.getAllActiveAcceptanceTestss();
for(int j=0; j<acceptancetestss.size(); j++)
{
Artifact acceptancetests2 = acceptancetestss.elementAt(j);
if(acceptancetests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetests2;
}
}
Vector <Artifact> releaseplans = unittestingandfixingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// UpdateNumActsUTDest rule (UnitTestingAndFixing Action):
private void updateNumActsUTDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<UnitTestingAndFixingAction>unittestingandfixingActs = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsUTDest")))
{
for(int i=0; i<unittestingandfixingActs.size(); i++)
{
UnitTestingAndFixingAction unittestingandfixingAct = unittestingandfixingActs.elementAt(i);
if(unittestingandfixingAct == action)
{
if((unittestingandfixingAct.getAllEmps().size() >= 1) && (unittestingandfixingAct.getAllCodes().size() >= 1) && (unittestingandfixingAct.getAllUnitTestss().size() >= 1) && (unittestingandfixingAct.getAllTestingTools().size() >= 0) && (unittestingandfixingAct.getAllProjs().size() >= 1) && (unittestingandfixingAct.getAllAcceptanceTestss().size() >= 1) && (unittestingandfixingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = unittestingandfixingAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Artifact> codes = unittestingandfixingAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Artifact> unittestss = unittestingandfixingAct.getAllActiveUnitTestss();
for(int j=0; j<unittestss.size(); j++)
{
Artifact unittests2 = unittestss.elementAt(j);
if(unittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)unittests2;
}
}
Vector <Tool> testingtools = unittestingandfixingAct.getAllActiveTestingTools();
for(int j=0; j<testingtools.size(); j++)
{
Tool testingtool2 = testingtools.elementAt(j);
if(testingtool2 instanceof UnitTestingFramework)
{
UnitTestingFramework unittestingframework = (UnitTestingFramework)testingtool2;
}
}
Vector <Project> projs = unittestingandfixingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> acceptancetestss = unittestingandfixingAct.getAllActiveAcceptanceTestss();
for(int j=0; j<acceptancetestss.size(); j++)
{
Artifact acceptancetests2 = acceptancetestss.elementAt(j);
if(acceptancetests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetests2;
}
}
Vector <Artifact> releaseplans = unittestingandfixingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIdleUTFix rule (UnitTestingAndFixing Action):
private void setIdleUTFix(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<UnitTestingAndFixingAction>unittestingandfixingActs = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdleUTFix")))
{
for(int i=0; i<unittestingandfixingActs.size(); i++)
{
UnitTestingAndFixingAction unittestingandfixingAct = unittestingandfixingActs.elementAt(i);
if(unittestingandfixingAct == action)
{
if((unittestingandfixingAct.getAllEmps().size() >= 1) && (unittestingandfixingAct.getAllCodes().size() >= 1) && (unittestingandfixingAct.getAllUnitTestss().size() >= 1) && (unittestingandfixingAct.getAllTestingTools().size() >= 0) && (unittestingandfixingAct.getAllProjs().size() >= 1) && (unittestingandfixingAct.getAllAcceptanceTestss().size() >= 1) && (unittestingandfixingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = unittestingandfixingAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
softwaredeveloper.setIdle(true);
}
}
Vector <Artifact> codes = unittestingandfixingAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Artifact> unittestss = unittestingandfixingAct.getAllActiveUnitTestss();
for(int j=0; j<unittestss.size(); j++)
{
Artifact unittests2 = unittestss.elementAt(j);
if(unittests2 instanceof UnitTests)
{
UnitTests unittests = (UnitTests)unittests2;
}
}
Vector <Tool> testingtools = unittestingandfixingAct.getAllActiveTestingTools();
for(int j=0; j<testingtools.size(); j++)
{
Tool testingtool2 = testingtools.elementAt(j);
if(testingtool2 instanceof UnitTestingFramework)
{
UnitTestingFramework unittestingframework = (UnitTestingFramework)testingtool2;
}
}
Vector <Project> projs = unittestingandfixingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> acceptancetestss = unittestingandfixingAct.getAllActiveAcceptanceTestss();
for(int j=0; j<acceptancetestss.size(); j++)
{
Artifact acceptancetests2 = acceptancetestss.elementAt(j);
if(acceptancetests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetests2;
}
}
Vector <Artifact> releaseplans = unittestingandfixingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsRefactor rule (Refactor Action):
private void updateNumActsRefactor(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<RefactorAction>refactorActs = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsRefactor")))
{
for(int i=0; i<refactorActs.size(); i++)
{
RefactorAction refactorAct = refactorActs.elementAt(i);
if(refactorAct == action)
{
if((refactorAct.getAllEmps().size() >= 1) && (refactorAct.getAllCodes().size() >= 1) && (refactorAct.getAllProjs().size() >= 1) && (refactorAct.getAllRefactoringTools().size() >= 0) && (refactorAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = refactorAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Artifact> codes = refactorAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = refactorAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Tool> refactoringtools = refactorAct.getAllActiveRefactoringTools();
for(int j=0; j<refactoringtools.size(); j++)
{
Tool refactoringtool2 = refactoringtools.elementAt(j);
if(refactoringtool2 instanceof RefactoringTool)
{
RefactoringTool refactoringtool = (RefactoringTool)refactoringtool2;
}
}
Vector <Artifact> releaseplans = refactorAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleRefactorT rule (Refactor Action):
private void setNotIdleRefactorT(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<RefactorAction>refactorActs = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdleRefactorT")))
{
for(int i=0; i<refactorActs.size(); i++)
{
RefactorAction refactorAct = refactorActs.elementAt(i);
if(refactorAct == action)
{
if((refactorAct.getAllEmps().size() >= 1) && (refactorAct.getAllCodes().size() >= 1) && (refactorAct.getAllProjs().size() >= 1) && (refactorAct.getAllRefactoringTools().size() >= 0) && (refactorAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = refactorAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = refactorAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = refactorAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Tool> refactoringtools = refactorAct.getAllActiveRefactoringTools();
for(int j=0; j<refactoringtools.size(); j++)
{
Tool refactoringtool2 = refactoringtools.elementAt(j);
if(refactoringtool2 instanceof RefactoringTool)
{
RefactoringTool refactoringtool = (RefactoringTool)refactoringtool2;
}
}
Vector <Artifact> releaseplans = refactorAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleRefactorC rule (Refactor Action):
private void setNotIdleRefactorC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<RefactorAction>refactorActs = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<refactorActs.size(); i++)
{
RefactorAction refactorAct = refactorActs.elementAt(i);
if((refactorAct.getAllEmps().size() >= 1) && (refactorAct.getAllCodes().size() >= 1) && (refactorAct.getAllProjs().size() >= 1) && (refactorAct.getAllRefactoringTools().size() >= 0) && (refactorAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = refactorAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = refactorAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = refactorAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Tool> refactoringtools = refactorAct.getAllActiveRefactoringTools();
for(int j=0; j<refactoringtools.size(); j++)
{
Tool refactoringtool2 = refactoringtools.elementAt(j);
if(refactoringtool2 instanceof RefactoringTool)
{
RefactoringTool refactoringtool = (RefactoringTool)refactoringtool2;
}
}
Vector <Artifact> releaseplans = refactorAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// UpdateNumActsRefactorDest rule (Refactor Action):
private void updateNumActsRefactorDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<RefactorAction>refactorActs = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsRefactorDest")))
{
for(int i=0; i<refactorActs.size(); i++)
{
RefactorAction refactorAct = refactorActs.elementAt(i);
if(refactorAct == action)
{
if((refactorAct.getAllEmps().size() >= 1) && (refactorAct.getAllCodes().size() >= 1) && (refactorAct.getAllProjs().size() >= 1) && (refactorAct.getAllRefactoringTools().size() >= 0) && (refactorAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = refactorAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Artifact> codes = refactorAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = refactorAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Tool> refactoringtools = refactorAct.getAllActiveRefactoringTools();
for(int j=0; j<refactoringtools.size(); j++)
{
Tool refactoringtool2 = refactoringtools.elementAt(j);
if(refactoringtool2 instanceof RefactoringTool)
{
RefactoringTool refactoringtool = (RefactoringTool)refactoringtool2;
}
}
Vector <Artifact> releaseplans = refactorAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIdleRefactor rule (Refactor Action):
private void setIdleRefactor(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<RefactorAction>refactorActs = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdleRefactor")))
{
for(int i=0; i<refactorActs.size(); i++)
{
RefactorAction refactorAct = refactorActs.elementAt(i);
if(refactorAct == action)
{
if((refactorAct.getAllEmps().size() >= 1) && (refactorAct.getAllCodes().size() >= 1) && (refactorAct.getAllProjs().size() >= 1) && (refactorAct.getAllRefactoringTools().size() >= 0) && (refactorAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = refactorAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
softwaredeveloper.setIdle(true);
}
}
Vector <Artifact> codes = refactorAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = refactorAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Tool> refactoringtools = refactorAct.getAllActiveRefactoringTools();
for(int j=0; j<refactoringtools.size(); j++)
{
Tool refactoringtool2 = refactoringtools.elementAt(j);
if(refactoringtool2 instanceof RefactoringTool)
{
RefactoringTool refactoringtool = (RefactoringTool)refactoringtool2;
}
}
Vector <Artifact> releaseplans = refactorAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIntegratingTrigRJ rule (IntegrateRobertJoyce Action):
private void setIntegratingTrigRJ(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateRobertJoyceAction>integraterobertjoyceActs = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIntegratingTrigRJ")))
{
for(int i=0; i<integraterobertjoyceActs.size(); i++)
{
IntegrateRobertJoyceAction integraterobertjoyceAct = integraterobertjoyceActs.elementAt(i);
if(integraterobertjoyceAct == action)
{
if((integraterobertjoyceAct.getAllRoberts().size() >= 1) && (integraterobertjoyceAct.getAllJoyces().size() >= 1) && (integraterobertjoyceAct.getAllCodes().size() >= 1) && (integraterobertjoyceAct.getAllProjs().size() >= 1) && (integraterobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (integraterobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = integraterobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
softwaredeveloper.setIntegrating(true);
}
}
Vector <Employee> joyces = integraterobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
softwaredeveloper.setIntegrating(true);
}
}
Vector <Artifact> codes = integraterobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integraterobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integraterobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integraterobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsIntegrateRJTrig rule (IntegrateRobertJoyce Action):
private void updateNumActsIntegrateRJTrig(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateRobertJoyceAction>integraterobertjoyceActs = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsIntegrateRJTrig")))
{
for(int i=0; i<integraterobertjoyceActs.size(); i++)
{
IntegrateRobertJoyceAction integraterobertjoyceAct = integraterobertjoyceActs.elementAt(i);
if(integraterobertjoyceAct == action)
{
if((integraterobertjoyceAct.getAllRoberts().size() >= 1) && (integraterobertjoyceAct.getAllJoyces().size() >= 1) && (integraterobertjoyceAct.getAllCodes().size() >= 1) && (integraterobertjoyceAct.getAllProjs().size() >= 1) && (integraterobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (integraterobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = integraterobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
}
}
Vector <Employee> joyces = integraterobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
}
}
Vector <Artifact> codes = integraterobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integraterobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateduserstoriess = integraterobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integraterobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleIntRJT rule (IntegrateRobertJoyce Action):
private void setNotIdleIntRJT(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateRobertJoyceAction>integraterobertjoyceActs = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdleIntRJT")))
{
for(int i=0; i<integraterobertjoyceActs.size(); i++)
{
IntegrateRobertJoyceAction integraterobertjoyceAct = integraterobertjoyceActs.elementAt(i);
if(integraterobertjoyceAct == action)
{
if((integraterobertjoyceAct.getAllRoberts().size() >= 1) && (integraterobertjoyceAct.getAllJoyces().size() >= 1) && (integraterobertjoyceAct.getAllCodes().size() >= 1) && (integraterobertjoyceAct.getAllProjs().size() >= 1) && (integraterobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (integraterobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = integraterobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> joyces = integraterobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = integraterobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integraterobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integraterobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integraterobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleIntRJC rule (IntegrateRobertJoyce Action):
private void setNotIdleIntRJC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateRobertJoyceAction>integraterobertjoyceActs = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<integraterobertjoyceActs.size(); i++)
{
IntegrateRobertJoyceAction integraterobertjoyceAct = integraterobertjoyceActs.elementAt(i);
if((integraterobertjoyceAct.getAllRoberts().size() >= 1) && (integraterobertjoyceAct.getAllJoyces().size() >= 1) && (integraterobertjoyceAct.getAllCodes().size() >= 1) && (integraterobertjoyceAct.getAllProjs().size() >= 1) && (integraterobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (integraterobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = integraterobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> joyces = integraterobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = integraterobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integraterobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integraterobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integraterobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetNotIntegratingRJ rule (IntegrateRobertJoyce Action):
private void setNotIntegratingRJ(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateRobertJoyceAction>integraterobertjoyceActs = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIntegratingRJ")))
{
for(int i=0; i<integraterobertjoyceActs.size(); i++)
{
IntegrateRobertJoyceAction integraterobertjoyceAct = integraterobertjoyceActs.elementAt(i);
if(integraterobertjoyceAct == action)
{
if((integraterobertjoyceAct.getAllRoberts().size() >= 1) && (integraterobertjoyceAct.getAllJoyces().size() >= 1) && (integraterobertjoyceAct.getAllCodes().size() >= 1) && (integraterobertjoyceAct.getAllProjs().size() >= 1) && (integraterobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (integraterobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = integraterobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
softwaredeveloper.setIntegrating(false);
}
}
Vector <Employee> joyces = integraterobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
softwaredeveloper.setIntegrating(false);
}
}
Vector <Artifact> codes = integraterobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integraterobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integraterobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integraterobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsIntegrateRJDest rule (IntegrateRobertJoyce Action):
private void updateNumActsIntegrateRJDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateRobertJoyceAction>integraterobertjoyceActs = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsIntegrateRJDest")))
{
for(int i=0; i<integraterobertjoyceActs.size(); i++)
{
IntegrateRobertJoyceAction integraterobertjoyceAct = integraterobertjoyceActs.elementAt(i);
if(integraterobertjoyceAct == action)
{
if((integraterobertjoyceAct.getAllRoberts().size() >= 1) && (integraterobertjoyceAct.getAllJoyces().size() >= 1) && (integraterobertjoyceAct.getAllCodes().size() >= 1) && (integraterobertjoyceAct.getAllProjs().size() >= 1) && (integraterobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (integraterobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = integraterobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
}
}
Vector <Employee> joyces = integraterobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
}
}
Vector <Artifact> codes = integraterobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integraterobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateduserstoriess = integraterobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integraterobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIdleIntRJ rule (IntegrateRobertJoyce Action):
private void setIdleIntRJ(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateRobertJoyceAction>integraterobertjoyceActs = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdleIntRJ")))
{
for(int i=0; i<integraterobertjoyceActs.size(); i++)
{
IntegrateRobertJoyceAction integraterobertjoyceAct = integraterobertjoyceActs.elementAt(i);
if(integraterobertjoyceAct == action)
{
if((integraterobertjoyceAct.getAllRoberts().size() >= 1) && (integraterobertjoyceAct.getAllJoyces().size() >= 1) && (integraterobertjoyceAct.getAllCodes().size() >= 1) && (integraterobertjoyceAct.getAllProjs().size() >= 1) && (integraterobertjoyceAct.getAllAssociatedUserStoriess().size() >= 1) && (integraterobertjoyceAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> roberts = integraterobertjoyceAct.getAllActiveRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee robert2 = roberts.elementAt(j);
if(robert2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)robert2;
softwaredeveloper.setIdle(true);
}
}
Vector <Employee> joyces = integraterobertjoyceAct.getAllActiveJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee joyce2 = joyces.elementAt(j);
if(joyce2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)joyce2;
softwaredeveloper.setIdle(true);
}
}
Vector <Artifact> codes = integraterobertjoyceAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integraterobertjoyceAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integraterobertjoyceAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integraterobertjoyceAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIntegratingTrigTR rule (IntegrateTimothyReda Action):
private void setIntegratingTrigTR(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateTimothyRedaAction>integratetimothyredaActs = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIntegratingTrigTR")))
{
for(int i=0; i<integratetimothyredaActs.size(); i++)
{
IntegrateTimothyRedaAction integratetimothyredaAct = integratetimothyredaActs.elementAt(i);
if(integratetimothyredaAct == action)
{
if((integratetimothyredaAct.getAllTimothys().size() >= 1) && (integratetimothyredaAct.getAllRedas().size() >= 1) && (integratetimothyredaAct.getAllCodes().size() >= 1) && (integratetimothyredaAct.getAllProjs().size() >= 1) && (integratetimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (integratetimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = integratetimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
softwaredeveloper.setIntegrating(true);
}
}
Vector <Employee> redas = integratetimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
softwaredeveloper.setIntegrating(true);
}
}
Vector <Artifact> codes = integratetimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integratetimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integratetimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratetimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsIntegrateTRTrig rule (IntegrateTimothyReda Action):
private void updateNumActsIntegrateTRTrig(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateTimothyRedaAction>integratetimothyredaActs = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsIntegrateTRTrig")))
{
for(int i=0; i<integratetimothyredaActs.size(); i++)
{
IntegrateTimothyRedaAction integratetimothyredaAct = integratetimothyredaActs.elementAt(i);
if(integratetimothyredaAct == action)
{
if((integratetimothyredaAct.getAllTimothys().size() >= 1) && (integratetimothyredaAct.getAllRedas().size() >= 1) && (integratetimothyredaAct.getAllCodes().size() >= 1) && (integratetimothyredaAct.getAllProjs().size() >= 1) && (integratetimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (integratetimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = integratetimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
}
}
Vector <Employee> redas = integratetimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
}
}
Vector <Artifact> codes = integratetimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integratetimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateduserstoriess = integratetimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratetimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleIntTRT rule (IntegrateTimothyReda Action):
private void setNotIdleIntTRT(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateTimothyRedaAction>integratetimothyredaActs = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdleIntTRT")))
{
for(int i=0; i<integratetimothyredaActs.size(); i++)
{
IntegrateTimothyRedaAction integratetimothyredaAct = integratetimothyredaActs.elementAt(i);
if(integratetimothyredaAct == action)
{
if((integratetimothyredaAct.getAllTimothys().size() >= 1) && (integratetimothyredaAct.getAllRedas().size() >= 1) && (integratetimothyredaAct.getAllCodes().size() >= 1) && (integratetimothyredaAct.getAllProjs().size() >= 1) && (integratetimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (integratetimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = integratetimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> redas = integratetimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = integratetimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integratetimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integratetimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratetimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleIntTRC rule (IntegrateTimothyReda Action):
private void setNotIdleIntTRC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateTimothyRedaAction>integratetimothyredaActs = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<integratetimothyredaActs.size(); i++)
{
IntegrateTimothyRedaAction integratetimothyredaAct = integratetimothyredaActs.elementAt(i);
if((integratetimothyredaAct.getAllTimothys().size() >= 1) && (integratetimothyredaAct.getAllRedas().size() >= 1) && (integratetimothyredaAct.getAllCodes().size() >= 1) && (integratetimothyredaAct.getAllProjs().size() >= 1) && (integratetimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (integratetimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = integratetimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> redas = integratetimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = integratetimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integratetimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integratetimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratetimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetNotIntegratingTR rule (IntegrateTimothyReda Action):
private void setNotIntegratingTR(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateTimothyRedaAction>integratetimothyredaActs = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIntegratingTR")))
{
for(int i=0; i<integratetimothyredaActs.size(); i++)
{
IntegrateTimothyRedaAction integratetimothyredaAct = integratetimothyredaActs.elementAt(i);
if(integratetimothyredaAct == action)
{
if((integratetimothyredaAct.getAllTimothys().size() >= 1) && (integratetimothyredaAct.getAllRedas().size() >= 1) && (integratetimothyredaAct.getAllCodes().size() >= 1) && (integratetimothyredaAct.getAllProjs().size() >= 1) && (integratetimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (integratetimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = integratetimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
softwaredeveloper.setIntegrating(false);
}
}
Vector <Employee> redas = integratetimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
softwaredeveloper.setIntegrating(false);
}
}
Vector <Artifact> codes = integratetimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integratetimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integratetimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratetimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsIntegrateTRDest rule (IntegrateTimothyReda Action):
private void updateNumActsIntegrateTRDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateTimothyRedaAction>integratetimothyredaActs = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsIntegrateTRDest")))
{
for(int i=0; i<integratetimothyredaActs.size(); i++)
{
IntegrateTimothyRedaAction integratetimothyredaAct = integratetimothyredaActs.elementAt(i);
if(integratetimothyredaAct == action)
{
if((integratetimothyredaAct.getAllTimothys().size() >= 1) && (integratetimothyredaAct.getAllRedas().size() >= 1) && (integratetimothyredaAct.getAllCodes().size() >= 1) && (integratetimothyredaAct.getAllProjs().size() >= 1) && (integratetimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (integratetimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = integratetimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
}
}
Vector <Employee> redas = integratetimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
}
}
Vector <Artifact> codes = integratetimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integratetimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateduserstoriess = integratetimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratetimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIdleIntTR rule (IntegrateTimothyReda Action):
private void setIdleIntTR(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateTimothyRedaAction>integratetimothyredaActs = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdleIntTR")))
{
for(int i=0; i<integratetimothyredaActs.size(); i++)
{
IntegrateTimothyRedaAction integratetimothyredaAct = integratetimothyredaActs.elementAt(i);
if(integratetimothyredaAct == action)
{
if((integratetimothyredaAct.getAllTimothys().size() >= 1) && (integratetimothyredaAct.getAllRedas().size() >= 1) && (integratetimothyredaAct.getAllCodes().size() >= 1) && (integratetimothyredaAct.getAllProjs().size() >= 1) && (integratetimothyredaAct.getAllAssociatedUserStoriess().size() >= 1) && (integratetimothyredaAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> timothys = integratetimothyredaAct.getAllActiveTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee timothy2 = timothys.elementAt(j);
if(timothy2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)timothy2;
softwaredeveloper.setIdle(true);
}
}
Vector <Employee> redas = integratetimothyredaAct.getAllActiveRedas();
for(int j=0; j<redas.size(); j++)
{
Employee reda2 = redas.elementAt(j);
if(reda2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)reda2;
softwaredeveloper.setIdle(true);
}
}
Vector <Artifact> codes = integratetimothyredaAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integratetimothyredaAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integratetimothyredaAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratetimothyredaAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIntegratingTrigPS rule (IntegratePegSigfreido Action):
private void setIntegratingTrigPS(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegratePegSigfreidoAction>integratepegsigfreidoActs = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIntegratingTrigPS")))
{
for(int i=0; i<integratepegsigfreidoActs.size(); i++)
{
IntegratePegSigfreidoAction integratepegsigfreidoAct = integratepegsigfreidoActs.elementAt(i);
if(integratepegsigfreidoAct == action)
{
if((integratepegsigfreidoAct.getAllPegs().size() >= 1) && (integratepegsigfreidoAct.getAllSigfreidos().size() >= 1) && (integratepegsigfreidoAct.getAllCodes().size() >= 1) && (integratepegsigfreidoAct.getAllProjs().size() >= 1) && (integratepegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (integratepegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = integratepegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
softwaredeveloper.setIntegrating(true);
}
}
Vector <Employee> sigfreidos = integratepegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
softwaredeveloper.setIntegrating(true);
}
}
Vector <Artifact> codes = integratepegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integratepegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integratepegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratepegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsIntegratePSTrig rule (IntegratePegSigfreido Action):
private void updateNumActsIntegratePSTrig(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegratePegSigfreidoAction>integratepegsigfreidoActs = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsIntegratePSTrig")))
{
for(int i=0; i<integratepegsigfreidoActs.size(); i++)
{
IntegratePegSigfreidoAction integratepegsigfreidoAct = integratepegsigfreidoActs.elementAt(i);
if(integratepegsigfreidoAct == action)
{
if((integratepegsigfreidoAct.getAllPegs().size() >= 1) && (integratepegsigfreidoAct.getAllSigfreidos().size() >= 1) && (integratepegsigfreidoAct.getAllCodes().size() >= 1) && (integratepegsigfreidoAct.getAllProjs().size() >= 1) && (integratepegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (integratepegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = integratepegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
}
}
Vector <Employee> sigfreidos = integratepegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
}
}
Vector <Artifact> codes = integratepegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integratepegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateduserstoriess = integratepegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratepegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleIntPST rule (IntegratePegSigfreido Action):
private void setNotIdleIntPST(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegratePegSigfreidoAction>integratepegsigfreidoActs = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdleIntPST")))
{
for(int i=0; i<integratepegsigfreidoActs.size(); i++)
{
IntegratePegSigfreidoAction integratepegsigfreidoAct = integratepegsigfreidoActs.elementAt(i);
if(integratepegsigfreidoAct == action)
{
if((integratepegsigfreidoAct.getAllPegs().size() >= 1) && (integratepegsigfreidoAct.getAllSigfreidos().size() >= 1) && (integratepegsigfreidoAct.getAllCodes().size() >= 1) && (integratepegsigfreidoAct.getAllProjs().size() >= 1) && (integratepegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (integratepegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = integratepegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> sigfreidos = integratepegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = integratepegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integratepegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integratepegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratepegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleIntPSC rule (IntegratePegSigfreido Action):
private void setNotIdleIntPSC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegratePegSigfreidoAction>integratepegsigfreidoActs = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<integratepegsigfreidoActs.size(); i++)
{
IntegratePegSigfreidoAction integratepegsigfreidoAct = integratepegsigfreidoActs.elementAt(i);
if((integratepegsigfreidoAct.getAllPegs().size() >= 1) && (integratepegsigfreidoAct.getAllSigfreidos().size() >= 1) && (integratepegsigfreidoAct.getAllCodes().size() >= 1) && (integratepegsigfreidoAct.getAllProjs().size() >= 1) && (integratepegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (integratepegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = integratepegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
softwaredeveloper.setIdle(false);
}
}
Vector <Employee> sigfreidos = integratepegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = integratepegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integratepegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integratepegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratepegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetNotIntegratingPS rule (IntegratePegSigfreido Action):
private void setNotIntegratingPS(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegratePegSigfreidoAction>integratepegsigfreidoActs = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIntegratingPS")))
{
for(int i=0; i<integratepegsigfreidoActs.size(); i++)
{
IntegratePegSigfreidoAction integratepegsigfreidoAct = integratepegsigfreidoActs.elementAt(i);
if(integratepegsigfreidoAct == action)
{
if((integratepegsigfreidoAct.getAllPegs().size() >= 1) && (integratepegsigfreidoAct.getAllSigfreidos().size() >= 1) && (integratepegsigfreidoAct.getAllCodes().size() >= 1) && (integratepegsigfreidoAct.getAllProjs().size() >= 1) && (integratepegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (integratepegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = integratepegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
softwaredeveloper.setIntegrating(false);
}
}
Vector <Employee> sigfreidos = integratepegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
softwaredeveloper.setIntegrating(false);
}
}
Vector <Artifact> codes = integratepegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integratepegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integratepegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratepegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsIntegratePSDest rule (IntegratePegSigfreido Action):
private void updateNumActsIntegratePSDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegratePegSigfreidoAction>integratepegsigfreidoActs = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsIntegratePSDest")))
{
for(int i=0; i<integratepegsigfreidoActs.size(); i++)
{
IntegratePegSigfreidoAction integratepegsigfreidoAct = integratepegsigfreidoActs.elementAt(i);
if(integratepegsigfreidoAct == action)
{
if((integratepegsigfreidoAct.getAllPegs().size() >= 1) && (integratepegsigfreidoAct.getAllSigfreidos().size() >= 1) && (integratepegsigfreidoAct.getAllCodes().size() >= 1) && (integratepegsigfreidoAct.getAllProjs().size() >= 1) && (integratepegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (integratepegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = integratepegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
}
}
Vector <Employee> sigfreidos = integratepegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
}
}
Vector <Artifact> codes = integratepegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integratepegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateduserstoriess = integratepegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratepegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIdleIntPS rule (IntegratePegSigfreido Action):
private void setIdleIntPS(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegratePegSigfreidoAction>integratepegsigfreidoActs = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdleIntPS")))
{
for(int i=0; i<integratepegsigfreidoActs.size(); i++)
{
IntegratePegSigfreidoAction integratepegsigfreidoAct = integratepegsigfreidoActs.elementAt(i);
if(integratepegsigfreidoAct == action)
{
if((integratepegsigfreidoAct.getAllPegs().size() >= 1) && (integratepegsigfreidoAct.getAllSigfreidos().size() >= 1) && (integratepegsigfreidoAct.getAllCodes().size() >= 1) && (integratepegsigfreidoAct.getAllProjs().size() >= 1) && (integratepegsigfreidoAct.getAllAssociatedUserStoriess().size() >= 1) && (integratepegsigfreidoAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> pegs = integratepegsigfreidoAct.getAllActivePegs();
for(int j=0; j<pegs.size(); j++)
{
Employee peg2 = pegs.elementAt(j);
if(peg2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)peg2;
softwaredeveloper.setIdle(true);
}
}
Vector <Employee> sigfreidos = integratepegsigfreidoAct.getAllActiveSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee sigfreido2 = sigfreidos.elementAt(j);
if(sigfreido2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)sigfreido2;
softwaredeveloper.setIdle(true);
}
}
Vector <Artifact> codes = integratepegsigfreidoAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integratepegsigfreidoAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integratepegsigfreidoAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integratepegsigfreidoAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIntegratingTrig rule (Integrate Action):
private void setIntegratingTrig(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateAction>integrateActs = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIntegratingTrig")))
{
for(int i=0; i<integrateActs.size(); i++)
{
IntegrateAction integrateAct = integrateActs.elementAt(i);
if(integrateAct == action)
{
if((integrateAct.getAllEmps().size() >= 1) && (integrateAct.getAllCodes().size() >= 1) && (integrateAct.getAllProjs().size() >= 1) && (integrateAct.getAllAssociatedUserStoriess().size() >= 1) && (integrateAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = integrateAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
softwaredeveloper.setIntegrating(true);
}
}
Vector <Artifact> codes = integrateAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integrateAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integrateAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integrateAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsIntegrateTrig rule (Integrate Action):
private void updateNumActsIntegrateTrig(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateAction>integrateActs = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsIntegrateTrig")))
{
for(int i=0; i<integrateActs.size(); i++)
{
IntegrateAction integrateAct = integrateActs.elementAt(i);
if(integrateAct == action)
{
if((integrateAct.getAllEmps().size() >= 1) && (integrateAct.getAllCodes().size() >= 1) && (integrateAct.getAllProjs().size() >= 1) && (integrateAct.getAllAssociatedUserStoriess().size() >= 1) && (integrateAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = integrateAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Artifact> codes = integrateAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integrateAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Artifact> associateduserstoriess = integrateAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integrateAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleIntegrateT rule (Integrate Action):
private void setNotIdleIntegrateT(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateAction>integrateActs = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdleIntegrateT")))
{
for(int i=0; i<integrateActs.size(); i++)
{
IntegrateAction integrateAct = integrateActs.elementAt(i);
if(integrateAct == action)
{
if((integrateAct.getAllEmps().size() >= 1) && (integrateAct.getAllCodes().size() >= 1) && (integrateAct.getAllProjs().size() >= 1) && (integrateAct.getAllAssociatedUserStoriess().size() >= 1) && (integrateAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = integrateAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = integrateAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integrateAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integrateAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integrateAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleIntegrateC rule (Integrate Action):
private void setNotIdleIntegrateC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateAction>integrateActs = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<integrateActs.size(); i++)
{
IntegrateAction integrateAct = integrateActs.elementAt(i);
if((integrateAct.getAllEmps().size() >= 1) && (integrateAct.getAllCodes().size() >= 1) && (integrateAct.getAllProjs().size() >= 1) && (integrateAct.getAllAssociatedUserStoriess().size() >= 1) && (integrateAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = integrateAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
softwaredeveloper.setIdle(false);
}
}
Vector <Artifact> codes = integrateAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integrateAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integrateAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integrateAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetNotIntegrating rule (Integrate Action):
private void setNotIntegrating(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateAction>integrateActs = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIntegrating")))
{
for(int i=0; i<integrateActs.size(); i++)
{
IntegrateAction integrateAct = integrateActs.elementAt(i);
if(integrateAct == action)
{
if((integrateAct.getAllEmps().size() >= 1) && (integrateAct.getAllCodes().size() >= 1) && (integrateAct.getAllProjs().size() >= 1) && (integrateAct.getAllAssociatedUserStoriess().size() >= 1) && (integrateAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = integrateAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
softwaredeveloper.setIntegrating(false);
}
}
Vector <Artifact> codes = integrateAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integrateAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integrateAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integrateAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// UpdateNumActsIntegrateDest rule (Integrate Action):
private void updateNumActsIntegrateDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateAction>integrateActs = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("UpdateNumActsIntegrateDest")))
{
for(int i=0; i<integrateActs.size(); i++)
{
IntegrateAction integrateAct = integrateActs.elementAt(i);
if(integrateAct == action)
{
if((integrateAct.getAllEmps().size() >= 1) && (integrateAct.getAllCodes().size() >= 1) && (integrateAct.getAllProjs().size() >= 1) && (integrateAct.getAllAssociatedUserStoriess().size() >= 1) && (integrateAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = integrateAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Artifact> codes = integrateAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integrateAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido));
}
}
Vector <Artifact> associateduserstoriess = integrateAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integrateAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIdleIntegrate rule (Integrate Action):
private void setIdleIntegrate(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<IntegrateAction>integrateActs = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdleIntegrate")))
{
for(int i=0; i<integrateActs.size(); i++)
{
IntegrateAction integrateAct = integrateActs.elementAt(i);
if(integrateAct == action)
{
if((integrateAct.getAllEmps().size() >= 1) && (integrateAct.getAllCodes().size() >= 1) && (integrateAct.getAllProjs().size() >= 1) && (integrateAct.getAllAssociatedUserStoriess().size() >= 1) && (integrateAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = integrateAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
softwaredeveloper.setIdle(true);
}
}
Vector <Artifact> codes = integrateAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = integrateAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> associateduserstoriess = integrateAct.getAllActiveAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact associateduserstories2 = associateduserstoriess.elementAt(j);
if(associateduserstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)associateduserstories2;
}
}
Vector <Artifact> releaseplans = integrateAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetAcceptanceTesting rule (AcceptanceTesting Action):
private void setAcceptanceTesting(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<AcceptanceTestingAction>acceptancetestingActs = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetAcceptanceTesting")))
{
for(int i=0; i<acceptancetestingActs.size(); i++)
{
AcceptanceTestingAction acceptancetestingAct = acceptancetestingActs.elementAt(i);
if(acceptancetestingAct == action)
{
if((acceptancetestingAct.getAllEmps().size() >= 1) && (acceptancetestingAct.getAllCusts().size() >= 1) && (acceptancetestingAct.getAllAcceptanceTestCasess().size() >= 1) && (acceptancetestingAct.getAllUserStoriess().size() >= 1) && (acceptancetestingAct.getAllCodes().size() >= 1) && (acceptancetestingAct.getAllProjs().size() >= 1) && (acceptancetestingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = acceptancetestingAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Customer> custs = acceptancetestingAct.getAllActiveCusts();
for(int j=0; j<custs.size(); j++)
{
Customer cust2 = custs.elementAt(j);
if(cust2 instanceof CustomerRepresentative)
{
CustomerRepresentative customerrepresentative = (CustomerRepresentative)cust2;
}
}
Vector <Artifact> acceptancetestcasess = acceptancetestingAct.getAllActiveAcceptanceTestCasess();
for(int j=0; j<acceptancetestcasess.size(); j++)
{
Artifact acceptancetestcases2 = acceptancetestcasess.elementAt(j);
if(acceptancetestcases2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetestcases2;
}
}
Vector <Artifact> userstoriess = acceptancetestingAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Artifact> codes = acceptancetestingAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = acceptancetestingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setAcceptanceTesting(true);
}
}
Vector <Artifact> releaseplans = acceptancetestingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleAccTestT rule (AcceptanceTesting Action):
private void setNotIdleAccTestT(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<AcceptanceTestingAction>acceptancetestingActs = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetNotIdleAccTestT")))
{
for(int i=0; i<acceptancetestingActs.size(); i++)
{
AcceptanceTestingAction acceptancetestingAct = acceptancetestingActs.elementAt(i);
if(acceptancetestingAct == action)
{
if((acceptancetestingAct.getAllEmps().size() >= 1) && (acceptancetestingAct.getAllCusts().size() >= 1) && (acceptancetestingAct.getAllAcceptanceTestCasess().size() >= 1) && (acceptancetestingAct.getAllUserStoriess().size() >= 1) && (acceptancetestingAct.getAllCodes().size() >= 1) && (acceptancetestingAct.getAllProjs().size() >= 1) && (acceptancetestingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = acceptancetestingAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
softwaredeveloper.setIdle(false);
}
}
Vector <Customer> custs = acceptancetestingAct.getAllActiveCusts();
for(int j=0; j<custs.size(); j++)
{
Customer cust2 = custs.elementAt(j);
if(cust2 instanceof CustomerRepresentative)
{
CustomerRepresentative customerrepresentative = (CustomerRepresentative)cust2;
}
}
Vector <Artifact> acceptancetestcasess = acceptancetestingAct.getAllActiveAcceptanceTestCasess();
for(int j=0; j<acceptancetestcasess.size(); j++)
{
Artifact acceptancetestcases2 = acceptancetestcasess.elementAt(j);
if(acceptancetestcases2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetestcases2;
}
}
Vector <Artifact> userstoriess = acceptancetestingAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Artifact> codes = acceptancetestingAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = acceptancetestingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = acceptancetestingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetNotIdleAccTestC rule (AcceptanceTesting Action):
private void setNotIdleAccTestC(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<AcceptanceTestingAction>acceptancetestingActs = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<acceptancetestingActs.size(); i++)
{
AcceptanceTestingAction acceptancetestingAct = acceptancetestingActs.elementAt(i);
if((acceptancetestingAct.getAllEmps().size() >= 1) && (acceptancetestingAct.getAllCusts().size() >= 1) && (acceptancetestingAct.getAllAcceptanceTestCasess().size() >= 1) && (acceptancetestingAct.getAllUserStoriess().size() >= 1) && (acceptancetestingAct.getAllCodes().size() >= 1) && (acceptancetestingAct.getAllProjs().size() >= 1) && (acceptancetestingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = acceptancetestingAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
softwaredeveloper.setIdle(false);
}
}
Vector <Customer> custs = acceptancetestingAct.getAllActiveCusts();
for(int j=0; j<custs.size(); j++)
{
Customer cust2 = custs.elementAt(j);
if(cust2 instanceof CustomerRepresentative)
{
CustomerRepresentative customerrepresentative = (CustomerRepresentative)cust2;
}
}
Vector <Artifact> acceptancetestcasess = acceptancetestingAct.getAllActiveAcceptanceTestCasess();
for(int j=0; j<acceptancetestcasess.size(); j++)
{
Artifact acceptancetestcases2 = acceptancetestcasess.elementAt(j);
if(acceptancetestcases2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetestcases2;
}
}
Vector <Artifact> userstoriess = acceptancetestingAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Artifact> codes = acceptancetestingAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = acceptancetestingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = acceptancetestingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
// SetCustomerInvolvedAccTestDest rule (AcceptanceTesting Action):
private void setCustomerInvolvedAccTestDest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<AcceptanceTestingAction>acceptancetestingActs = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetCustomerInvolvedAccTestDest")))
{
for(int i=0; i<acceptancetestingActs.size(); i++)
{
AcceptanceTestingAction acceptancetestingAct = acceptancetestingActs.elementAt(i);
if(acceptancetestingAct == action)
{
if((acceptancetestingAct.getAllEmps().size() >= 1) && (acceptancetestingAct.getAllCusts().size() >= 1) && (acceptancetestingAct.getAllAcceptanceTestCasess().size() >= 1) && (acceptancetestingAct.getAllUserStoriess().size() >= 1) && (acceptancetestingAct.getAllCodes().size() >= 1) && (acceptancetestingAct.getAllProjs().size() >= 1) && (acceptancetestingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = acceptancetestingAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Customer> custs = acceptancetestingAct.getAllActiveCusts();
for(int j=0; j<custs.size(); j++)
{
Customer cust2 = custs.elementAt(j);
if(cust2 instanceof CustomerRepresentative)
{
CustomerRepresentative customerrepresentative = (CustomerRepresentative)cust2;
}
}
Vector <Artifact> acceptancetestcasess = acceptancetestingAct.getAllActiveAcceptanceTestCasess();
for(int j=0; j<acceptancetestcasess.size(); j++)
{
Artifact acceptancetestcases2 = acceptancetestcasess.elementAt(j);
if(acceptancetestcases2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetestcases2;
acceptancetests.setCustomerInvolvedInCreation((int)(1));
}
}
Vector <Artifact> userstoriess = acceptancetestingAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Artifact> codes = acceptancetestingAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = acceptancetestingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = acceptancetestingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// SetIdleAccTest rule (AcceptanceTesting Action):
private void setIdleAccTest(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<AcceptanceTestingAction>acceptancetestingActs = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetIdleAccTest")))
{
for(int i=0; i<acceptancetestingActs.size(); i++)
{
AcceptanceTestingAction acceptancetestingAct = acceptancetestingActs.elementAt(i);
if(acceptancetestingAct == action)
{
if((acceptancetestingAct.getAllEmps().size() >= 1) && (acceptancetestingAct.getAllCusts().size() >= 1) && (acceptancetestingAct.getAllAcceptanceTestCasess().size() >= 1) && (acceptancetestingAct.getAllUserStoriess().size() >= 1) && (acceptancetestingAct.getAllCodes().size() >= 1) && (acceptancetestingAct.getAllProjs().size() >= 1) && (acceptancetestingAct.getAllReleasePlans().size() >= 1))
{
Vector <Employee> emps = acceptancetestingAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
softwaredeveloper.setIdle(true);
}
}
Vector <Customer> custs = acceptancetestingAct.getAllActiveCusts();
for(int j=0; j<custs.size(); j++)
{
Customer cust2 = custs.elementAt(j);
if(cust2 instanceof CustomerRepresentative)
{
CustomerRepresentative customerrepresentative = (CustomerRepresentative)cust2;
}
}
Vector <Artifact> acceptancetestcasess = acceptancetestingAct.getAllActiveAcceptanceTestCasess();
for(int j=0; j<acceptancetestcasess.size(); j++)
{
Artifact acceptancetestcases2 = acceptancetestcasess.elementAt(j);
if(acceptancetestcases2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetestcases2;
}
}
Vector <Artifact> userstoriess = acceptancetestingAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Artifact> codes = acceptancetestingAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = acceptancetestingAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = acceptancetestingAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
}
}
}
}
}
// ResetProjectAttributes rule (ReleaseCodeAndEndIteration Action):
private void resetProjectAttributes(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<ReleaseCodeAndEndIterationAction>releasecodeandenditerationActs = state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("ResetProjectAttributes")))
{
for(int i=0; i<releasecodeandenditerationActs.size(); i++)
{
ReleaseCodeAndEndIterationAction releasecodeandenditerationAct = releasecodeandenditerationActs.elementAt(i);
if(releasecodeandenditerationAct == action)
{
if((releasecodeandenditerationAct.getAllEmps().size() >= 1) && (releasecodeandenditerationAct.getAllCodes().size() >= 1) && (releasecodeandenditerationAct.getAllProjs().size() >= 1) && (releasecodeandenditerationAct.getAllAcceptanceTestss().size() >= 1) && (releasecodeandenditerationAct.getAllReleasePlans().size() >= 1) && (releasecodeandenditerationAct.getAllUserStoriess().size() >= 1))
{
Vector <Employee> emps = releasecodeandenditerationAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Artifact> codes = releasecodeandenditerationAct.getAllActiveCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact code2 = codes.elementAt(j);
if(code2 instanceof Code)
{
Code code = (Code)code2;
}
}
Vector <Project> projs = releasecodeandenditerationAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setReleaseMadeThisIteration(true);
theproject.setTimeSinceLastRelease((int)(0));
theproject.setIterationStarted(false);
theproject.setUserStoriesChosenForThisIteration(false);
theproject.setProgrammingTasksAssignedThisIteration(false);
theproject.setIterationPlanningMeetingStarted(false);
theproject.setAcceptanceTestsCreatedThisIteration((int)(0));
theproject.setUnitTestsCreatedThisIteration((int)(0));
theproject.setRobertAndJoycePairProgThisIteration(false);
theproject.setTimothyAndRedaPairProgThisIteration(false);
theproject.setPegAndSigfreidoPairProgThisIteration(false);
}
}
Vector <Artifact> acceptancetestss = releasecodeandenditerationAct.getAllActiveAcceptanceTestss();
for(int j=0; j<acceptancetestss.size(); j++)
{
Artifact acceptancetests2 = acceptancetestss.elementAt(j);
if(acceptancetests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetests2;
}
}
Vector <Artifact> releaseplans = releasecodeandenditerationAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
Vector <Artifact> userstoriess = releasecodeandenditerationAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
}
}
}
}
}
// UpdateNumActivitiesOccurring rule (UpdateProjectAttributes Action):
private void updateNumActivitiesOccurring(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<UpdateProjectAttributesAction>updateprojectattributesActs = state.getActionStateRepository().getUpdateProjectAttributesActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<updateprojectattributesActs.size(); i++)
{
UpdateProjectAttributesAction updateprojectattributesAct = updateprojectattributesActs.elementAt(i);
if((updateprojectattributesAct.getAllProjs().size() >= 1) && (updateprojectattributesAct.getAllEmps().size() >= 1))
{
Vector <Project> projs = updateprojectattributesAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double numActionsThisPartCreateUserStories = (double)(state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartReleasePlanningMeeting = (double)(state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIterationPlanningMeeting = (double)(state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateAcceptanceTests = (double)(state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartDesign = (double)(state.getActionStateRepository().getDesignActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartCreateUnitTests = (double)(state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartLearnCodingStandard = (double)(state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartProgram = (double)(state.getActionStateRepository().getProgramActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramRobertJoyce = (double)(state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramTimothyReda = (double)(state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartPairProgramPegSigfreido = (double)(state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartUnitTestingAndFixing = (double)(state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartRefactor = (double)(state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateRobertJoyce = (double)(state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrateTimothyReda = (double)(state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegratePegSigfreido = (double)(state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(proj2).size());
double numActionsThisPartIntegrate = (double)(state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(proj2).size());
theproject.setNumActivitiesOccurring((int)(numActionsThisPartCreateUserStories + numActionsThisPartReleasePlanningMeeting + numActionsThisPartIterationPlanningMeeting + numActionsThisPartCreateAcceptanceTests + numActionsThisPartDesign + numActionsThisPartCreateUnitTests + numActionsThisPartLearnCodingStandard + numActionsThisPartProgram + numActionsThisPartPairProgramRobertJoyce + numActionsThisPartPairProgramTimothyReda + numActionsThisPartPairProgramPegSigfreido + numActionsThisPartUnitTestingAndFixing + numActionsThisPartRefactor + numActionsThisPartIntegrateRobertJoyce + numActionsThisPartIntegrateTimothyReda + numActionsThisPartIntegratePegSigfreido + numActionsThisPartIntegrate));
}
}
Vector <Employee> emps = updateprojectattributesAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
}
}
}
}
// UpdateTimeSinceLastRelease rule (UpdateProjectAttributes Action):
private void updateTimeSinceLastRelease(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<UpdateProjectAttributesAction>updateprojectattributesActs = state.getActionStateRepository().getUpdateProjectAttributesActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<updateprojectattributesActs.size(); i++)
{
UpdateProjectAttributesAction updateprojectattributesAct = updateprojectattributesActs.elementAt(i);
if((updateprojectattributesAct.getAllProjs().size() >= 1) && (updateprojectattributesAct.getAllEmps().size() >= 1))
{
Vector <Project> projs = updateprojectattributesAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setTimeSinceLastRelease((int)(((double)(theproject.getTimeSinceLastRelease())) + 1));
}
}
Vector <Employee> emps = updateprojectattributesAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
}
}
}
}
// UpdateTimeElapsed rule (UpdateProjectAttributes Action):
private void updateTimeElapsed(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<UpdateProjectAttributesAction>updateprojectattributesActs = state.getActionStateRepository().getUpdateProjectAttributesActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ALL_CONTINUOUS))
{
for(int i=0; i<updateprojectattributesActs.size(); i++)
{
UpdateProjectAttributesAction updateprojectattributesAct = updateprojectattributesActs.elementAt(i);
if((updateprojectattributesAct.getAllProjs().size() >= 1) && (updateprojectattributesAct.getAllEmps().size() >= 1))
{
Vector <Project> projs = updateprojectattributesAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setTimeElapsed((int)(((double)(theproject.getTimeElapsed())) + 1));
}
}
Vector <Employee> emps = updateprojectattributesAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
}
}
}
}
// ResetReleasePlanCompleteness rule (RequireReleasePlanDoOver Action):
private void resetReleasePlanCompleteness(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<RequireReleasePlanDoOverAction>requirereleaseplandooverActs = state.getActionStateRepository().getRequireReleasePlanDoOverActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("ResetReleasePlanCompleteness")))
{
for(int i=0; i<requirereleaseplandooverActs.size(); i++)
{
RequireReleasePlanDoOverAction requirereleaseplandooverAct = requirereleaseplandooverActs.elementAt(i);
if(requirereleaseplandooverAct == action)
{
if((requirereleaseplandooverAct.getAllEmps().size() >= 1) && (requirereleaseplandooverAct.getAllProjs().size() >= 1) && (requirereleaseplandooverAct.getAllReleasePlans().size() >= 1) && (requirereleaseplandooverAct.getAllCustReps().size() >= 1))
{
Vector <Employee> emps = requirereleaseplandooverAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Project> projs = requirereleaseplandooverAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = requirereleaseplandooverAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
releaseplan.setCompleteness((double)(0));
}
}
Vector <Employee> custreps = requirereleaseplandooverAct.getAllActiveCustReps();
for(int j=0; j<custreps.size(); j++)
{
Employee custrep2 = custreps.elementAt(j);
if(custrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)custrep2;
}
}
}
}
}
}
}
// DeactivateOtherActions rule (RequireReleasePlanDoOver Action):
private void deactivateOtherActions(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<RequireReleasePlanDoOverAction>requirereleaseplandooverActs = state.getActionStateRepository().getRequireReleasePlanDoOverActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("DeactivateOtherActions")))
{
for(int i=0; i<requirereleaseplandooverActs.size(); i++)
{
RequireReleasePlanDoOverAction requirereleaseplandooverAct = requirereleaseplandooverActs.elementAt(i);
if(requirereleaseplandooverAct == action)
{
if((requirereleaseplandooverAct.getAllEmps().size() >= 1) && (requirereleaseplandooverAct.getAllProjs().size() >= 1) && (requirereleaseplandooverAct.getAllReleasePlans().size() >= 1) && (requirereleaseplandooverAct.getAllCustReps().size() >= 1))
{
Vector <Employee> emps = requirereleaseplandooverAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
Vector<StartIterationAction> startiterationactionsDeactivate = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < startiterationactionsDeactivate.size(); k++) {
StartIterationAction tempAct = startiterationactionsDeactivate.elementAt(k);
tempAct.setEmpInactive(softwaredeveloper);
tempAct.setCustomerRepInactive(softwaredeveloper);
}
Vector<IterationPlanningMeetingAction> iterationplanningmeetingactionsDeactivate = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < iterationplanningmeetingactionsDeactivate.size(); k++) {
IterationPlanningMeetingAction tempAct = iterationplanningmeetingactionsDeactivate.elementAt(k);
tempAct.setDeveloperInactive(softwaredeveloper);
tempAct.setCustomerRepInactive(softwaredeveloper);
}
Vector<ChooseUserStoriesForIterationAction> chooseuserstoriesforiterationactionsDeactivate = state.getActionStateRepository().getChooseUserStoriesForIterationActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < chooseuserstoriesforiterationactionsDeactivate.size(); k++) {
ChooseUserStoriesForIterationAction tempAct = chooseuserstoriesforiterationactionsDeactivate.elementAt(k);
tempAct.setEmpInactive(softwaredeveloper);
}
Vector<CreateProgrammingTasksAction> createprogrammingtasksactionsDeactivate = state.getActionStateRepository().getCreateProgrammingTasksActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < createprogrammingtasksactionsDeactivate.size(); k++) {
CreateProgrammingTasksAction tempAct = createprogrammingtasksactionsDeactivate.elementAt(k);
tempAct.setEmpInactive(softwaredeveloper);
}
Vector<CreateAcceptanceTestsAction> createacceptancetestsactionsDeactivate = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < createacceptancetestsactionsDeactivate.size(); k++) {
CreateAcceptanceTestsAction tempAct = createacceptancetestsactionsDeactivate.elementAt(k);
tempAct.setDeveloperInactive(softwaredeveloper);
tempAct.setCustRepInactive(softwaredeveloper);
}
Vector<DesignAction> designactionsDeactivate = state.getActionStateRepository().getDesignActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < designactionsDeactivate.size(); k++) {
DesignAction tempAct = designactionsDeactivate.elementAt(k);
tempAct.setDeveloperInactive(softwaredeveloper);
}
Vector<CreateUnitTestsAction> createunittestsactionsDeactivate = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < createunittestsactionsDeactivate.size(); k++) {
CreateUnitTestsAction tempAct = createunittestsactionsDeactivate.elementAt(k);
tempAct.setDeveloperInactive(softwaredeveloper);
}
Vector<LearnCodingStandardAction> learncodingstandardactionsDeactivate = state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < learncodingstandardactionsDeactivate.size(); k++) {
LearnCodingStandardAction tempAct = learncodingstandardactionsDeactivate.elementAt(k);
tempAct.setDeveloperInactive(softwaredeveloper);
}
Vector<ProgramAction> programactionsDeactivate = state.getActionStateRepository().getProgramActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < programactionsDeactivate.size(); k++) {
ProgramAction tempAct = programactionsDeactivate.elementAt(k);
tempAct.setDeveloperInactive(softwaredeveloper);
}
Vector<PairProgramRobertJoyceAction> pairprogramrobertjoyceactionsDeactivate = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < pairprogramrobertjoyceactionsDeactivate.size(); k++) {
PairProgramRobertJoyceAction tempAct = pairprogramrobertjoyceactionsDeactivate.elementAt(k);
tempAct.setRobertInactive(softwaredeveloper);
tempAct.setJoyceInactive(softwaredeveloper);
}
Vector<PairProgramTimothyRedaAction> pairprogramtimothyredaactionsDeactivate = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < pairprogramtimothyredaactionsDeactivate.size(); k++) {
PairProgramTimothyRedaAction tempAct = pairprogramtimothyredaactionsDeactivate.elementAt(k);
tempAct.setTimothyInactive(softwaredeveloper);
tempAct.setRedaInactive(softwaredeveloper);
}
Vector<PairProgramPegSigfreidoAction> pairprogrampegsigfreidoactionsDeactivate = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < pairprogrampegsigfreidoactionsDeactivate.size(); k++) {
PairProgramPegSigfreidoAction tempAct = pairprogrampegsigfreidoactionsDeactivate.elementAt(k);
tempAct.setPegInactive(softwaredeveloper);
tempAct.setSigfreidoInactive(softwaredeveloper);
}
Vector<UnitTestingAndFixingAction> unittestingandfixingactionsDeactivate = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < unittestingandfixingactionsDeactivate.size(); k++) {
UnitTestingAndFixingAction tempAct = unittestingandfixingactionsDeactivate.elementAt(k);
tempAct.setEmpInactive(softwaredeveloper);
}
Vector<RefactorAction> refactoractionsDeactivate = state.getActionStateRepository().getRefactorActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < refactoractionsDeactivate.size(); k++) {
RefactorAction tempAct = refactoractionsDeactivate.elementAt(k);
tempAct.setEmpInactive(softwaredeveloper);
}
Vector<IntegrateRobertJoyceAction> integraterobertjoyceactionsDeactivate = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < integraterobertjoyceactionsDeactivate.size(); k++) {
IntegrateRobertJoyceAction tempAct = integraterobertjoyceactionsDeactivate.elementAt(k);
tempAct.setRobertInactive(softwaredeveloper);
tempAct.setJoyceInactive(softwaredeveloper);
}
Vector<IntegrateTimothyRedaAction> integratetimothyredaactionsDeactivate = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < integratetimothyredaactionsDeactivate.size(); k++) {
IntegrateTimothyRedaAction tempAct = integratetimothyredaactionsDeactivate.elementAt(k);
tempAct.setTimothyInactive(softwaredeveloper);
tempAct.setRedaInactive(softwaredeveloper);
}
Vector<IntegratePegSigfreidoAction> integratepegsigfreidoactionsDeactivate = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < integratepegsigfreidoactionsDeactivate.size(); k++) {
IntegratePegSigfreidoAction tempAct = integratepegsigfreidoactionsDeactivate.elementAt(k);
tempAct.setPegInactive(softwaredeveloper);
tempAct.setSigfreidoInactive(softwaredeveloper);
}
Vector<IntegrateAction> integrateactionsDeactivate = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < integrateactionsDeactivate.size(); k++) {
IntegrateAction tempAct = integrateactionsDeactivate.elementAt(k);
tempAct.setEmpInactive(softwaredeveloper);
}
Vector<AcceptanceTestingAction> acceptancetestingactionsDeactivate = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < acceptancetestingactionsDeactivate.size(); k++) {
AcceptanceTestingAction tempAct = acceptancetestingactionsDeactivate.elementAt(k);
tempAct.setEmpInactive(softwaredeveloper);
}
Vector<ReleaseCodeAndEndIterationAction> releasecodeandenditerationactionsDeactivate = state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().getAllActiveActions(softwaredeveloper);
for (int k = 0; k < releasecodeandenditerationactionsDeactivate.size(); k++) {
ReleaseCodeAndEndIterationAction tempAct = releasecodeandenditerationactionsDeactivate.elementAt(k);
tempAct.setEmpInactive(softwaredeveloper);
}
}
}
Vector <Project> projs = requirereleaseplandooverAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = requirereleaseplandooverAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
Vector <Employee> custreps = requirereleaseplandooverAct.getAllActiveCustReps();
for(int j=0; j<custreps.size(); j++)
{
Employee custrep2 = custreps.elementAt(j);
if(custrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)custrep2;
Vector<StartIterationAction> startiterationactionsDeactivate = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActiveActions(customerrep);
for (int k = 0; k < startiterationactionsDeactivate.size(); k++) {
StartIterationAction tempAct = startiterationactionsDeactivate.elementAt(k);
tempAct.setEmpInactive(customerrep);
tempAct.setCustomerRepInactive(customerrep);
}
Vector<IterationPlanningMeetingAction> iterationplanningmeetingactionsDeactivate = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActiveActions(customerrep);
for (int k = 0; k < iterationplanningmeetingactionsDeactivate.size(); k++) {
IterationPlanningMeetingAction tempAct = iterationplanningmeetingactionsDeactivate.elementAt(k);
tempAct.setDeveloperInactive(customerrep);
tempAct.setCustomerRepInactive(customerrep);
}
Vector<ChooseUserStoriesForIterationAction> chooseuserstoriesforiterationactionsDeactivate = state.getActionStateRepository().getChooseUserStoriesForIterationActionStateRepository().getAllActiveActions(customerrep);
for (int k = 0; k < chooseuserstoriesforiterationactionsDeactivate.size(); k++) {
ChooseUserStoriesForIterationAction tempAct = chooseuserstoriesforiterationactionsDeactivate.elementAt(k);
tempAct.setEmpInactive(customerrep);
}
Vector<CreateAcceptanceTestsAction> createacceptancetestsactionsDeactivate = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActiveActions(customerrep);
for (int k = 0; k < createacceptancetestsactionsDeactivate.size(); k++) {
CreateAcceptanceTestsAction tempAct = createacceptancetestsactionsDeactivate.elementAt(k);
tempAct.setDeveloperInactive(customerrep);
tempAct.setCustRepInactive(customerrep);
}
}
}
}
}
}
}
}
// ReactivateOtherActions rule (RequireReleasePlanDoOver Action):
private void reactivateOtherActions(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<RequireReleasePlanDoOverAction>requirereleaseplandooverActs = state.getActionStateRepository().getRequireReleasePlanDoOverActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("ReactivateOtherActions")))
{
for(int i=0; i<requirereleaseplandooverActs.size(); i++)
{
RequireReleasePlanDoOverAction requirereleaseplandooverAct = requirereleaseplandooverActs.elementAt(i);
if(requirereleaseplandooverAct == action)
{
if((requirereleaseplandooverAct.getAllEmps().size() >= 1) && (requirereleaseplandooverAct.getAllProjs().size() >= 1) && (requirereleaseplandooverAct.getAllReleasePlans().size() >= 1) && (requirereleaseplandooverAct.getAllCustReps().size() >= 1))
{
Vector <Employee> emps = requirereleaseplandooverAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
Vector<simse.adts.actions.Action> otherActs = state.getActionStateRepository().getAllInactiveActions(softwaredeveloper);
for(int k=0; k<otherActs.size(); k++)
{
simse.adts.actions.Action tempAct = otherActs.elementAt(k);
if(tempAct instanceof CreateUserStoriesAction)
{
((CreateUserStoriesAction)tempAct).setDeveloperActive(softwaredeveloper);
((CreateUserStoriesAction)tempAct).setCustomerRepActive(softwaredeveloper);
}
else if(tempAct instanceof ReleasePlanningMeetingAction)
{
((ReleasePlanningMeetingAction)tempAct).setDeveloperActive(softwaredeveloper);
((ReleasePlanningMeetingAction)tempAct).setManagerActive(softwaredeveloper);
((ReleasePlanningMeetingAction)tempAct).setCustomerRepActive(softwaredeveloper);
}
else if(tempAct instanceof StartIterationAction)
{
((StartIterationAction)tempAct).setEmpActive(softwaredeveloper);
((StartIterationAction)tempAct).setCustomerRepActive(softwaredeveloper);
}
else if(tempAct instanceof IterationPlanningMeetingAction)
{
((IterationPlanningMeetingAction)tempAct).setDeveloperActive(softwaredeveloper);
((IterationPlanningMeetingAction)tempAct).setCustomerRepActive(softwaredeveloper);
}
else if(tempAct instanceof ChooseUserStoriesForIterationAction)
{
((ChooseUserStoriesForIterationAction)tempAct).setEmpActive(softwaredeveloper);
}
else if(tempAct instanceof CreateProgrammingTasksAction)
{
((CreateProgrammingTasksAction)tempAct).setEmpActive(softwaredeveloper);
}
else if(tempAct instanceof CreateAcceptanceTestsAction)
{
((CreateAcceptanceTestsAction)tempAct).setDeveloperActive(softwaredeveloper);
((CreateAcceptanceTestsAction)tempAct).setCustRepActive(softwaredeveloper);
}
else if(tempAct instanceof DesignAction)
{
((DesignAction)tempAct).setDeveloperActive(softwaredeveloper);
}
else if(tempAct instanceof CreateUnitTestsAction)
{
((CreateUnitTestsAction)tempAct).setDeveloperActive(softwaredeveloper);
}
else if(tempAct instanceof LearnCodingStandardAction)
{
((LearnCodingStandardAction)tempAct).setDeveloperActive(softwaredeveloper);
}
else if(tempAct instanceof ProgramAction)
{
((ProgramAction)tempAct).setDeveloperActive(softwaredeveloper);
}
else if(tempAct instanceof PairProgramRobertJoyceAction)
{
((PairProgramRobertJoyceAction)tempAct).setRobertActive(softwaredeveloper);
((PairProgramRobertJoyceAction)tempAct).setJoyceActive(softwaredeveloper);
}
else if(tempAct instanceof PairProgramTimothyRedaAction)
{
((PairProgramTimothyRedaAction)tempAct).setTimothyActive(softwaredeveloper);
((PairProgramTimothyRedaAction)tempAct).setRedaActive(softwaredeveloper);
}
else if(tempAct instanceof PairProgramPegSigfreidoAction)
{
((PairProgramPegSigfreidoAction)tempAct).setPegActive(softwaredeveloper);
((PairProgramPegSigfreidoAction)tempAct).setSigfreidoActive(softwaredeveloper);
}
else if(tempAct instanceof UnitTestingAndFixingAction)
{
((UnitTestingAndFixingAction)tempAct).setEmpActive(softwaredeveloper);
}
else if(tempAct instanceof RefactorAction)
{
((RefactorAction)tempAct).setEmpActive(softwaredeveloper);
}
else if(tempAct instanceof IntegrateRobertJoyceAction)
{
((IntegrateRobertJoyceAction)tempAct).setRobertActive(softwaredeveloper);
((IntegrateRobertJoyceAction)tempAct).setJoyceActive(softwaredeveloper);
}
else if(tempAct instanceof IntegrateTimothyRedaAction)
{
((IntegrateTimothyRedaAction)tempAct).setTimothyActive(softwaredeveloper);
((IntegrateTimothyRedaAction)tempAct).setRedaActive(softwaredeveloper);
}
else if(tempAct instanceof IntegratePegSigfreidoAction)
{
((IntegratePegSigfreidoAction)tempAct).setPegActive(softwaredeveloper);
((IntegratePegSigfreidoAction)tempAct).setSigfreidoActive(softwaredeveloper);
}
else if(tempAct instanceof IntegrateAction)
{
((IntegrateAction)tempAct).setEmpActive(softwaredeveloper);
}
else if(tempAct instanceof AcceptanceTestingAction)
{
((AcceptanceTestingAction)tempAct).setEmpActive(softwaredeveloper);
}
else if(tempAct instanceof ReleaseCodeAndEndIterationAction)
{
((ReleaseCodeAndEndIterationAction)tempAct).setEmpActive(softwaredeveloper);
}
else if(tempAct instanceof UpdateUserStoriesAttributesAction)
{
}
else if(tempAct instanceof SetEmployeeProductivitiesAction)
{
((SetEmployeeProductivitiesAction)tempAct).setEmpActive(softwaredeveloper);
}
else if(tempAct instanceof UpdateProjectAttributesAction)
{
((UpdateProjectAttributesAction)tempAct).setEmpActive(softwaredeveloper);
}
else if(tempAct instanceof RequireReleasePlanDoOverAction)
{
if(tempAct.equals(requirereleaseplandooverAct) == false)
{
((RequireReleasePlanDoOverAction)tempAct).setEmpActive(softwaredeveloper);
((RequireReleasePlanDoOverAction)tempAct).setCustRepActive(softwaredeveloper);
}
}
else if(tempAct instanceof CustomerComplainsAction)
{
((CustomerComplainsAction)tempAct).setCustRepActive(softwaredeveloper);
}
else if(tempAct instanceof AllEmployeesIdleAction)
{
((AllEmployeesIdleAction)tempAct).setEmpActive(softwaredeveloper);
}
else if(tempAct instanceof DeliverFinalProductToCustomerAction)
{
((DeliverFinalProductToCustomerAction)tempAct).setEmpActive(softwaredeveloper);
}
else if(tempAct instanceof WarnOfImpendingDeadlineAction)
{
((WarnOfImpendingDeadlineAction)tempAct).setEmpActive(softwaredeveloper);
}
else if(tempAct instanceof GameOverAction)
{
((GameOverAction)tempAct).setEmpActive(softwaredeveloper);
}
}
}
}
Vector <Project> projs = requirereleaseplandooverAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
}
}
Vector <Artifact> releaseplans = requirereleaseplandooverAct.getAllActiveReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact releaseplan2 = releaseplans.elementAt(j);
if(releaseplan2 instanceof ReleasePlan)
{
ReleasePlan releaseplan = (ReleasePlan)releaseplan2;
}
}
Vector <Employee> custreps = requirereleaseplandooverAct.getAllActiveCustReps();
for(int j=0; j<custreps.size(); j++)
{
Employee custrep2 = custreps.elementAt(j);
if(custrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)custrep2;
Vector<simse.adts.actions.Action> otherActs = state.getActionStateRepository().getAllInactiveActions(customerrep);
for(int k=0; k<otherActs.size(); k++)
{
simse.adts.actions.Action tempAct = otherActs.elementAt(k);
if(tempAct instanceof CreateUserStoriesAction)
{
((CreateUserStoriesAction)tempAct).setDeveloperActive(customerrep);
((CreateUserStoriesAction)tempAct).setCustomerRepActive(customerrep);
}
else if(tempAct instanceof ReleasePlanningMeetingAction)
{
((ReleasePlanningMeetingAction)tempAct).setDeveloperActive(customerrep);
((ReleasePlanningMeetingAction)tempAct).setManagerActive(customerrep);
((ReleasePlanningMeetingAction)tempAct).setCustomerRepActive(customerrep);
}
else if(tempAct instanceof StartIterationAction)
{
((StartIterationAction)tempAct).setEmpActive(customerrep);
((StartIterationAction)tempAct).setCustomerRepActive(customerrep);
}
else if(tempAct instanceof IterationPlanningMeetingAction)
{
((IterationPlanningMeetingAction)tempAct).setDeveloperActive(customerrep);
((IterationPlanningMeetingAction)tempAct).setCustomerRepActive(customerrep);
}
else if(tempAct instanceof ChooseUserStoriesForIterationAction)
{
((ChooseUserStoriesForIterationAction)tempAct).setEmpActive(customerrep);
}
else if(tempAct instanceof CreateProgrammingTasksAction)
{
((CreateProgrammingTasksAction)tempAct).setEmpActive(customerrep);
}
else if(tempAct instanceof CreateAcceptanceTestsAction)
{
((CreateAcceptanceTestsAction)tempAct).setDeveloperActive(customerrep);
((CreateAcceptanceTestsAction)tempAct).setCustRepActive(customerrep);
}
else if(tempAct instanceof DesignAction)
{
((DesignAction)tempAct).setDeveloperActive(customerrep);
}
else if(tempAct instanceof CreateUnitTestsAction)
{
((CreateUnitTestsAction)tempAct).setDeveloperActive(customerrep);
}
else if(tempAct instanceof LearnCodingStandardAction)
{
((LearnCodingStandardAction)tempAct).setDeveloperActive(customerrep);
}
else if(tempAct instanceof ProgramAction)
{
((ProgramAction)tempAct).setDeveloperActive(customerrep);
}
else if(tempAct instanceof PairProgramRobertJoyceAction)
{
((PairProgramRobertJoyceAction)tempAct).setRobertActive(customerrep);
((PairProgramRobertJoyceAction)tempAct).setJoyceActive(customerrep);
}
else if(tempAct instanceof PairProgramTimothyRedaAction)
{
((PairProgramTimothyRedaAction)tempAct).setTimothyActive(customerrep);
((PairProgramTimothyRedaAction)tempAct).setRedaActive(customerrep);
}
else if(tempAct instanceof PairProgramPegSigfreidoAction)
{
((PairProgramPegSigfreidoAction)tempAct).setPegActive(customerrep);
((PairProgramPegSigfreidoAction)tempAct).setSigfreidoActive(customerrep);
}
else if(tempAct instanceof UnitTestingAndFixingAction)
{
((UnitTestingAndFixingAction)tempAct).setEmpActive(customerrep);
}
else if(tempAct instanceof RefactorAction)
{
((RefactorAction)tempAct).setEmpActive(customerrep);
}
else if(tempAct instanceof IntegrateRobertJoyceAction)
{
((IntegrateRobertJoyceAction)tempAct).setRobertActive(customerrep);
((IntegrateRobertJoyceAction)tempAct).setJoyceActive(customerrep);
}
else if(tempAct instanceof IntegrateTimothyRedaAction)
{
((IntegrateTimothyRedaAction)tempAct).setTimothyActive(customerrep);
((IntegrateTimothyRedaAction)tempAct).setRedaActive(customerrep);
}
else if(tempAct instanceof IntegratePegSigfreidoAction)
{
((IntegratePegSigfreidoAction)tempAct).setPegActive(customerrep);
((IntegratePegSigfreidoAction)tempAct).setSigfreidoActive(customerrep);
}
else if(tempAct instanceof IntegrateAction)
{
((IntegrateAction)tempAct).setEmpActive(customerrep);
}
else if(tempAct instanceof AcceptanceTestingAction)
{
((AcceptanceTestingAction)tempAct).setEmpActive(customerrep);
}
else if(tempAct instanceof ReleaseCodeAndEndIterationAction)
{
((ReleaseCodeAndEndIterationAction)tempAct).setEmpActive(customerrep);
}
else if(tempAct instanceof UpdateUserStoriesAttributesAction)
{
}
else if(tempAct instanceof SetEmployeeProductivitiesAction)
{
((SetEmployeeProductivitiesAction)tempAct).setEmpActive(customerrep);
}
else if(tempAct instanceof UpdateProjectAttributesAction)
{
((UpdateProjectAttributesAction)tempAct).setEmpActive(customerrep);
}
else if(tempAct instanceof RequireReleasePlanDoOverAction)
{
if(tempAct.equals(requirereleaseplandooverAct) == false)
{
((RequireReleasePlanDoOverAction)tempAct).setEmpActive(customerrep);
((RequireReleasePlanDoOverAction)tempAct).setCustRepActive(customerrep);
}
}
else if(tempAct instanceof CustomerComplainsAction)
{
((CustomerComplainsAction)tempAct).setCustRepActive(customerrep);
}
else if(tempAct instanceof AllEmployeesIdleAction)
{
((AllEmployeesIdleAction)tempAct).setEmpActive(customerrep);
}
else if(tempAct instanceof DeliverFinalProductToCustomerAction)
{
((DeliverFinalProductToCustomerAction)tempAct).setEmpActive(customerrep);
}
else if(tempAct instanceof WarnOfImpendingDeadlineAction)
{
((WarnOfImpendingDeadlineAction)tempAct).setEmpActive(customerrep);
}
else if(tempAct instanceof GameOverAction)
{
((GameOverAction)tempAct).setEmpActive(customerrep);
}
}
}
}
}
}
}
}
}
// SetCustomerComplaining rule (CustomerComplains Action):
private void setCustomerComplaining(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CustomerComplainsAction>customercomplainsActs = state.getActionStateRepository().getCustomerComplainsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetCustomerComplaining")))
{
for(int i=0; i<customercomplainsActs.size(); i++)
{
CustomerComplainsAction customercomplainsAct = customercomplainsActs.elementAt(i);
if(customercomplainsAct == action)
{
if((customercomplainsAct.getAllCustReps().size() >= 1) && (customercomplainsAct.getAllProjs().size() >= 1))
{
Vector <Employee> custreps = customercomplainsAct.getAllActiveCustReps();
for(int j=0; j<custreps.size(); j++)
{
Employee custrep2 = custreps.elementAt(j);
if(custrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)custrep2;
}
}
Vector <Project> projs = customercomplainsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setCustomerComplaining(true);
}
}
}
}
}
}
}
// SetCustomerNotComplaining rule (CustomerComplains Action):
private void setCustomerNotComplaining(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<CustomerComplainsAction>customercomplainsActs = state.getActionStateRepository().getCustomerComplainsActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetCustomerNotComplaining")))
{
for(int i=0; i<customercomplainsActs.size(); i++)
{
CustomerComplainsAction customercomplainsAct = customercomplainsActs.elementAt(i);
if(customercomplainsAct == action)
{
if((customercomplainsAct.getAllCustReps().size() >= 1) && (customercomplainsAct.getAllProjs().size() >= 1))
{
Vector <Employee> custreps = customercomplainsAct.getAllActiveCustReps();
for(int j=0; j<custreps.size(); j++)
{
Employee custrep2 = custreps.elementAt(j);
if(custrep2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)custrep2;
}
}
Vector <Project> projs = customercomplainsAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setCustomerComplaining(false);
}
}
}
}
}
}
}
// SetPerfectScore rule (DeliverFinalProductToCustomer Action):
private void setPerfectScore(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<DeliverFinalProductToCustomerAction>deliverfinalproducttocustomerActs = state.getActionStateRepository().getDeliverFinalProductToCustomerActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("SetPerfectScore")))
{
for(int i=0; i<deliverfinalproducttocustomerActs.size(); i++)
{
DeliverFinalProductToCustomerAction deliverfinalproducttocustomerAct = deliverfinalproducttocustomerActs.elementAt(i);
if(deliverfinalproducttocustomerAct == action)
{
if((deliverfinalproducttocustomerAct.getAllEmps().size() >= 1) && (deliverfinalproducttocustomerAct.getAllProjs().size() >= 1) && (deliverfinalproducttocustomerAct.getAllUserStoriess().size() >= 1) && (deliverfinalproducttocustomerAct.getAllAcceptanceTestss().size() >= 1))
{
Vector <Employee> emps = deliverfinalproducttocustomerAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
else if(emp2 instanceof Manager)
{
Manager manager = (Manager)emp2;
}
else if(emp2 instanceof CustomerRep)
{
CustomerRep customerrep = (CustomerRep)emp2;
}
}
Vector <Project> projs = deliverfinalproducttocustomerAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
theproject.setScore((double)(100));
}
}
Vector <Artifact> userstoriess = deliverfinalproducttocustomerAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
Vector <Artifact> acceptancetestss = deliverfinalproducttocustomerAct.getAllActiveAcceptanceTestss();
for(int j=0; j<acceptancetestss.size(); j++)
{
Artifact acceptancetests2 = acceptancetestss.elementAt(j);
if(acceptancetests2 instanceof AcceptanceTests)
{
AcceptanceTests acceptancetests = (AcceptanceTests)acceptancetests2;
}
}
}
}
}
}
}
// CalculateScore rule (GameOver Action):
private void calculateScore(JFrame gui, int updateInstructions, String ruleName, simse.adts.actions.Action action) {
Vector<GameOverAction>gameoverActs = state.getActionStateRepository().getGameOverActionStateRepository().getAllActions();
if((updateInstructions ==UPDATE_ONE) && (ruleName.equals("CalculateScore")))
{
for(int i=0; i<gameoverActs.size(); i++)
{
GameOverAction gameoverAct = gameoverActs.elementAt(i);
if(gameoverAct == action)
{
if((gameoverAct.getAllEmps().size() >= 1) && (gameoverAct.getAllProjs().size() >= 1) && (gameoverAct.getAllUserStoriess().size() >= 1))
{
Vector <Employee> emps = gameoverAct.getAllActiveEmps();
for(int j=0; j<emps.size(); j++)
{
Employee emp2 = emps.elementAt(j);
if(emp2 instanceof SoftwareDeveloper)
{
SoftwareDeveloper softwaredeveloper = (SoftwareDeveloper)emp2;
}
}
Vector <Project> projs = gameoverAct.getAllActiveProjs();
for(int j=0; j<projs.size(); j++)
{
Project proj2 = projs.elementAt(j);
if(proj2 instanceof TheProject)
{
TheProject theproject = (TheProject)proj2;
double allActiveUserStoriesUserStoriesNumUserStoriesIntegrated = 0;
Vector allActiveUserStoriess = gameoverAct.getAllActiveUserStoriess();
for(int k=0; k<allActiveUserStoriess.size(); k++)
{
Object userstories3 = allActiveUserStoriess.elementAt(k);
if(userstories3 instanceof UserStories)
{
allActiveUserStoriesUserStoriesNumUserStoriesIntegrated += (double)(((UserStories)userstories3).getNumUserStoriesIntegrated());
}
}
double allActiveUserStoriesUserStoriesPercentErroneous = 0;
for(int k=0; k<allActiveUserStoriess.size(); k++)
{
Object userstories3 = allActiveUserStoriess.elementAt(k);
if(userstories3 instanceof UserStories)
{
allActiveUserStoriesUserStoriesPercentErroneous += (double)(((UserStories)userstories3).getPercentErroneous());
}
}
theproject.setScore((double)(( ( allActiveUserStoriesUserStoriesNumUserStoriesIntegrated / 80 ) * 100 ) - allActiveUserStoriesUserStoriesPercentErroneous));
}
}
Vector <Artifact> userstoriess = gameoverAct.getAllActiveUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact userstories2 = userstoriess.elementAt(j);
if(userstories2 instanceof UserStories)
{
UserStories userstories = (UserStories)userstories2;
}
}
}
}
}
}
}
private void checkAllMins(JFrame parent)
{
Vector<simse.adts.actions.Action> actions = state.getActionStateRepository().getAllActions();
for(int i=0; i<actions.size(); i++)
{
simse.adts.actions.Action act = actions.elementAt(i);
if(act instanceof CreateUserStoriesAction)
{
CreateUserStoriesAction b = (CreateUserStoriesAction)act;
if((b.getAllDevelopers().size() < 1) || (b.getAllCustomerReps().size() < 1) || (b.getAllUserStoriess().size() < 1) || (b.getAllProjs().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've finished creating user stories.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've finished creating user stories.");
}
}
update(parent, UPDATE_ONE, "SetIdleCreateUS", b);
state.getActionStateRepository().getCreateUserStoriesActionStateRepository().remove(b);
}
}
else if(act instanceof ReleasePlanningMeetingAction)
{
ReleasePlanningMeetingAction b = (ReleasePlanningMeetingAction)act;
if((b.getAllDevelopers().size() < 1) || (b.getAllManagers().size() < -999999) || (b.getAllCustomerReps().size() < -999999) || (b.getAllReleasePlans().size() < 1) || (b.getAllUserStoriess().size() < 1) || (b.getAllProjs().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've finished the release planning meeting, and produced a release plan, which specifies which user stories are going to be implemented for each system release and dates for those releases.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've finished the release planning meeting, and produced a release plan, which specifies which user stories are going to be implemented for each system release and dates for those releases.");
}
}
update(parent, UPDATE_ONE, "SetUserStoriesPrioritized", b);
update(parent, UPDATE_ONE, "SetIdleReleaseMtg", b);
state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().remove(b);
}
}
else if(act instanceof StartIterationAction)
{
StartIterationAction b = (StartIterationAction)act;
if((b.getAllEmps().size() < 6) || (b.getAllProjs().size() < 1) || (b.getAllReleasePlans().size() < 1) || (b.getAllUserStoriess().size() < 1) || (b.getAllIterationPlans().size() < 1) || (b.getAllDesigns().size() < 1) || (b.getAllUnitTestss().size() < 1) || (b.getAllAcceptanceTestss().size() < 1) || (b.getAllCodes().size() < 1) || (b.getAllCustomerReps().size() < 1))
{
state.getActionStateRepository().getStartIterationActionStateRepository().remove(b);
}
}
else if(act instanceof IterationPlanningMeetingAction)
{
IterationPlanningMeetingAction b = (IterationPlanningMeetingAction)act;
if((b.getAllDevelopers().size() < 1) || (b.getAllCustomerReps().size() < 1) || (b.getAllIterationPlans().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllReleasePlans().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We have completed the iteration plan and adjourned the meeting.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We have completed the iteration plan and adjourned the meeting.");
}
}
update(parent, UPDATE_ONE, "SetIdleIterationMtg", b);
state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().remove(b);
}
}
else if(act instanceof ChooseUserStoriesForIterationAction)
{
ChooseUserStoriesForIterationAction b = (ChooseUserStoriesForIterationAction)act;
if((b.getAllEmps().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllIterationPlans().size() < 1) || (b.getAllReleasePlans().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We have chosen about 20 user stories to be completed in this iteration.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We have chosen about 20 user stories to be completed in this iteration.");
}
}
update(parent, UPDATE_ONE, "SetUserStoriesChosen", b);
state.getActionStateRepository().getChooseUserStoriesForIterationActionStateRepository().remove(b);
}
}
else if(act instanceof CreateProgrammingTasksAction)
{
CreateProgrammingTasksAction b = (CreateProgrammingTasksAction)act;
if((b.getAllEmps().size() < 1) || (b.getAllIterationPlans().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllReleasePlans().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We have finished creating and signing up for programming tasks.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We have finished creating and signing up for programming tasks.");
}
}
update(parent, UPDATE_ONE, "SetProgrammingTasksChosen", b);
state.getActionStateRepository().getCreateProgrammingTasksActionStateRepository().remove(b);
}
}
else if(act instanceof CreateAcceptanceTestsAction)
{
CreateAcceptanceTestsAction b = (CreateAcceptanceTestsAction)act;
if((b.getAllDevelopers().size() < 1) || (b.getAllCustReps().size() < -999999) || (b.getAllTestss().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllReleasePlans().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've finished creating the acceptance tests");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've finished creating the acceptance tests");
}
}
update(parent, UPDATE_ONE, "SetAccTestsCreated", b);
update(parent, UPDATE_ONE, "UpdateNumActsCreateATDest", b);
update(parent, UPDATE_ONE, "SetIdleCreateAccTests", b);
state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().remove(b);
}
}
else if(act instanceof DesignAction)
{
DesignAction b = (DesignAction)act;
if((b.getAllDevelopers().size() < 1) || (b.getAllCRCCardss().size() < 1) || (b.getAllDesigns().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllAssociatedUserStoriess().size() < 1) || (b.getAllReleasePlans().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("I've stopped designing.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("I've stopped designing.");
}
}
update(parent, UPDATE_ONE, "UpdateNumActsDesignDest", b);
update(parent, UPDATE_ONE, "SetIdleDesign", b);
state.getActionStateRepository().getDesignActionStateRepository().remove(b);
}
}
else if(act instanceof CreateUnitTestsAction)
{
CreateUnitTestsAction b = (CreateUnitTestsAction)act;
if((b.getAllDevelopers().size() < 1) || (b.getAllTestss().size() < 1) || (b.getAllTestingFrameworks().size() < -999999) || (b.getAllProjs().size() < 1) || (b.getAllAssociatedDesigns().size() < 1) || (b.getAllReleasePlans().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've finished creating unit tests.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've finished creating unit tests.");
}
}
update(parent, UPDATE_ONE, "SetUnitTestsCreated", b);
update(parent, UPDATE_ONE, "UpdateNumActsCreateUTDest", b);
update(parent, UPDATE_ONE, "SetIdleCreateUT", b);
state.getActionStateRepository().getCreateUnitTestsActionStateRepository().remove(b);
}
}
else if(act instanceof LearnCodingStandardAction)
{
LearnCodingStandardAction b = (LearnCodingStandardAction)act;
if((b.getAllDevelopers().size() < 1) || (b.getAllCodingStandards().size() < 1) || (b.getAllProjs().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("I've stopped learning the coding standard");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("I've stopped learning the coding standard");
}
}
update(parent, UPDATE_ONE, "SetKnowsCodingStandard", b);
update(parent, UPDATE_ONE, "SetIdleLearnStd", b);
state.getActionStateRepository().getLearnCodingStandardActionStateRepository().remove(b);
}
}
else if(act instanceof ProgramAction)
{
ProgramAction b = (ProgramAction)act;
if((b.getAllDevelopers().size() < 1) || (b.getAllCodes().size() < 1) || (b.getAllCodingStandards().size() < 1) || (b.getAllAssociatedDesigns().size() < 1) || (b.getAllAssociatedUnitTestss().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllAssociatedUserStoriess().size() < 1) || (b.getAllReleasePlans().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("I've finished programming!");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("I've finished programming!");
}
}
update(parent, UPDATE_ONE, "SetNotProgrammingProgramDest", b);
update(parent, UPDATE_ONE, "UpdateNumActsProgramDest", b);
update(parent, UPDATE_ONE, "SetIdleProgram", b);
state.getActionStateRepository().getProgramActionStateRepository().remove(b);
}
}
else if(act instanceof PairProgramRobertJoyceAction)
{
PairProgramRobertJoyceAction b = (PairProgramRobertJoyceAction)act;
if((b.getAllRoberts().size() < 1) || (b.getAllJoyces().size() < 1) || (b.getAllCodes().size() < 1) || (b.getAllCodingStandards().size() < 1) || (b.getAllAssociatedDesigns().size() < 1) || (b.getAllAssociatedUnitTestss().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllAssociatedUserStoriess().size() < 1) || (b.getAllReleasePlans().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've finished pair programming.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've finished pair programming.");
}
}
update(parent, UPDATE_ONE, "SetNotProgrammingPairProgramRJDest", b);
update(parent, UPDATE_ONE, "UpdateNumActsPairProgRJDest", b);
update(parent, UPDATE_ONE, "SetIdlePairProgRJ", b);
state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().remove(b);
}
}
else if(act instanceof PairProgramTimothyRedaAction)
{
PairProgramTimothyRedaAction b = (PairProgramTimothyRedaAction)act;
if((b.getAllTimothys().size() < 1) || (b.getAllRedas().size() < 1) || (b.getAllCodes().size() < 1) || (b.getAllCodingStandards().size() < 1) || (b.getAllAssociatedDesigns().size() < 1) || (b.getAllAssociatedUnitTestss().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllAssociatedUserStoriess().size() < 1) || (b.getAllReleasePlans().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've finished pair programming.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've finished pair programming.");
}
}
update(parent, UPDATE_ONE, "SetNotProgrammingPairProgramTRDest", b);
update(parent, UPDATE_ONE, "UpdateNumActsPairProgTRDest", b);
update(parent, UPDATE_ONE, "SetIdlePairProgTR", b);
state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().remove(b);
}
}
else if(act instanceof PairProgramPegSigfreidoAction)
{
PairProgramPegSigfreidoAction b = (PairProgramPegSigfreidoAction)act;
if((b.getAllPegs().size() < 1) || (b.getAllSigfreidos().size() < 1) || (b.getAllCodes().size() < 1) || (b.getAllCodingStandards().size() < 1) || (b.getAllAssociatedDesigns().size() < 1) || (b.getAllAssociatedUnitTestss().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllAssociatedUserStoriess().size() < 1) || (b.getAllReleasePlans().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've finished pair programming.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've finished pair programming.");
}
}
update(parent, UPDATE_ONE, "SetNotProgrammingPairProgramPSDest", b);
update(parent, UPDATE_ONE, "UpdateNumActsPairProgPSDest", b);
update(parent, UPDATE_ONE, "SetIdlePairProgPS", b);
state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().remove(b);
}
}
else if(act instanceof UnitTestingAndFixingAction)
{
UnitTestingAndFixingAction b = (UnitTestingAndFixingAction)act;
if((b.getAllEmps().size() < 1) || (b.getAllCodes().size() < 1) || (b.getAllUnitTestss().size() < 1) || (b.getAllTestingTools().size() < -999999) || (b.getAllProjs().size() < 1) || (b.getAllAcceptanceTestss().size() < 1) || (b.getAllReleasePlans().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("I've finished unit testing and fixing");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("I've finished unit testing and fixing");
}
}
update(parent, UPDATE_ONE, "UpdateNumActsUTDest", b);
update(parent, UPDATE_ONE, "SetIdleUTFix", b);
state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().remove(b);
}
}
else if(act instanceof RefactorAction)
{
RefactorAction b = (RefactorAction)act;
if((b.getAllEmps().size() < 1) || (b.getAllCodes().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllRefactoringTools().size() < -999999) || (b.getAllReleasePlans().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("I'm finished refactoring the code");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("I'm finished refactoring the code");
}
}
update(parent, UPDATE_ONE, "UpdateNumActsRefactorDest", b);
update(parent, UPDATE_ONE, "SetIdleRefactor", b);
state.getActionStateRepository().getRefactorActionStateRepository().remove(b);
}
}
else if(act instanceof IntegrateRobertJoyceAction)
{
IntegrateRobertJoyceAction b = (IntegrateRobertJoyceAction)act;
if((b.getAllRoberts().size() < 1) || (b.getAllJoyces().size() < 1) || (b.getAllCodes().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllAssociatedUserStoriess().size() < 1) || (b.getAllReleasePlans().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've finished integrating our code with the rest of the system.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've finished integrating our code with the rest of the system.");
}
}
update(parent, UPDATE_ONE, "SetNotIntegratingRJ", b);
update(parent, UPDATE_ONE, "UpdateNumActsIntegrateRJDest", b);
update(parent, UPDATE_ONE, "SetIdleIntRJ", b);
state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().remove(b);
}
}
else if(act instanceof IntegrateTimothyRedaAction)
{
IntegrateTimothyRedaAction b = (IntegrateTimothyRedaAction)act;
if((b.getAllTimothys().size() < 1) || (b.getAllRedas().size() < 1) || (b.getAllCodes().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllAssociatedUserStoriess().size() < 1) || (b.getAllReleasePlans().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've finished integrating our code with the rest of the system.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've finished integrating our code with the rest of the system.");
}
}
update(parent, UPDATE_ONE, "SetNotIntegratingTR", b);
update(parent, UPDATE_ONE, "UpdateNumActsIntegrateTRDest", b);
update(parent, UPDATE_ONE, "SetIdleIntTR", b);
state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().remove(b);
}
}
else if(act instanceof IntegratePegSigfreidoAction)
{
IntegratePegSigfreidoAction b = (IntegratePegSigfreidoAction)act;
if((b.getAllPegs().size() < 1) || (b.getAllSigfreidos().size() < 1) || (b.getAllCodes().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllAssociatedUserStoriess().size() < 1) || (b.getAllReleasePlans().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've finished integrating our code with the rest of the system.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've finished integrating our code with the rest of the system.");
}
}
update(parent, UPDATE_ONE, "SetNotIntegratingPS", b);
update(parent, UPDATE_ONE, "UpdateNumActsIntegratePSDest", b);
update(parent, UPDATE_ONE, "SetIdleIntPS", b);
state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().remove(b);
}
}
else if(act instanceof IntegrateAction)
{
IntegrateAction b = (IntegrateAction)act;
if((b.getAllEmps().size() < 1) || (b.getAllCodes().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllAssociatedUserStoriess().size() < 1) || (b.getAllReleasePlans().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("I've stopped integrating");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("I've stopped integrating");
}
}
update(parent, UPDATE_ONE, "SetNotIntegrating", b);
update(parent, UPDATE_ONE, "UpdateNumActsIntegrateDest", b);
update(parent, UPDATE_ONE, "SetIdleIntegrate", b);
state.getActionStateRepository().getIntegrateActionStateRepository().remove(b);
}
}
else if(act instanceof AcceptanceTestingAction)
{
AcceptanceTestingAction b = (AcceptanceTestingAction)act;
if((b.getAllEmps().size() < 1) || (b.getAllCusts().size() < 1) || (b.getAllAcceptanceTestCasess().size() < 1) || (b.getAllUserStoriess().size() < 1) || (b.getAllCodes().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllReleasePlans().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("Hooray! All acceptance tests passed! We can release the code and end this iteration.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("Hooray! All acceptance tests passed! We can release the code and end this iteration.");
}
}
update(parent, UPDATE_ONE, "SetNotAcceptanceTesting", b);
update(parent, UPDATE_ONE, "SetNumFailedTests", b);
update(parent, UPDATE_ONE, "SetCodePcntErroneousAccTesting", b);
update(parent, UPDATE_ONE, "SetUSPcntErroneousAccTesting", b);
update(parent, UPDATE_ONE, "SetCustomerInvolvedAccTestDest", b);
update(parent, UPDATE_ONE, "SetIdleAccTest", b);
state.getActionStateRepository().getAcceptanceTestingActionStateRepository().remove(b);
}
}
else if(act instanceof ReleaseCodeAndEndIterationAction)
{
ReleaseCodeAndEndIterationAction b = (ReleaseCodeAndEndIterationAction)act;
if((b.getAllEmps().size() < 1) || (b.getAllCodes().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllAcceptanceTestss().size() < 1) || (b.getAllReleasePlans().size() < 1) || (b.getAllUserStoriess().size() < 1))
{
state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().remove(b);
}
}
else if(act instanceof UpdateUserStoriesAttributesAction)
{
UpdateUserStoriesAttributesAction b = (UpdateUserStoriesAttributesAction)act;
if((b.getAllUserStoriess().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllCodes().size() < 1))
{
state.getActionStateRepository().getUpdateUserStoriesAttributesActionStateRepository().remove(b);
}
}
else if(act instanceof SetEmployeeProductivitiesAction)
{
SetEmployeeProductivitiesAction b = (SetEmployeeProductivitiesAction)act;
if((b.getAllEmps().size() < 1) || (b.getAllProjs().size() < 1))
{
state.getActionStateRepository().getSetEmployeeProductivitiesActionStateRepository().remove(b);
}
}
else if(act instanceof UpdateProjectAttributesAction)
{
UpdateProjectAttributesAction b = (UpdateProjectAttributesAction)act;
if((b.getAllProjs().size() < 1) || (b.getAllEmps().size() < 1))
{
state.getActionStateRepository().getUpdateProjectAttributesActionStateRepository().remove(b);
}
}
else if(act instanceof RequireReleasePlanDoOverAction)
{
RequireReleasePlanDoOverAction b = (RequireReleasePlanDoOverAction)act;
if((b.getAllEmps().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllReleasePlans().size() < 1) || (b.getAllCustReps().size() < 1))
{
update(parent, UPDATE_ONE, "ReactivateOtherActions", b);
state.getActionStateRepository().getRequireReleasePlanDoOverActionStateRepository().remove(b);
}
}
else if(act instanceof CustomerComplainsAction)
{
CustomerComplainsAction b = (CustomerComplainsAction)act;
if((b.getAllCustReps().size() < 1) || (b.getAllProjs().size() < 1))
{
update(parent, UPDATE_ONE, "SetCustomerNotComplaining", b);
state.getActionStateRepository().getCustomerComplainsActionStateRepository().remove(b);
}
}
else if(act instanceof AllEmployeesIdleAction)
{
AllEmployeesIdleAction b = (AllEmployeesIdleAction)act;
if((b.getAllEmps().size() < 6) || (b.getAllProjs().size() < 1))
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("I'm bored... I'll just sit here and play solitaire 'til you tell me what to do.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("I'm bored... I'll just sit here and play solitaire 'til you tell me what to do.");
}
}
state.getActionStateRepository().getAllEmployeesIdleActionStateRepository().remove(b);
}
}
else if(act instanceof DeliverFinalProductToCustomerAction)
{
DeliverFinalProductToCustomerAction b = (DeliverFinalProductToCustomerAction)act;
if((b.getAllEmps().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllUserStoriess().size() < 1) || (b.getAllAcceptanceTestss().size() < 1))
{
state.getActionStateRepository().getDeliverFinalProductToCustomerActionStateRepository().remove(b);
}
}
else if(act instanceof WarnOfImpendingDeadlineAction)
{
WarnOfImpendingDeadlineAction b = (WarnOfImpendingDeadlineAction)act;
if((b.getAllEmps().size() < 1) || (b.getAllProjs().size() < 1))
{
state.getActionStateRepository().getWarnOfImpendingDeadlineActionStateRepository().remove(b);
}
}
else if(act instanceof GameOverAction)
{
GameOverAction b = (GameOverAction)act;
if((b.getAllEmps().size() < 1) || (b.getAllProjs().size() < 1) || (b.getAllUserStoriess().size() < 1))
{
state.getActionStateRepository().getGameOverActionStateRepository().remove(b);
}
}
}
}
}