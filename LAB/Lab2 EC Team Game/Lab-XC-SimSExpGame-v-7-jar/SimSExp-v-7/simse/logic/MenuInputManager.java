/* File generated by: simse.codegenerator.logicgenerator.MenuInputManagerGenerator */
package simse.logic;
import simse.state.*;
import simse.gui.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import simse.logic.dialogs.*;
import java.util.*;
import javax.swing.*;
public class MenuInputManager
{
private State state;
private TriggerChecker trigChecker;
private DestroyerChecker destChecker;
private RuleExecutor ruleExec;
public MenuInputManager(State s, TriggerChecker t, DestroyerChecker d, RuleExecutor r)
{
state = s;
trigChecker = t;
destChecker = d;
ruleExec = r;
}
public void menuItemSelected(Employee e, String s, JFrame parent)
{
boolean hasStr = false;
Vector<String> menu = e.getMenu();
for(int i=0; i<menu.size(); i++)
{
String menuItem = menu.elementAt(i);
if(menuItem.equals(s))
{
hasStr = true;
break;
}
}
if(!hasStr)
{
}
else
{
if(s.equals("Everyone stop what you're doing"))
{
int choice = JOptionPane.showConfirmDialog(null, ("Are you sure you want everyone to stop what they're doing?"), "Confirm Activities Ending", JOptionPane.YES_NO_OPTION);
if(choice == JOptionPane.YES_OPTION)
{
Vector<Employee> allEmps = state.getEmployeeStateRepository().getAll();
for(int z=0; z<allEmps.size(); z++)
{
Employee emp = allEmps.elementAt(z);
// Stop designing:
Vector<DesignAction> allActions0 = state.getActionStateRepository().getDesignActionStateRepository().getAllActions();
int a0 = 0;
for(int i=0; i<allActions0.size(); i++)
{
DesignAction b0 = allActions0.elementAt(i);
if(b0.getAllParticipants().contains(emp))
{
a0++;
}
}
if(a0 == 1)
{
for(int i=0; i<allActions0.size(); i++)
{
DesignAction b0 = allActions0.elementAt(i);
if(b0.getAllDevelopers().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsDesignDest", b0);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleDesign", b0);
b0.removeDeveloper(emp);
emp.setOverheadText("I've stopped designing.");
if(b0.getAllDevelopers().size() < 1)
{
Vector<SSObject> c0 = b0.getAllParticipants();
for(int j=0; j<c0.size(); j++)
{
SSObject d0 = c0.elementAt(j);
if(d0 instanceof Employee)
{
((Employee)d0).setOverheadText("I've stopped designing.");
}
else if(d0 instanceof Customer)
{
((Customer)d0).setOverheadText("I've stopped designing.");
}
}
state.getActionStateRepository().getDesignActionStateRepository().remove(b0);
}
}
}
}
else if(a0 > 1)
{
Vector<DesignAction> b0 = new Vector<DesignAction>();
for(int i=0; i<allActions0.size(); i++)
{
DesignAction c0 = (DesignAction)allActions0.elementAt(i);
if((c0.getAllDevelopers().contains(emp)) && (!(b0.contains(c0))))
{
b0.add(c0);
}
}
new ChooseActionToDestroyDialog(parent, b0, state, emp, ruleExec, s);
}
// Stop creating unit tests:
Vector<CreateUnitTestsAction> allActions1 = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions();
int a1 = 0;
for(int i=0; i<allActions1.size(); i++)
{
CreateUnitTestsAction b1 = allActions1.elementAt(i);
if(b1.getAllParticipants().contains(emp))
{
a1++;
}
}
if(a1 == 1)
{
for(int i=0; i<allActions1.size(); i++)
{
CreateUnitTestsAction b1 = allActions1.elementAt(i);
if(b1.getAllDevelopers().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetUnitTestsCreated", b1);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsCreateUTDest", b1);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleCreateUT", b1);
b1.removeDeveloper(emp);
emp.setOverheadText("I've stopped creating unit tests.");
if(b1.getAllDevelopers().size() < 1)
{
Vector<SSObject> c1 = b1.getAllParticipants();
for(int j=0; j<c1.size(); j++)
{
SSObject d1 = c1.elementAt(j);
if(d1 instanceof Employee)
{
((Employee)d1).setOverheadText("I've stopped creating unit tests.");
}
else if(d1 instanceof Customer)
{
((Customer)d1).setOverheadText("I've stopped creating unit tests.");
}
}
state.getActionStateRepository().getCreateUnitTestsActionStateRepository().remove(b1);
}
}
}
}
else if(a1 > 1)
{
Vector<CreateUnitTestsAction> b1 = new Vector<CreateUnitTestsAction>();
for(int i=0; i<allActions1.size(); i++)
{
CreateUnitTestsAction c1 = (CreateUnitTestsAction)allActions1.elementAt(i);
if((c1.getAllDevelopers().contains(emp)) && (!(b1.contains(c1))))
{
b1.add(c1);
}
}
new ChooseActionToDestroyDialog(parent, b1, state, emp, ruleExec, s);
}
// Stop learning coding standard:
Vector<LearnCodingStandardAction> allActions2 = state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions();
int a2 = 0;
for(int i=0; i<allActions2.size(); i++)
{
LearnCodingStandardAction b2 = allActions2.elementAt(i);
if(b2.getAllParticipants().contains(emp))
{
a2++;
}
}
if(a2 == 1)
{
for(int i=0; i<allActions2.size(); i++)
{
LearnCodingStandardAction b2 = allActions2.elementAt(i);
if(b2.getAllDevelopers().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetKnowsCodingStandard", b2);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleLearnStd", b2);
b2.removeDeveloper(emp);
emp.setOverheadText("I've stopped learning the coding standard");
if(b2.getAllDevelopers().size() < 1)
{
Vector<SSObject> c2 = b2.getAllParticipants();
for(int j=0; j<c2.size(); j++)
{
SSObject d2 = c2.elementAt(j);
if(d2 instanceof Employee)
{
((Employee)d2).setOverheadText("I've stopped learning the coding standard");
}
else if(d2 instanceof Customer)
{
((Customer)d2).setOverheadText("I've stopped learning the coding standard");
}
}
state.getActionStateRepository().getLearnCodingStandardActionStateRepository().remove(b2);
}
}
}
}
else if(a2 > 1)
{
Vector<LearnCodingStandardAction> b2 = new Vector<LearnCodingStandardAction>();
for(int i=0; i<allActions2.size(); i++)
{
LearnCodingStandardAction c2 = (LearnCodingStandardAction)allActions2.elementAt(i);
if((c2.getAllDevelopers().contains(emp)) && (!(b2.contains(c2))))
{
b2.add(c2);
}
}
new ChooseActionToDestroyDialog(parent, b2, state, emp, ruleExec, s);
}
// Stop programming:
Vector<ProgramAction> allActions3 = state.getActionStateRepository().getProgramActionStateRepository().getAllActions();
int a3 = 0;
for(int i=0; i<allActions3.size(); i++)
{
ProgramAction b3 = allActions3.elementAt(i);
if(b3.getAllParticipants().contains(emp))
{
a3++;
}
}
if(a3 == 1)
{
for(int i=0; i<allActions3.size(); i++)
{
ProgramAction b3 = allActions3.elementAt(i);
if(b3.getAllDevelopers().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotProgrammingProgramDest", b3);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsProgramDest", b3);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleProgram", b3);
b3.removeDeveloper(emp);
emp.setOverheadText("I've stopped programming.");
if(b3.getAllDevelopers().size() < 1)
{
Vector<SSObject> c3 = b3.getAllParticipants();
for(int j=0; j<c3.size(); j++)
{
SSObject d3 = c3.elementAt(j);
if(d3 instanceof Employee)
{
((Employee)d3).setOverheadText("I've stopped programming.");
}
else if(d3 instanceof Customer)
{
((Customer)d3).setOverheadText("I've stopped programming.");
}
}
state.getActionStateRepository().getProgramActionStateRepository().remove(b3);
}
}
}
}
else if(a3 > 1)
{
Vector<ProgramAction> b3 = new Vector<ProgramAction>();
for(int i=0; i<allActions3.size(); i++)
{
ProgramAction c3 = (ProgramAction)allActions3.elementAt(i);
if((c3.getAllDevelopers().contains(emp)) && (!(b3.contains(c3))))
{
b3.add(c3);
}
}
new ChooseActionToDestroyDialog(parent, b3, state, emp, ruleExec, s);
}
// Stop pair programming (Robert and Joyce):
Vector<PairProgramRobertJoyceAction> allActions4 = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions();
int a4 = 0;
for(int i=0; i<allActions4.size(); i++)
{
PairProgramRobertJoyceAction b4 = allActions4.elementAt(i);
if(b4.getAllParticipants().contains(emp))
{
a4++;
}
}
if(a4 == 1)
{
for(int i=0; i<allActions4.size(); i++)
{
PairProgramRobertJoyceAction b4 = allActions4.elementAt(i);
if(b4.getAllRoberts().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramRJDest", b4);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgRJDest", b4);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdlePairProgRJ", b4);
b4.removeRobert(emp);
emp.setOverheadText("We've stopped pair programming.");
if(b4.getAllRoberts().size() < 1)
{
Vector<SSObject> c4 = b4.getAllParticipants();
for(int j=0; j<c4.size(); j++)
{
SSObject d4 = c4.elementAt(j);
if(d4 instanceof Employee)
{
((Employee)d4).setOverheadText("We've stopped pair programming.");
}
else if(d4 instanceof Customer)
{
((Customer)d4).setOverheadText("We've stopped pair programming.");
}
}
state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().remove(b4);
}
}
if(b4.getAllJoyces().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramRJDest", b4);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgRJDest", b4);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdlePairProgRJ", b4);
b4.removeJoyce(emp);
emp.setOverheadText("We've stopped pair programming.");
if(b4.getAllJoyces().size() < 1)
{
Vector<SSObject> c4 = b4.getAllParticipants();
for(int j=0; j<c4.size(); j++)
{
SSObject d4 = c4.elementAt(j);
if(d4 instanceof Employee)
{
((Employee)d4).setOverheadText("We've stopped pair programming.");
}
else if(d4 instanceof Customer)
{
((Customer)d4).setOverheadText("We've stopped pair programming.");
}
}
state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().remove(b4);
}
}
}
}
else if(a4 > 1)
{
Vector<PairProgramRobertJoyceAction> b4 = new Vector<PairProgramRobertJoyceAction>();
for(int i=0; i<allActions4.size(); i++)
{
PairProgramRobertJoyceAction c4 = (PairProgramRobertJoyceAction)allActions4.elementAt(i);
if((c4.getAllRoberts().contains(emp)) && (!(b4.contains(c4))))
{
b4.add(c4);
}
if((c4.getAllJoyces().contains(emp)) && (!(b4.contains(c4))))
{
b4.add(c4);
}
}
new ChooseActionToDestroyDialog(parent, b4, state, emp, ruleExec, s);
}
// Stop pair programming (Timothy and Reda):
Vector<PairProgramTimothyRedaAction> allActions5 = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions();
int a5 = 0;
for(int i=0; i<allActions5.size(); i++)
{
PairProgramTimothyRedaAction b5 = allActions5.elementAt(i);
if(b5.getAllParticipants().contains(emp))
{
a5++;
}
}
if(a5 == 1)
{
for(int i=0; i<allActions5.size(); i++)
{
PairProgramTimothyRedaAction b5 = allActions5.elementAt(i);
if(b5.getAllTimothys().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramTRDest", b5);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgTRDest", b5);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdlePairProgTR", b5);
b5.removeTimothy(emp);
emp.setOverheadText("We've stopped pair programming.");
if(b5.getAllTimothys().size() < 1)
{
Vector<SSObject> c5 = b5.getAllParticipants();
for(int j=0; j<c5.size(); j++)
{
SSObject d5 = c5.elementAt(j);
if(d5 instanceof Employee)
{
((Employee)d5).setOverheadText("We've stopped pair programming.");
}
else if(d5 instanceof Customer)
{
((Customer)d5).setOverheadText("We've stopped pair programming.");
}
}
state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().remove(b5);
}
}
if(b5.getAllRedas().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramTRDest", b5);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgTRDest", b5);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdlePairProgTR", b5);
b5.removeReda(emp);
emp.setOverheadText("We've stopped pair programming.");
if(b5.getAllRedas().size() < 1)
{
Vector<SSObject> c5 = b5.getAllParticipants();
for(int j=0; j<c5.size(); j++)
{
SSObject d5 = c5.elementAt(j);
if(d5 instanceof Employee)
{
((Employee)d5).setOverheadText("We've stopped pair programming.");
}
else if(d5 instanceof Customer)
{
((Customer)d5).setOverheadText("We've stopped pair programming.");
}
}
state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().remove(b5);
}
}
}
}
else if(a5 > 1)
{
Vector<PairProgramTimothyRedaAction> b5 = new Vector<PairProgramTimothyRedaAction>();
for(int i=0; i<allActions5.size(); i++)
{
PairProgramTimothyRedaAction c5 = (PairProgramTimothyRedaAction)allActions5.elementAt(i);
if((c5.getAllTimothys().contains(emp)) && (!(b5.contains(c5))))
{
b5.add(c5);
}
if((c5.getAllRedas().contains(emp)) && (!(b5.contains(c5))))
{
b5.add(c5);
}
}
new ChooseActionToDestroyDialog(parent, b5, state, emp, ruleExec, s);
}
// Stop pair programming (Peg & Sigfreido):
Vector<PairProgramPegSigfreidoAction> allActions6 = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions();
int a6 = 0;
for(int i=0; i<allActions6.size(); i++)
{
PairProgramPegSigfreidoAction b6 = allActions6.elementAt(i);
if(b6.getAllParticipants().contains(emp))
{
a6++;
}
}
if(a6 == 1)
{
for(int i=0; i<allActions6.size(); i++)
{
PairProgramPegSigfreidoAction b6 = allActions6.elementAt(i);
if(b6.getAllPegs().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramPSDest", b6);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgPSDest", b6);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdlePairProgPS", b6);
b6.removePeg(emp);
emp.setOverheadText("We've stopped pair programming.");
if(b6.getAllPegs().size() < 1)
{
Vector<SSObject> c6 = b6.getAllParticipants();
for(int j=0; j<c6.size(); j++)
{
SSObject d6 = c6.elementAt(j);
if(d6 instanceof Employee)
{
((Employee)d6).setOverheadText("We've stopped pair programming.");
}
else if(d6 instanceof Customer)
{
((Customer)d6).setOverheadText("We've stopped pair programming.");
}
}
state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().remove(b6);
}
}
if(b6.getAllSigfreidos().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramPSDest", b6);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgPSDest", b6);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdlePairProgPS", b6);
b6.removeSigfreido(emp);
emp.setOverheadText("We've stopped pair programming.");
if(b6.getAllSigfreidos().size() < 1)
{
Vector<SSObject> c6 = b6.getAllParticipants();
for(int j=0; j<c6.size(); j++)
{
SSObject d6 = c6.elementAt(j);
if(d6 instanceof Employee)
{
((Employee)d6).setOverheadText("We've stopped pair programming.");
}
else if(d6 instanceof Customer)
{
((Customer)d6).setOverheadText("We've stopped pair programming.");
}
}
state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().remove(b6);
}
}
}
}
else if(a6 > 1)
{
Vector<PairProgramPegSigfreidoAction> b6 = new Vector<PairProgramPegSigfreidoAction>();
for(int i=0; i<allActions6.size(); i++)
{
PairProgramPegSigfreidoAction c6 = (PairProgramPegSigfreidoAction)allActions6.elementAt(i);
if((c6.getAllPegs().contains(emp)) && (!(b6.contains(c6))))
{
b6.add(c6);
}
if((c6.getAllSigfreidos().contains(emp)) && (!(b6.contains(c6))))
{
b6.add(c6);
}
}
new ChooseActionToDestroyDialog(parent, b6, state, emp, ruleExec, s);
}
// Stop unit testing and fixing:
Vector<UnitTestingAndFixingAction> allActions7 = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions();
int a7 = 0;
for(int i=0; i<allActions7.size(); i++)
{
UnitTestingAndFixingAction b7 = allActions7.elementAt(i);
if(b7.getAllParticipants().contains(emp))
{
a7++;
}
}
if(a7 == 1)
{
for(int i=0; i<allActions7.size(); i++)
{
UnitTestingAndFixingAction b7 = allActions7.elementAt(i);
if(b7.getAllEmps().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsUTDest", b7);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleUTFix", b7);
b7.removeEmp(emp);
emp.setOverheadText("I've stopped unit testing and fixing");
if(b7.getAllEmps().size() < 1)
{
Vector<SSObject> c7 = b7.getAllParticipants();
for(int j=0; j<c7.size(); j++)
{
SSObject d7 = c7.elementAt(j);
if(d7 instanceof Employee)
{
((Employee)d7).setOverheadText("I've stopped unit testing and fixing");
}
else if(d7 instanceof Customer)
{
((Customer)d7).setOverheadText("I've stopped unit testing and fixing");
}
}
state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().remove(b7);
}
}
}
}
else if(a7 > 1)
{
Vector<UnitTestingAndFixingAction> b7 = new Vector<UnitTestingAndFixingAction>();
for(int i=0; i<allActions7.size(); i++)
{
UnitTestingAndFixingAction c7 = (UnitTestingAndFixingAction)allActions7.elementAt(i);
if((c7.getAllEmps().contains(emp)) && (!(b7.contains(c7))))
{
b7.add(c7);
}
}
new ChooseActionToDestroyDialog(parent, b7, state, emp, ruleExec, s);
}
// Stop refactoring:
Vector<RefactorAction> allActions8 = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions();
int a8 = 0;
for(int i=0; i<allActions8.size(); i++)
{
RefactorAction b8 = allActions8.elementAt(i);
if(b8.getAllParticipants().contains(emp))
{
a8++;
}
}
if(a8 == 1)
{
for(int i=0; i<allActions8.size(); i++)
{
RefactorAction b8 = allActions8.elementAt(i);
if(b8.getAllEmps().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsRefactorDest", b8);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleRefactor", b8);
b8.removeEmp(emp);
emp.setOverheadText("I've stopped refactoring the code");
if(b8.getAllEmps().size() < 1)
{
Vector<SSObject> c8 = b8.getAllParticipants();
for(int j=0; j<c8.size(); j++)
{
SSObject d8 = c8.elementAt(j);
if(d8 instanceof Employee)
{
((Employee)d8).setOverheadText("I've stopped refactoring the code");
}
else if(d8 instanceof Customer)
{
((Customer)d8).setOverheadText("I've stopped refactoring the code");
}
}
state.getActionStateRepository().getRefactorActionStateRepository().remove(b8);
}
}
}
}
else if(a8 > 1)
{
Vector<RefactorAction> b8 = new Vector<RefactorAction>();
for(int i=0; i<allActions8.size(); i++)
{
RefactorAction c8 = (RefactorAction)allActions8.elementAt(i);
if((c8.getAllEmps().contains(emp)) && (!(b8.contains(c8))))
{
b8.add(c8);
}
}
new ChooseActionToDestroyDialog(parent, b8, state, emp, ruleExec, s);
}
// Stop integrating - Robert and Joyce:
Vector<IntegrateRobertJoyceAction> allActions9 = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions();
int a9 = 0;
for(int i=0; i<allActions9.size(); i++)
{
IntegrateRobertJoyceAction b9 = allActions9.elementAt(i);
if(b9.getAllParticipants().contains(emp))
{
a9++;
}
}
if(a9 == 1)
{
for(int i=0; i<allActions9.size(); i++)
{
IntegrateRobertJoyceAction b9 = allActions9.elementAt(i);
if(b9.getAllRoberts().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotIntegratingRJ", b9);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateRJDest", b9);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleIntRJ", b9);
b9.removeRobert(emp);
emp.setOverheadText("We've stopped integrating.");
if(b9.getAllRoberts().size() < 1)
{
Vector<SSObject> c9 = b9.getAllParticipants();
for(int j=0; j<c9.size(); j++)
{
SSObject d9 = c9.elementAt(j);
if(d9 instanceof Employee)
{
((Employee)d9).setOverheadText("We've stopped integrating.");
}
else if(d9 instanceof Customer)
{
((Customer)d9).setOverheadText("We've stopped integrating.");
}
}
state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().remove(b9);
}
}
if(b9.getAllJoyces().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotIntegratingRJ", b9);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateRJDest", b9);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleIntRJ", b9);
b9.removeJoyce(emp);
emp.setOverheadText("We've stopped integrating.");
if(b9.getAllJoyces().size() < 1)
{
Vector<SSObject> c9 = b9.getAllParticipants();
for(int j=0; j<c9.size(); j++)
{
SSObject d9 = c9.elementAt(j);
if(d9 instanceof Employee)
{
((Employee)d9).setOverheadText("We've stopped integrating.");
}
else if(d9 instanceof Customer)
{
((Customer)d9).setOverheadText("We've stopped integrating.");
}
}
state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().remove(b9);
}
}
}
}
else if(a9 > 1)
{
Vector<IntegrateRobertJoyceAction> b9 = new Vector<IntegrateRobertJoyceAction>();
for(int i=0; i<allActions9.size(); i++)
{
IntegrateRobertJoyceAction c9 = (IntegrateRobertJoyceAction)allActions9.elementAt(i);
if((c9.getAllRoberts().contains(emp)) && (!(b9.contains(c9))))
{
b9.add(c9);
}
if((c9.getAllJoyces().contains(emp)) && (!(b9.contains(c9))))
{
b9.add(c9);
}
}
new ChooseActionToDestroyDialog(parent, b9, state, emp, ruleExec, s);
}
// Stop integrating - Timothy and Reda:
Vector<IntegrateTimothyRedaAction> allActions10 = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions();
int a10 = 0;
for(int i=0; i<allActions10.size(); i++)
{
IntegrateTimothyRedaAction b10 = allActions10.elementAt(i);
if(b10.getAllParticipants().contains(emp))
{
a10++;
}
}
if(a10 == 1)
{
for(int i=0; i<allActions10.size(); i++)
{
IntegrateTimothyRedaAction b10 = allActions10.elementAt(i);
if(b10.getAllTimothys().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotIntegratingTR", b10);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateTRDest", b10);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleIntTR", b10);
b10.removeTimothy(emp);
emp.setOverheadText("We've stopped integrating.");
if(b10.getAllTimothys().size() < 1)
{
Vector<SSObject> c10 = b10.getAllParticipants();
for(int j=0; j<c10.size(); j++)
{
SSObject d10 = c10.elementAt(j);
if(d10 instanceof Employee)
{
((Employee)d10).setOverheadText("We've stopped integrating.");
}
else if(d10 instanceof Customer)
{
((Customer)d10).setOverheadText("We've stopped integrating.");
}
}
state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().remove(b10);
}
}
if(b10.getAllRedas().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotIntegratingTR", b10);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateTRDest", b10);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleIntTR", b10);
b10.removeReda(emp);
emp.setOverheadText("We've stopped integrating.");
if(b10.getAllRedas().size() < 1)
{
Vector<SSObject> c10 = b10.getAllParticipants();
for(int j=0; j<c10.size(); j++)
{
SSObject d10 = c10.elementAt(j);
if(d10 instanceof Employee)
{
((Employee)d10).setOverheadText("We've stopped integrating.");
}
else if(d10 instanceof Customer)
{
((Customer)d10).setOverheadText("We've stopped integrating.");
}
}
state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().remove(b10);
}
}
}
}
else if(a10 > 1)
{
Vector<IntegrateTimothyRedaAction> b10 = new Vector<IntegrateTimothyRedaAction>();
for(int i=0; i<allActions10.size(); i++)
{
IntegrateTimothyRedaAction c10 = (IntegrateTimothyRedaAction)allActions10.elementAt(i);
if((c10.getAllTimothys().contains(emp)) && (!(b10.contains(c10))))
{
b10.add(c10);
}
if((c10.getAllRedas().contains(emp)) && (!(b10.contains(c10))))
{
b10.add(c10);
}
}
new ChooseActionToDestroyDialog(parent, b10, state, emp, ruleExec, s);
}
// Stop integrating - Peg and Sigfreido:
Vector<IntegratePegSigfreidoAction> allActions11 = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions();
int a11 = 0;
for(int i=0; i<allActions11.size(); i++)
{
IntegratePegSigfreidoAction b11 = allActions11.elementAt(i);
if(b11.getAllParticipants().contains(emp))
{
a11++;
}
}
if(a11 == 1)
{
for(int i=0; i<allActions11.size(); i++)
{
IntegratePegSigfreidoAction b11 = allActions11.elementAt(i);
if(b11.getAllPegs().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotIntegratingPS", b11);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegratePSDest", b11);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleIntPS", b11);
b11.removePeg(emp);
emp.setOverheadText("We've stopped integrating.");
if(b11.getAllPegs().size() < 1)
{
Vector<SSObject> c11 = b11.getAllParticipants();
for(int j=0; j<c11.size(); j++)
{
SSObject d11 = c11.elementAt(j);
if(d11 instanceof Employee)
{
((Employee)d11).setOverheadText("We've stopped integrating.");
}
else if(d11 instanceof Customer)
{
((Customer)d11).setOverheadText("We've stopped integrating.");
}
}
state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().remove(b11);
}
}
if(b11.getAllSigfreidos().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotIntegratingPS", b11);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegratePSDest", b11);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleIntPS", b11);
b11.removeSigfreido(emp);
emp.setOverheadText("We've stopped integrating.");
if(b11.getAllSigfreidos().size() < 1)
{
Vector<SSObject> c11 = b11.getAllParticipants();
for(int j=0; j<c11.size(); j++)
{
SSObject d11 = c11.elementAt(j);
if(d11 instanceof Employee)
{
((Employee)d11).setOverheadText("We've stopped integrating.");
}
else if(d11 instanceof Customer)
{
((Customer)d11).setOverheadText("We've stopped integrating.");
}
}
state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().remove(b11);
}
}
}
}
else if(a11 > 1)
{
Vector<IntegratePegSigfreidoAction> b11 = new Vector<IntegratePegSigfreidoAction>();
for(int i=0; i<allActions11.size(); i++)
{
IntegratePegSigfreidoAction c11 = (IntegratePegSigfreidoAction)allActions11.elementAt(i);
if((c11.getAllPegs().contains(emp)) && (!(b11.contains(c11))))
{
b11.add(c11);
}
if((c11.getAllSigfreidos().contains(emp)) && (!(b11.contains(c11))))
{
b11.add(c11);
}
}
new ChooseActionToDestroyDialog(parent, b11, state, emp, ruleExec, s);
}
// Stop integrating:
Vector<IntegrateAction> allActions12 = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions();
int a12 = 0;
for(int i=0; i<allActions12.size(); i++)
{
IntegrateAction b12 = allActions12.elementAt(i);
if(b12.getAllParticipants().contains(emp))
{
a12++;
}
}
if(a12 == 1)
{
for(int i=0; i<allActions12.size(); i++)
{
IntegrateAction b12 = allActions12.elementAt(i);
if(b12.getAllEmps().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotIntegrating", b12);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateDest", b12);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleIntegrate", b12);
b12.removeEmp(emp);
emp.setOverheadText("I've stopped integrating");
if(b12.getAllEmps().size() < 1)
{
Vector<SSObject> c12 = b12.getAllParticipants();
for(int j=0; j<c12.size(); j++)
{
SSObject d12 = c12.elementAt(j);
if(d12 instanceof Employee)
{
((Employee)d12).setOverheadText("I've stopped integrating");
}
else if(d12 instanceof Customer)
{
((Customer)d12).setOverheadText("I've stopped integrating");
}
}
state.getActionStateRepository().getIntegrateActionStateRepository().remove(b12);
}
}
}
}
else if(a12 > 1)
{
Vector<IntegrateAction> b12 = new Vector<IntegrateAction>();
for(int i=0; i<allActions12.size(); i++)
{
IntegrateAction c12 = (IntegrateAction)allActions12.elementAt(i);
if((c12.getAllEmps().contains(emp)) && (!(b12.contains(c12))))
{
b12.add(c12);
}
}
new ChooseActionToDestroyDialog(parent, b12, state, emp, ruleExec, s);
}
// Stop acceptance testing:
Vector<AcceptanceTestingAction> allActions13 = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions();
int a13 = 0;
for(int i=0; i<allActions13.size(); i++)
{
AcceptanceTestingAction b13 = allActions13.elementAt(i);
if(b13.getAllParticipants().contains(emp))
{
a13++;
}
}
if(a13 == 1)
{
for(int i=0; i<allActions13.size(); i++)
{
AcceptanceTestingAction b13 = allActions13.elementAt(i);
if(b13.getAllEmps().contains(emp))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotAcceptanceTesting", b13);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNumFailedTests", b13);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetCodePcntErroneousAccTesting", b13);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetUSPcntErroneousAccTesting", b13);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetCustomerInvolvedAccTestDest", b13);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleAccTest", b13);
b13.removeEmp(emp);
emp.setOverheadText("We've halted acceptance testing");
if(b13.getAllEmps().size() < 1)
{
Vector<SSObject> c13 = b13.getAllParticipants();
for(int j=0; j<c13.size(); j++)
{
SSObject d13 = c13.elementAt(j);
if(d13 instanceof Employee)
{
((Employee)d13).setOverheadText("We've halted acceptance testing");
}
else if(d13 instanceof Customer)
{
((Customer)d13).setOverheadText("We've halted acceptance testing");
}
}
state.getActionStateRepository().getAcceptanceTestingActionStateRepository().remove(b13);
}
}
}
}
else if(a13 > 1)
{
Vector<AcceptanceTestingAction> b13 = new Vector<AcceptanceTestingAction>();
for(int i=0; i<allActions13.size(); i++)
{
AcceptanceTestingAction c13 = (AcceptanceTestingAction)allActions13.elementAt(i);
if((c13.getAllEmps().contains(emp)) && (!(b13.contains(c13))))
{
b13.add(c13);
}
}
new ChooseActionToDestroyDialog(parent, b13, state, emp, ruleExec, s);
}
}
}
}
if(s.equals("Create user stories"))
{
Vector<Employee> developers0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<CreateUserStoriesAction> allActions = state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
CreateUserStoriesAction b = allActions.elementAt(j);
if(b.getAllDevelopers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
developers0.add(a);
}
}
Vector<Employee> customerreps1 = new Vector<Employee>();
Vector<CustomerRep> customerreps = state.getEmployeeStateRepository().getCustomerRepStateRepository().getAll();
for(int i=0; i<customerreps.size(); i++)
{
CustomerRep a = customerreps.elementAt(i);
boolean alreadyInAction = false;
Vector<CreateUserStoriesAction> allActions = state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
CreateUserStoriesAction b = allActions.elementAt(j);
if(b.getAllCustomerReps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
customerreps1.add(a);
}
}
Vector<Artifact> userstoriess2 = new Vector<Artifact>();
Vector<UserStories> userstoriess = state.getArtifactStateRepository().getUserStoriesStateRepository().getAll();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
boolean alreadyInAction = false;
Vector<CreateUserStoriesAction> allActions = state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
CreateUserStoriesAction b = allActions.elementAt(j);
if(b.getAllUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getSpecificationCompleteness() < 100.0))
{
userstoriess2.add(a);
}
}
Vector<Project> projs3 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false))
{
projs3.add(a);
}
}
if((developers0.size() >= 1) && (customerreps1.size() >= 1) && (userstoriess2.size() >= 1) && (projs3.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Developer");
c.add("CustomerRep");
c.add("UserStories");
c.add("Proj");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(developers0);
d.add(customerreps1);
d.add(userstoriess2);
d.add(projs3);
CreateUserStoriesAction f = new CreateUserStoriesAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Create user stories"))
{
Vector<CreateUserStoriesAction> a = state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions();
Vector<CreateUserStoriesAction> b = new Vector<CreateUserStoriesAction>();
for(int i=0; i<a.size(); i++)
{
CreateUserStoriesAction c = a.elementAt(i);
if((c.getAllDevelopers().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
if((c.getAllCustomerReps().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Create user stories", ruleExec);
}
else if(s.equals("Hold release planning meeting"))
{
Vector<Employee> developers0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<ReleasePlanningMeetingAction> allActions = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
ReleasePlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllDevelopers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
developers0.add(a);
}
}
Vector<Employee> managers1 = new Vector<Employee>();
Vector<Manager> managers = state.getEmployeeStateRepository().getManagerStateRepository().getAll();
for(int i=0; i<managers.size(); i++)
{
Manager a = managers.elementAt(i);
boolean alreadyInAction = false;
Vector<ReleasePlanningMeetingAction> allActions = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
ReleasePlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllManagers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
managers1.add(a);
}
}
Vector<Employee> customerreps2 = new Vector<Employee>();
Vector<CustomerRep> customerreps = state.getEmployeeStateRepository().getCustomerRepStateRepository().getAll();
for(int i=0; i<customerreps.size(); i++)
{
CustomerRep a = customerreps.elementAt(i);
boolean alreadyInAction = false;
Vector<ReleasePlanningMeetingAction> allActions = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
ReleasePlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllCustomerReps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
customerreps2.add(a);
}
}
Vector<Artifact> releaseplans3 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<ReleasePlanningMeetingAction> allActions = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
ReleasePlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 0.0))
{
releaseplans3.add(a);
}
}
Vector<Artifact> userstoriess4 = new Vector<Artifact>();
Vector<UserStories> userstoriess = state.getArtifactStateRepository().getUserStoriesStateRepository().getAll();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
boolean alreadyInAction = false;
Vector<ReleasePlanningMeetingAction> allActions = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
ReleasePlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getSpecificationCompleteness() == 100.0))
{
userstoriess4.add(a);
}
}
Vector<Project> projs5 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false))
{
projs5.add(a);
}
}
if((developers0.size() >= 1) && (managers1.size() >= 0) && (customerreps2.size() >= 0) && (releaseplans3.size() >= 1) && (userstoriess4.size() >= 1) && (projs5.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Developer");
c.add("Manager");
c.add("CustomerRep");
c.add("ReleasePlan");
c.add("UserStories");
c.add("Proj");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(developers0);
d.add(managers1);
d.add(customerreps2);
d.add(releaseplans3);
d.add(userstoriess4);
d.add(projs5);
ReleasePlanningMeetingAction f = new ReleasePlanningMeetingAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Hold release planning meeting"))
{
Vector<ReleasePlanningMeetingAction> a = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions();
Vector<ReleasePlanningMeetingAction> b = new Vector<ReleasePlanningMeetingAction>();
for(int i=0; i<a.size(); i++)
{
ReleasePlanningMeetingAction c = a.elementAt(i);
if((c.getAllDevelopers().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
if((c.getAllManagers().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
if((c.getAllCustomerReps().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Hold release planning meeting", ruleExec);
}
else if(s.equals("Start iteration"))
{
Vector<Employee> emps0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
emps0.add(a);
}
}
Vector<Project> projs1 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getIterationStarted() == false))
{
projs1.add(a);
}
}
Vector<Artifact> releaseplans2 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
releaseplans2.add(a);
}
}
Vector<Artifact> userstoriess3 = new Vector<Artifact>();
Vector<UserStories> userstoriess = state.getArtifactStateRepository().getUserStoriesStateRepository().getAll();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
boolean alreadyInAction = false;
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getImplementationCompleteness() < 100.0) && (a.getNumUserStoriesIntegrated() < 80.0))
{
userstoriess3.add(a);
}
}
Vector<Artifact> iterationplans4 = new Vector<Artifact>();
Vector<CurrentIterationPlan> currentiterationplans = state.getArtifactStateRepository().getCurrentIterationPlanStateRepository().getAll();
for(int i=0; i<currentiterationplans.size(); i++)
{
CurrentIterationPlan a = currentiterationplans.elementAt(i);
boolean alreadyInAction = false;
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllIterationPlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
iterationplans4.add(a);
}
}
Vector<Artifact> designs5 = new Vector<Artifact>();
Vector<Design> designs = state.getArtifactStateRepository().getDesignStateRepository().getAll();
for(int i=0; i<designs.size(); i++)
{
Design a = designs.elementAt(i);
boolean alreadyInAction = false;
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllDesigns().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
designs5.add(a);
}
}
Vector<Artifact> unittestss6 = new Vector<Artifact>();
Vector<UnitTests> unittestss = state.getArtifactStateRepository().getUnitTestsStateRepository().getAll();
for(int i=0; i<unittestss.size(); i++)
{
UnitTests a = unittestss.elementAt(i);
boolean alreadyInAction = false;
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllUnitTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
unittestss6.add(a);
}
}
Vector<Artifact> acceptancetestss7 = new Vector<Artifact>();
Vector<AcceptanceTests> acceptancetestss = state.getArtifactStateRepository().getAcceptanceTestsStateRepository().getAll();
for(int i=0; i<acceptancetestss.size(); i++)
{
AcceptanceTests a = acceptancetestss.elementAt(i);
boolean alreadyInAction = false;
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllAcceptanceTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
acceptancetestss7.add(a);
}
}
Vector<Artifact> codes8 = new Vector<Artifact>();
Vector<Code> codes = state.getArtifactStateRepository().getCodeStateRepository().getAll();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
boolean alreadyInAction = false;
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
codes8.add(a);
}
}
Vector<Employee> customerreps9 = new Vector<Employee>();
Vector<CustomerRep> customerreps = state.getEmployeeStateRepository().getCustomerRepStateRepository().getAll();
for(int i=0; i<customerreps.size(); i++)
{
CustomerRep a = customerreps.elementAt(i);
boolean alreadyInAction = false;
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllCustomerReps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
customerreps9.add(a);
}
}
if((emps0.size() >= 6) && (projs1.size() >= 1) && (releaseplans2.size() >= 1) && (userstoriess3.size() >= 1) && (iterationplans4.size() >= 1) && (designs5.size() >= 1) && (unittestss6.size() >= 1) && (acceptancetestss7.size() >= 1) && (codes8.size() >= 1) && (customerreps9.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Emp");
c.add("Proj");
c.add("ReleasePlan");
c.add("UserStories");
c.add("IterationPlan");
c.add("Design");
c.add("UnitTests");
c.add("AcceptanceTests");
c.add("Code");
c.add("CustomerRep");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(emps0);
d.add(projs1);
d.add(releaseplans2);
d.add(userstoriess3);
d.add(iterationplans4);
d.add(designs5);
d.add(unittestss6);
d.add(acceptancetestss7);
d.add(codes8);
d.add(customerreps9);
StartIterationAction f = new StartIterationAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Start iteration"))
{
Vector<StartIterationAction> a = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions();
Vector<StartIterationAction> b = new Vector<StartIterationAction>();
for(int i=0; i<a.size(); i++)
{
StartIterationAction c = a.elementAt(i);
if((c.getAllEmps().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
if((c.getAllCustomerReps().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Start iteration", ruleExec);
}
else if(s.equals("Hold iteration planning meeting"))
{
Vector<Employee> developers0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<IterationPlanningMeetingAction> allActions = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IterationPlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllDevelopers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getInIterationPlanningMeeting() == false))
{
developers0.add(a);
}
}
Vector<Employee> customerreps1 = new Vector<Employee>();
Vector<CustomerRep> customerreps = state.getEmployeeStateRepository().getCustomerRepStateRepository().getAll();
for(int i=0; i<customerreps.size(); i++)
{
CustomerRep a = customerreps.elementAt(i);
boolean alreadyInAction = false;
Vector<IterationPlanningMeetingAction> allActions = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IterationPlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllCustomerReps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getInIterationPlanningMeeting() == false))
{
customerreps1.add(a);
}
}
Vector<Artifact> iterationplans2 = new Vector<Artifact>();
Vector<CurrentIterationPlan> currentiterationplans = state.getArtifactStateRepository().getCurrentIterationPlanStateRepository().getAll();
for(int i=0; i<currentiterationplans.size(); i++)
{
CurrentIterationPlan a = currentiterationplans.elementAt(i);
boolean alreadyInAction = false;
Vector<IterationPlanningMeetingAction> allActions = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IterationPlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllIterationPlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() < 100.0))
{
iterationplans2.add(a);
}
}
Vector<Project> projs3 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == false) && (a.getProgrammingTasksAssignedThisIteration() == false) && (a.getIterationPlanningMeetingStarted() == false))
{
projs3.add(a);
}
}
Vector<Artifact> releaseplans4 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<IterationPlanningMeetingAction> allActions = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IterationPlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
releaseplans4.add(a);
}
}
if((developers0.size() >= 1) && (customerreps1.size() >= 1) && (iterationplans2.size() >= 1) && (projs3.size() >= 1) && (releaseplans4.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Developer");
c.add("CustomerRep");
c.add("IterationPlan");
c.add("Proj");
c.add("ReleasePlan");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(developers0);
d.add(customerreps1);
d.add(iterationplans2);
d.add(projs3);
d.add(releaseplans4);
IterationPlanningMeetingAction f = new IterationPlanningMeetingAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Hold iteration planning meeting"))
{
Vector<IterationPlanningMeetingAction> a = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions();
Vector<IterationPlanningMeetingAction> b = new Vector<IterationPlanningMeetingAction>();
for(int i=0; i<a.size(); i++)
{
IterationPlanningMeetingAction c = a.elementAt(i);
if((c.getAllDevelopers().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
if((c.getAllCustomerReps().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Hold iteration planning meeting", ruleExec);
}
else if(s.equals("Create acceptance tests"))
{
Vector<Employee> developers0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<CreateAcceptanceTestsAction> allActions = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
CreateAcceptanceTestsAction b = allActions.elementAt(j);
if(b.getAllDevelopers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getInIterationPlanningMeeting() == true))
{
developers0.add(a);
}
}
Vector<Employee> custreps1 = new Vector<Employee>();
Vector<CustomerRep> customerreps = state.getEmployeeStateRepository().getCustomerRepStateRepository().getAll();
for(int i=0; i<customerreps.size(); i++)
{
CustomerRep a = customerreps.elementAt(i);
boolean alreadyInAction = false;
Vector<CreateAcceptanceTestsAction> allActions = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
CreateAcceptanceTestsAction b = allActions.elementAt(j);
if(b.getAllCustReps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getInIterationPlanningMeeting() == true))
{
custreps1.add(a);
}
}
Vector<Artifact> testss2 = new Vector<Artifact>();
Vector<AcceptanceTests> acceptancetestss = state.getArtifactStateRepository().getAcceptanceTestsStateRepository().getAll();
for(int i=0; i<acceptancetestss.size(); i++)
{
AcceptanceTests a = acceptancetestss.elementAt(i);
boolean alreadyInAction = false;
Vector<CreateAcceptanceTestsAction> allActions = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
CreateAcceptanceTestsAction b = allActions.elementAt(j);
if(b.getAllTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() < 100.0))
{
testss2.add(a);
}
}
Vector<Project> projs3 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getAcceptanceTesting() == false))
{
projs3.add(a);
}
}
Vector<Artifact> releaseplans4 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<CreateAcceptanceTestsAction> allActions = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
CreateAcceptanceTestsAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
releaseplans4.add(a);
}
}
if((developers0.size() >= 1) && (custreps1.size() >= 0) && (testss2.size() >= 1) && (projs3.size() >= 1) && (releaseplans4.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Developer");
c.add("CustRep");
c.add("Tests");
c.add("Proj");
c.add("ReleasePlan");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(developers0);
d.add(custreps1);
d.add(testss2);
d.add(projs3);
d.add(releaseplans4);
CreateAcceptanceTestsAction f = new CreateAcceptanceTestsAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Create acceptance tests"))
{
Vector<CreateAcceptanceTestsAction> a = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions();
Vector<CreateAcceptanceTestsAction> b = new Vector<CreateAcceptanceTestsAction>();
for(int i=0; i<a.size(); i++)
{
CreateAcceptanceTestsAction c = a.elementAt(i);
if((c.getAllDevelopers().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
if((c.getAllCustReps().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Create acceptance tests", ruleExec);
}
else if(s.equals("Design"))
{
Vector<Employee> developers0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<DesignAction> allActions = state.getActionStateRepository().getDesignActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
DesignAction b = allActions.elementAt(j);
if(b.getAllDevelopers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getInIterationPlanningMeeting() == true))
{
developers0.add(a);
}
}
Vector<Tool> crccardss1 = new Vector<Tool>();
Vector<CRCCards> crccardss = state.getToolStateRepository().getCRCCardsStateRepository().getAll();
for(int i=0; i<crccardss.size(); i++)
{
CRCCards a = crccardss.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false))
{
crccardss1.add(a);
}
}
Vector<Artifact> designs2 = new Vector<Artifact>();
Vector<Design> designs = state.getArtifactStateRepository().getDesignStateRepository().getAll();
for(int i=0; i<designs.size(); i++)
{
Design a = designs.elementAt(i);
boolean alreadyInAction = false;
Vector<DesignAction> allActions = state.getActionStateRepository().getDesignActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
DesignAction b = allActions.elementAt(j);
if(b.getAllDesigns().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getNumCRCCardsCompleted() < 100.0))
{
designs2.add(a);
}
}
Vector<Project> projs3 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getAcceptanceTesting() == false))
{
projs3.add(a);
}
}
Vector<Artifact> associateduserstoriess4 = new Vector<Artifact>();
Vector<UserStories> userstoriess = state.getArtifactStateRepository().getUserStoriesStateRepository().getAll();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
boolean alreadyInAction = false;
Vector<DesignAction> allActions = state.getActionStateRepository().getDesignActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
DesignAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
associateduserstoriess4.add(a);
}
}
Vector<Artifact> releaseplans5 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<DesignAction> allActions = state.getActionStateRepository().getDesignActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
DesignAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
releaseplans5.add(a);
}
}
if((developers0.size() >= 1) && (crccardss1.size() >= 1) && (designs2.size() >= 1) && (projs3.size() >= 1) && (associateduserstoriess4.size() >= 1) && (releaseplans5.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Developer");
c.add("CRCCards");
c.add("Design");
c.add("Proj");
c.add("AssociatedUserStories");
c.add("ReleasePlan");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(developers0);
d.add(crccardss1);
d.add(designs2);
d.add(projs3);
d.add(associateduserstoriess4);
d.add(releaseplans5);
DesignAction f = new DesignAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Design"))
{
Vector<DesignAction> a = state.getActionStateRepository().getDesignActionStateRepository().getAllActions();
Vector<DesignAction> b = new Vector<DesignAction>();
for(int i=0; i<a.size(); i++)
{
DesignAction c = a.elementAt(i);
if((c.getAllDevelopers().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Design", ruleExec);
}
else if(s.equals("Create unit tests"))
{
Vector<Employee> developers0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<CreateUnitTestsAction> allActions = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
CreateUnitTestsAction b = allActions.elementAt(j);
if(b.getAllDevelopers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getInIterationPlanningMeeting() == true))
{
developers0.add(a);
}
}
Vector<Artifact> testss1 = new Vector<Artifact>();
Vector<UnitTests> unittestss = state.getArtifactStateRepository().getUnitTestsStateRepository().getAll();
for(int i=0; i<unittestss.size(); i++)
{
UnitTests a = unittestss.elementAt(i);
boolean alreadyInAction = false;
Vector<CreateUnitTestsAction> allActions = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
CreateUnitTestsAction b = allActions.elementAt(j);
if(b.getAllTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() < 100.0))
{
testss1.add(a);
}
}
Vector<Tool> testingframeworks2 = new Vector<Tool>();
Vector<UnitTestingFramework> unittestingframeworks = state.getToolStateRepository().getUnitTestingFrameworkStateRepository().getAll();
for(int i=0; i<unittestingframeworks.size(); i++)
{
UnitTestingFramework a = unittestingframeworks.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false))
{
testingframeworks2.add(a);
}
}
Vector<Project> projs3 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getAcceptanceTesting() == false))
{
projs3.add(a);
}
}
Vector<Artifact> associateddesigns4 = new Vector<Artifact>();
Vector<Design> designs = state.getArtifactStateRepository().getDesignStateRepository().getAll();
for(int i=0; i<designs.size(); i++)
{
Design a = designs.elementAt(i);
boolean alreadyInAction = false;
Vector<CreateUnitTestsAction> allActions = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
CreateUnitTestsAction b = allActions.elementAt(j);
if(b.getAllAssociatedDesigns().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getNumCRCCardsCompleted() == 100.0))
{
associateddesigns4.add(a);
}
}
Vector<Artifact> releaseplans5 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<CreateUnitTestsAction> allActions = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
CreateUnitTestsAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
releaseplans5.add(a);
}
}
if((developers0.size() >= 1) && (testss1.size() >= 1) && (testingframeworks2.size() >= 0) && (projs3.size() >= 1) && (associateddesigns4.size() >= 1) && (releaseplans5.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Developer");
c.add("Tests");
c.add("TestingFramework");
c.add("Proj");
c.add("AssociatedDesign");
c.add("ReleasePlan");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(developers0);
d.add(testss1);
d.add(testingframeworks2);
d.add(projs3);
d.add(associateddesigns4);
d.add(releaseplans5);
CreateUnitTestsAction f = new CreateUnitTestsAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Create unit tests"))
{
Vector<CreateUnitTestsAction> a = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions();
Vector<CreateUnitTestsAction> b = new Vector<CreateUnitTestsAction>();
for(int i=0; i<a.size(); i++)
{
CreateUnitTestsAction c = a.elementAt(i);
if((c.getAllDevelopers().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Create unit tests", ruleExec);
}
else if(s.equals("Learn coding standard"))
{
Vector<Employee> developers0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<LearnCodingStandardAction> allActions = state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
LearnCodingStandardAction b = allActions.elementAt(j);
if(b.getAllDevelopers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getKnowsCodingStandard() == false) && (a.getKnowsCodingStandardNumerical() < 1.0))
{
developers0.add(a);
}
}
Vector<Tool> codingstandards1 = new Vector<Tool>();
Vector<CodingStandard> codingstandards = state.getToolStateRepository().getCodingStandardStateRepository().getAll();
for(int i=0; i<codingstandards.size(); i++)
{
CodingStandard a = codingstandards.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false))
{
codingstandards1.add(a);
}
}
Vector<Project> projs2 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false))
{
projs2.add(a);
}
}
if((developers0.size() >= 1) && (codingstandards1.size() >= 1) && (projs2.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Developer");
c.add("CodingStandard");
c.add("Proj");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(developers0);
d.add(codingstandards1);
d.add(projs2);
LearnCodingStandardAction f = new LearnCodingStandardAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Learn coding standard"))
{
Vector<LearnCodingStandardAction> a = state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions();
Vector<LearnCodingStandardAction> b = new Vector<LearnCodingStandardAction>();
for(int i=0; i<a.size(); i++)
{
LearnCodingStandardAction c = a.elementAt(i);
if((c.getAllDevelopers().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Learn coding standard", ruleExec);
}
else if(s.equals("Program"))
{
Vector<Employee> developers0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<ProgramAction> allActions = state.getActionStateRepository().getProgramActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
ProgramAction b = allActions.elementAt(j);
if(b.getAllDevelopers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getInIterationPlanningMeeting() == true) && (a.getProgramming() == false))
{
developers0.add(a);
}
}
Vector<Artifact> codes1 = new Vector<Artifact>();
Vector<Code> codes = state.getArtifactStateRepository().getCodeStateRepository().getAll();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
boolean alreadyInAction = false;
Vector<ProgramAction> allActions = state.getActionStateRepository().getProgramActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
ProgramAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() < 100.0))
{
codes1.add(a);
}
}
Vector<Tool> codingstandards2 = new Vector<Tool>();
Vector<CodingStandard> codingstandards = state.getToolStateRepository().getCodingStandardStateRepository().getAll();
for(int i=0; i<codingstandards.size(); i++)
{
CodingStandard a = codingstandards.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false))
{
codingstandards2.add(a);
}
}
Vector<Artifact> associateddesigns3 = new Vector<Artifact>();
Vector<Design> designs = state.getArtifactStateRepository().getDesignStateRepository().getAll();
for(int i=0; i<designs.size(); i++)
{
Design a = designs.elementAt(i);
boolean alreadyInAction = false;
Vector<ProgramAction> allActions = state.getActionStateRepository().getProgramActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
ProgramAction b = allActions.elementAt(j);
if(b.getAllAssociatedDesigns().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
associateddesigns3.add(a);
}
}
Vector<Artifact> associatedunittestss4 = new Vector<Artifact>();
Vector<UnitTests> unittestss = state.getArtifactStateRepository().getUnitTestsStateRepository().getAll();
for(int i=0; i<unittestss.size(); i++)
{
UnitTests a = unittestss.elementAt(i);
boolean alreadyInAction = false;
Vector<ProgramAction> allActions = state.getActionStateRepository().getProgramActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
ProgramAction b = allActions.elementAt(j);
if(b.getAllAssociatedUnitTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
associatedunittestss4.add(a);
}
}
Vector<Project> projs5 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getAcceptanceTesting() == false))
{
projs5.add(a);
}
}
Vector<Artifact> associateduserstoriess6 = new Vector<Artifact>();
Vector<UserStories> userstoriess = state.getArtifactStateRepository().getUserStoriesStateRepository().getAll();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
boolean alreadyInAction = false;
Vector<ProgramAction> allActions = state.getActionStateRepository().getProgramActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
ProgramAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
associateduserstoriess6.add(a);
}
}
Vector<Artifact> releaseplans7 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<ProgramAction> allActions = state.getActionStateRepository().getProgramActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
ProgramAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
releaseplans7.add(a);
}
}
if((developers0.size() >= 1) && (codes1.size() >= 1) && (codingstandards2.size() >= 1) && (associateddesigns3.size() >= 1) && (associatedunittestss4.size() >= 1) && (projs5.size() >= 1) && (associateduserstoriess6.size() >= 1) && (releaseplans7.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Developer");
c.add("Code");
c.add("CodingStandard");
c.add("AssociatedDesign");
c.add("AssociatedUnitTests");
c.add("Proj");
c.add("AssociatedUserStories");
c.add("ReleasePlan");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(developers0);
d.add(codes1);
d.add(codingstandards2);
d.add(associateddesigns3);
d.add(associatedunittestss4);
d.add(projs5);
d.add(associateduserstoriess6);
d.add(releaseplans7);
ProgramAction f = new ProgramAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Program"))
{
Vector<ProgramAction> a = state.getActionStateRepository().getProgramActionStateRepository().getAllActions();
Vector<ProgramAction> b = new Vector<ProgramAction>();
for(int i=0; i<a.size(); i++)
{
ProgramAction c = a.elementAt(i);
if((c.getAllDevelopers().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Program", ruleExec);
}
else if(s.equals("Pair program (Robert and Joyce)"))
{
Vector<Employee> roberts0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramRobertJoyceAction> allActions = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllRoberts().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getName() == "Robert") && (a.getInIterationPlanningMeeting() == true) && (a.getProgramming() == false))
{
roberts0.add(a);
}
}
Vector<Employee> joyces1 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramRobertJoyceAction> allActions = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllJoyces().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getName() == "Joyce") && (a.getInIterationPlanningMeeting() == true) && (a.getProgramming() == false))
{
joyces1.add(a);
}
}
Vector<Artifact> codes2 = new Vector<Artifact>();
Vector<Code> codes = state.getArtifactStateRepository().getCodeStateRepository().getAll();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramRobertJoyceAction> allActions = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() < 100.0))
{
codes2.add(a);
}
}
Vector<Tool> codingstandards3 = new Vector<Tool>();
Vector<CodingStandard> codingstandards = state.getToolStateRepository().getCodingStandardStateRepository().getAll();
for(int i=0; i<codingstandards.size(); i++)
{
CodingStandard a = codingstandards.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false))
{
codingstandards3.add(a);
}
}
Vector<Artifact> associateddesigns4 = new Vector<Artifact>();
Vector<Design> designs = state.getArtifactStateRepository().getDesignStateRepository().getAll();
for(int i=0; i<designs.size(); i++)
{
Design a = designs.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramRobertJoyceAction> allActions = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllAssociatedDesigns().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
associateddesigns4.add(a);
}
}
Vector<Artifact> associatedunittestss5 = new Vector<Artifact>();
Vector<UnitTests> unittestss = state.getArtifactStateRepository().getUnitTestsStateRepository().getAll();
for(int i=0; i<unittestss.size(); i++)
{
UnitTests a = unittestss.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramRobertJoyceAction> allActions = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllAssociatedUnitTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
associatedunittestss5.add(a);
}
}
Vector<Project> projs6 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getAcceptanceTesting() == false))
{
projs6.add(a);
}
}
Vector<Artifact> associateduserstoriess7 = new Vector<Artifact>();
Vector<UserStories> userstoriess = state.getArtifactStateRepository().getUserStoriesStateRepository().getAll();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramRobertJoyceAction> allActions = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
associateduserstoriess7.add(a);
}
}
Vector<Artifact> releaseplans8 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramRobertJoyceAction> allActions = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
releaseplans8.add(a);
}
}
if((roberts0.size() >= 1) && (joyces1.size() >= 1) && (codes2.size() >= 1) && (codingstandards3.size() >= 1) && (associateddesigns4.size() >= 1) && (associatedunittestss5.size() >= 1) && (projs6.size() >= 1) && (associateduserstoriess7.size() >= 1) && (releaseplans8.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Robert");
c.add("Joyce");
c.add("Code");
c.add("CodingStandard");
c.add("AssociatedDesign");
c.add("AssociatedUnitTests");
c.add("Proj");
c.add("AssociatedUserStories");
c.add("ReleasePlan");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(roberts0);
d.add(joyces1);
d.add(codes2);
d.add(codingstandards3);
d.add(associateddesigns4);
d.add(associatedunittestss5);
d.add(projs6);
d.add(associateduserstoriess7);
d.add(releaseplans8);
PairProgramRobertJoyceAction f = new PairProgramRobertJoyceAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Pair program (Robert and Joyce)"))
{
Vector<PairProgramRobertJoyceAction> a = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions();
Vector<PairProgramRobertJoyceAction> b = new Vector<PairProgramRobertJoyceAction>();
for(int i=0; i<a.size(); i++)
{
PairProgramRobertJoyceAction c = a.elementAt(i);
if((c.getAllRoberts().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
if((c.getAllJoyces().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Pair program (Robert and Joyce)", ruleExec);
}
else if(s.equals("Pair Program (Timothy and Reda)"))
{
Vector<Employee> timothys0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramTimothyRedaAction> allActions = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllTimothys().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getName() == "Timothy") && (a.getInIterationPlanningMeeting() == true) && (a.getProgramming() == false))
{
timothys0.add(a);
}
}
Vector<Employee> redas1 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramTimothyRedaAction> allActions = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllRedas().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getName() == "Reda") && (a.getInIterationPlanningMeeting() == true) && (a.getProgramming() == false))
{
redas1.add(a);
}
}
Vector<Artifact> codes2 = new Vector<Artifact>();
Vector<Code> codes = state.getArtifactStateRepository().getCodeStateRepository().getAll();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramTimothyRedaAction> allActions = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() < 100.0))
{
codes2.add(a);
}
}
Vector<Tool> codingstandards3 = new Vector<Tool>();
Vector<CodingStandard> codingstandards = state.getToolStateRepository().getCodingStandardStateRepository().getAll();
for(int i=0; i<codingstandards.size(); i++)
{
CodingStandard a = codingstandards.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false))
{
codingstandards3.add(a);
}
}
Vector<Artifact> associateddesigns4 = new Vector<Artifact>();
Vector<Design> designs = state.getArtifactStateRepository().getDesignStateRepository().getAll();
for(int i=0; i<designs.size(); i++)
{
Design a = designs.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramTimothyRedaAction> allActions = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllAssociatedDesigns().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
associateddesigns4.add(a);
}
}
Vector<Artifact> associatedunittestss5 = new Vector<Artifact>();
Vector<UnitTests> unittestss = state.getArtifactStateRepository().getUnitTestsStateRepository().getAll();
for(int i=0; i<unittestss.size(); i++)
{
UnitTests a = unittestss.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramTimothyRedaAction> allActions = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllAssociatedUnitTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
associatedunittestss5.add(a);
}
}
Vector<Project> projs6 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getAcceptanceTesting() == false))
{
projs6.add(a);
}
}
Vector<Artifact> associateduserstoriess7 = new Vector<Artifact>();
Vector<UserStories> userstoriess = state.getArtifactStateRepository().getUserStoriesStateRepository().getAll();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramTimothyRedaAction> allActions = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
associateduserstoriess7.add(a);
}
}
Vector<Artifact> releaseplans8 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramTimothyRedaAction> allActions = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
releaseplans8.add(a);
}
}
if((timothys0.size() >= 1) && (redas1.size() >= 1) && (codes2.size() >= 1) && (codingstandards3.size() >= 1) && (associateddesigns4.size() >= 1) && (associatedunittestss5.size() >= 1) && (projs6.size() >= 1) && (associateduserstoriess7.size() >= 1) && (releaseplans8.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Timothy");
c.add("Reda");
c.add("Code");
c.add("CodingStandard");
c.add("AssociatedDesign");
c.add("AssociatedUnitTests");
c.add("Proj");
c.add("AssociatedUserStories");
c.add("ReleasePlan");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(timothys0);
d.add(redas1);
d.add(codes2);
d.add(codingstandards3);
d.add(associateddesigns4);
d.add(associatedunittestss5);
d.add(projs6);
d.add(associateduserstoriess7);
d.add(releaseplans8);
PairProgramTimothyRedaAction f = new PairProgramTimothyRedaAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Pair Program (Timothy and Reda)"))
{
Vector<PairProgramTimothyRedaAction> a = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions();
Vector<PairProgramTimothyRedaAction> b = new Vector<PairProgramTimothyRedaAction>();
for(int i=0; i<a.size(); i++)
{
PairProgramTimothyRedaAction c = a.elementAt(i);
if((c.getAllTimothys().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
if((c.getAllRedas().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Pair Program (Timothy and Reda)", ruleExec);
}
else if(s.equals("Pair program (Peg and Sigfreido)"))
{
Vector<Employee> pegs0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramPegSigfreidoAction> allActions = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramPegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllPegs().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getName() == "Peg") && (a.getInIterationPlanningMeeting() == true) && (a.getProgramming() == false))
{
pegs0.add(a);
}
}
Vector<Employee> sigfreidos1 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramPegSigfreidoAction> allActions = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramPegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllSigfreidos().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getName() == "Sigfreido") && (a.getInIterationPlanningMeeting() == true) && (a.getProgramming() == false))
{
sigfreidos1.add(a);
}
}
Vector<Artifact> codes2 = new Vector<Artifact>();
Vector<Code> codes = state.getArtifactStateRepository().getCodeStateRepository().getAll();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramPegSigfreidoAction> allActions = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramPegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() < 100.0))
{
codes2.add(a);
}
}
Vector<Tool> codingstandards3 = new Vector<Tool>();
Vector<CodingStandard> codingstandards = state.getToolStateRepository().getCodingStandardStateRepository().getAll();
for(int i=0; i<codingstandards.size(); i++)
{
CodingStandard a = codingstandards.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false))
{
codingstandards3.add(a);
}
}
Vector<Artifact> associateddesigns4 = new Vector<Artifact>();
Vector<Design> designs = state.getArtifactStateRepository().getDesignStateRepository().getAll();
for(int i=0; i<designs.size(); i++)
{
Design a = designs.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramPegSigfreidoAction> allActions = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramPegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllAssociatedDesigns().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
associateddesigns4.add(a);
}
}
Vector<Artifact> associatedunittestss5 = new Vector<Artifact>();
Vector<UnitTests> unittestss = state.getArtifactStateRepository().getUnitTestsStateRepository().getAll();
for(int i=0; i<unittestss.size(); i++)
{
UnitTests a = unittestss.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramPegSigfreidoAction> allActions = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramPegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllAssociatedUnitTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
associatedunittestss5.add(a);
}
}
Vector<Project> projs6 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getAcceptanceTesting() == false))
{
projs6.add(a);
}
}
Vector<Artifact> associateduserstoriess7 = new Vector<Artifact>();
Vector<UserStories> userstoriess = state.getArtifactStateRepository().getUserStoriesStateRepository().getAll();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramPegSigfreidoAction> allActions = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramPegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
associateduserstoriess7.add(a);
}
}
Vector<Artifact> releaseplans8 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<PairProgramPegSigfreidoAction> allActions = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
PairProgramPegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
releaseplans8.add(a);
}
}
if((pegs0.size() >= 1) && (sigfreidos1.size() >= 1) && (codes2.size() >= 1) && (codingstandards3.size() >= 1) && (associateddesigns4.size() >= 1) && (associatedunittestss5.size() >= 1) && (projs6.size() >= 1) && (associateduserstoriess7.size() >= 1) && (releaseplans8.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Peg");
c.add("Sigfreido");
c.add("Code");
c.add("CodingStandard");
c.add("AssociatedDesign");
c.add("AssociatedUnitTests");
c.add("Proj");
c.add("AssociatedUserStories");
c.add("ReleasePlan");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(pegs0);
d.add(sigfreidos1);
d.add(codes2);
d.add(codingstandards3);
d.add(associateddesigns4);
d.add(associatedunittestss5);
d.add(projs6);
d.add(associateduserstoriess7);
d.add(releaseplans8);
PairProgramPegSigfreidoAction f = new PairProgramPegSigfreidoAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Pair program (Peg and Sigfreido)"))
{
Vector<PairProgramPegSigfreidoAction> a = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions();
Vector<PairProgramPegSigfreidoAction> b = new Vector<PairProgramPegSigfreidoAction>();
for(int i=0; i<a.size(); i++)
{
PairProgramPegSigfreidoAction c = a.elementAt(i);
if((c.getAllPegs().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
if((c.getAllSigfreidos().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Pair program (Peg and Sigfreido)", ruleExec);
}
else if(s.equals("Unit test and fix"))
{
Vector<Employee> emps0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<UnitTestingAndFixingAction> allActions = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
UnitTestingAndFixingAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getInIterationPlanningMeeting() == true))
{
emps0.add(a);
}
}
Vector<Artifact> codes1 = new Vector<Artifact>();
Vector<Code> codes = state.getArtifactStateRepository().getCodeStateRepository().getAll();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
boolean alreadyInAction = false;
Vector<UnitTestingAndFixingAction> allActions = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
UnitTestingAndFixingAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getPercentErroneous() > 0.0) && (a.getCompleteness() == 100.0))
{
codes1.add(a);
}
}
Vector<Artifact> unittestss2 = new Vector<Artifact>();
Vector<UnitTests> unittestss = state.getArtifactStateRepository().getUnitTestsStateRepository().getAll();
for(int i=0; i<unittestss.size(); i++)
{
UnitTests a = unittestss.elementAt(i);
boolean alreadyInAction = false;
Vector<UnitTestingAndFixingAction> allActions = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
UnitTestingAndFixingAction b = allActions.elementAt(j);
if(b.getAllUnitTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
unittestss2.add(a);
}
}
Vector<Tool> testingtools3 = new Vector<Tool>();
Vector<UnitTestingFramework> unittestingframeworks = state.getToolStateRepository().getUnitTestingFrameworkStateRepository().getAll();
for(int i=0; i<unittestingframeworks.size(); i++)
{
UnitTestingFramework a = unittestingframeworks.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false))
{
testingtools3.add(a);
}
}
Vector<Project> projs4 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getAcceptanceTesting() == false))
{
projs4.add(a);
}
}
Vector<Artifact> acceptancetestss5 = new Vector<Artifact>();
Vector<AcceptanceTests> acceptancetestss = state.getArtifactStateRepository().getAcceptanceTestsStateRepository().getAll();
for(int i=0; i<acceptancetestss.size(); i++)
{
AcceptanceTests a = acceptancetestss.elementAt(i);
boolean alreadyInAction = false;
Vector<UnitTestingAndFixingAction> allActions = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
UnitTestingAndFixingAction b = allActions.elementAt(j);
if(b.getAllAcceptanceTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
acceptancetestss5.add(a);
}
}
Vector<Artifact> releaseplans6 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<UnitTestingAndFixingAction> allActions = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
UnitTestingAndFixingAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
releaseplans6.add(a);
}
}
if((emps0.size() >= 1) && (codes1.size() >= 1) && (unittestss2.size() >= 1) && (testingtools3.size() >= 0) && (projs4.size() >= 1) && (acceptancetestss5.size() >= 1) && (releaseplans6.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Emp");
c.add("Code");
c.add("UnitTests");
c.add("TestingTool");
c.add("Proj");
c.add("AcceptanceTests");
c.add("ReleasePlan");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(emps0);
d.add(codes1);
d.add(unittestss2);
d.add(testingtools3);
d.add(projs4);
d.add(acceptancetestss5);
d.add(releaseplans6);
UnitTestingAndFixingAction f = new UnitTestingAndFixingAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Unit test and fix"))
{
Vector<UnitTestingAndFixingAction> a = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions();
Vector<UnitTestingAndFixingAction> b = new Vector<UnitTestingAndFixingAction>();
for(int i=0; i<a.size(); i++)
{
UnitTestingAndFixingAction c = a.elementAt(i);
if((c.getAllEmps().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Unit test and fix", ruleExec);
}
else if(s.equals("Refactor code"))
{
Vector<Employee> emps0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<RefactorAction> allActions = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
RefactorAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getInIterationPlanningMeeting() == true))
{
emps0.add(a);
}
}
Vector<Artifact> codes1 = new Vector<Artifact>();
Vector<Code> codes = state.getArtifactStateRepository().getCodeStateRepository().getAll();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
boolean alreadyInAction = false;
Vector<RefactorAction> allActions = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
RefactorAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0) && (a.getPercentRefactored() < 100.0))
{
codes1.add(a);
}
}
Vector<Project> projs2 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getAcceptanceTesting() == false))
{
projs2.add(a);
}
}
Vector<Tool> refactoringtools3 = new Vector<Tool>();
Vector<RefactoringTool> refactoringtools = state.getToolStateRepository().getRefactoringToolStateRepository().getAll();
for(int i=0; i<refactoringtools.size(); i++)
{
RefactoringTool a = refactoringtools.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false))
{
refactoringtools3.add(a);
}
}
Vector<Artifact> releaseplans4 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<RefactorAction> allActions = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
RefactorAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
releaseplans4.add(a);
}
}
if((emps0.size() >= 1) && (codes1.size() >= 1) && (projs2.size() >= 1) && (refactoringtools3.size() >= 0) && (releaseplans4.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Emp");
c.add("Code");
c.add("Proj");
c.add("RefactoringTool");
c.add("ReleasePlan");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(emps0);
d.add(codes1);
d.add(projs2);
d.add(refactoringtools3);
d.add(releaseplans4);
RefactorAction f = new RefactorAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Refactor code"))
{
Vector<RefactorAction> a = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions();
Vector<RefactorAction> b = new Vector<RefactorAction>();
for(int i=0; i<a.size(); i++)
{
RefactorAction c = a.elementAt(i);
if((c.getAllEmps().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Refactor code", ruleExec);
}
else if(s.equals("Pair integrate (Robert and Joyce)"))
{
Vector<Employee> roberts0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegrateRobertJoyceAction> allActions = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegrateRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllRoberts().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getName() == "Robert") && (a.getInIterationPlanningMeeting() == true) && (a.getIntegrating() == false))
{
roberts0.add(a);
}
}
Vector<Artifact> codes1 = new Vector<Artifact>();
Vector<Code> codes = state.getArtifactStateRepository().getCodeStateRepository().getAll();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegrateRobertJoyceAction> allActions = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegrateRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0) && (a.getPercentIntegrated() < 100.0))
{
codes1.add(a);
}
}
Vector<Project> projs2 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getRobertAndJoycePairProgThisIteration() == true) && (a.getAcceptanceTesting() == false))
{
projs2.add(a);
}
}
Vector<Employee> joyces3 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegrateRobertJoyceAction> allActions = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegrateRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllJoyces().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getName() == "Joyce") && (a.getInIterationPlanningMeeting() == true) && (a.getIntegrating() == false))
{
joyces3.add(a);
}
}
Vector<Artifact> associateduserstoriess4 = new Vector<Artifact>();
Vector<UserStories> userstoriess = state.getArtifactStateRepository().getUserStoriesStateRepository().getAll();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegrateRobertJoyceAction> allActions = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegrateRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
associateduserstoriess4.add(a);
}
}
Vector<Artifact> releaseplans5 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegrateRobertJoyceAction> allActions = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegrateRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
releaseplans5.add(a);
}
}
if((roberts0.size() >= 1) && (codes1.size() >= 1) && (projs2.size() >= 1) && (joyces3.size() >= 1) && (associateduserstoriess4.size() >= 1) && (releaseplans5.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Robert");
c.add("Code");
c.add("Proj");
c.add("Joyce");
c.add("AssociatedUserStories");
c.add("ReleasePlan");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(roberts0);
d.add(codes1);
d.add(projs2);
d.add(joyces3);
d.add(associateduserstoriess4);
d.add(releaseplans5);
IntegrateRobertJoyceAction f = new IntegrateRobertJoyceAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Pair integrate (Robert and Joyce)"))
{
Vector<IntegrateRobertJoyceAction> a = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions();
Vector<IntegrateRobertJoyceAction> b = new Vector<IntegrateRobertJoyceAction>();
for(int i=0; i<a.size(); i++)
{
IntegrateRobertJoyceAction c = a.elementAt(i);
if((c.getAllRoberts().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
if((c.getAllJoyces().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Pair integrate (Robert and Joyce)", ruleExec);
}
else if(s.equals("Pair integrate (Timothy and Reda)"))
{
Vector<Employee> timothys0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegrateTimothyRedaAction> allActions = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegrateTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllTimothys().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getName() == "Timothy") && (a.getInIterationPlanningMeeting() == true) && (a.getIntegrating() == false))
{
timothys0.add(a);
}
}
Vector<Employee> redas1 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegrateTimothyRedaAction> allActions = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegrateTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllRedas().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getName() == "Reda") && (a.getInIterationPlanningMeeting() == true) && (a.getIntegrating() == false))
{
redas1.add(a);
}
}
Vector<Artifact> codes2 = new Vector<Artifact>();
Vector<Code> codes = state.getArtifactStateRepository().getCodeStateRepository().getAll();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegrateTimothyRedaAction> allActions = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegrateTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0) && (a.getPercentIntegrated() < 100.0))
{
codes2.add(a);
}
}
Vector<Project> projs3 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getTimothyAndRedaPairProgThisIteration() == true) && (a.getAcceptanceTesting() == false))
{
projs3.add(a);
}
}
Vector<Artifact> associateduserstoriess4 = new Vector<Artifact>();
Vector<UserStories> userstoriess = state.getArtifactStateRepository().getUserStoriesStateRepository().getAll();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegrateTimothyRedaAction> allActions = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegrateTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
associateduserstoriess4.add(a);
}
}
Vector<Artifact> releaseplans5 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegrateTimothyRedaAction> allActions = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegrateTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
releaseplans5.add(a);
}
}
if((timothys0.size() >= 1) && (redas1.size() >= 1) && (codes2.size() >= 1) && (projs3.size() >= 1) && (associateduserstoriess4.size() >= 1) && (releaseplans5.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Timothy");
c.add("Reda");
c.add("Code");
c.add("Proj");
c.add("AssociatedUserStories");
c.add("ReleasePlan");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(timothys0);
d.add(redas1);
d.add(codes2);
d.add(projs3);
d.add(associateduserstoriess4);
d.add(releaseplans5);
IntegrateTimothyRedaAction f = new IntegrateTimothyRedaAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Pair integrate (Timothy and Reda)"))
{
Vector<IntegrateTimothyRedaAction> a = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions();
Vector<IntegrateTimothyRedaAction> b = new Vector<IntegrateTimothyRedaAction>();
for(int i=0; i<a.size(); i++)
{
IntegrateTimothyRedaAction c = a.elementAt(i);
if((c.getAllTimothys().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
if((c.getAllRedas().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Pair integrate (Timothy and Reda)", ruleExec);
}
else if(s.equals("Pair integrate (Peg and Sigfreido)"))
{
Vector<Employee> pegs0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegratePegSigfreidoAction> allActions = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegratePegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllPegs().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getName() == "Peg") && (a.getInIterationPlanningMeeting() == true) && (a.getIntegrating() == false))
{
pegs0.add(a);
}
}
Vector<Employee> sigfreidos1 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegratePegSigfreidoAction> allActions = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegratePegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllSigfreidos().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getName() == "Sigfreido") && (a.getInIterationPlanningMeeting() == true) && (a.getIntegrating() == false))
{
sigfreidos1.add(a);
}
}
Vector<Artifact> codes2 = new Vector<Artifact>();
Vector<Code> codes = state.getArtifactStateRepository().getCodeStateRepository().getAll();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegratePegSigfreidoAction> allActions = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegratePegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0) && (a.getPercentIntegrated() < 100.0))
{
codes2.add(a);
}
}
Vector<Project> projs3 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getPegAndSigfreidoPairProgThisIteration() == true) && (a.getAcceptanceTesting() == false))
{
projs3.add(a);
}
}
Vector<Artifact> associateduserstoriess4 = new Vector<Artifact>();
Vector<UserStories> userstoriess = state.getArtifactStateRepository().getUserStoriesStateRepository().getAll();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegratePegSigfreidoAction> allActions = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegratePegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
associateduserstoriess4.add(a);
}
}
Vector<Artifact> releaseplans5 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegratePegSigfreidoAction> allActions = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegratePegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
releaseplans5.add(a);
}
}
if((pegs0.size() >= 1) && (sigfreidos1.size() >= 1) && (codes2.size() >= 1) && (projs3.size() >= 1) && (associateduserstoriess4.size() >= 1) && (releaseplans5.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Peg");
c.add("Sigfreido");
c.add("Code");
c.add("Proj");
c.add("AssociatedUserStories");
c.add("ReleasePlan");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(pegs0);
d.add(sigfreidos1);
d.add(codes2);
d.add(projs3);
d.add(associateduserstoriess4);
d.add(releaseplans5);
IntegratePegSigfreidoAction f = new IntegratePegSigfreidoAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Pair integrate (Peg and Sigfreido)"))
{
Vector<IntegratePegSigfreidoAction> a = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions();
Vector<IntegratePegSigfreidoAction> b = new Vector<IntegratePegSigfreidoAction>();
for(int i=0; i<a.size(); i++)
{
IntegratePegSigfreidoAction c = a.elementAt(i);
if((c.getAllPegs().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
if((c.getAllSigfreidos().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Pair integrate (Peg and Sigfreido)", ruleExec);
}
else if(s.equals("Integrate"))
{
Vector<Employee> emps0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegrateAction> allActions = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegrateAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getInIterationPlanningMeeting() == true) && (a.getIntegrating() == false))
{
emps0.add(a);
}
}
Vector<Artifact> codes1 = new Vector<Artifact>();
Vector<Code> codes = state.getArtifactStateRepository().getCodeStateRepository().getAll();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegrateAction> allActions = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegrateAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0) && (a.getPercentIntegrated() < 100.0))
{
codes1.add(a);
}
}
Vector<Project> projs2 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getAcceptanceTesting() == false))
{
projs2.add(a);
}
}
Vector<Artifact> associateduserstoriess3 = new Vector<Artifact>();
Vector<UserStories> userstoriess = state.getArtifactStateRepository().getUserStoriesStateRepository().getAll();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegrateAction> allActions = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegrateAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
associateduserstoriess3.add(a);
}
}
Vector<Artifact> releaseplans4 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<IntegrateAction> allActions = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
IntegrateAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
releaseplans4.add(a);
}
}
if((emps0.size() >= 1) && (codes1.size() >= 1) && (projs2.size() >= 1) && (associateduserstoriess3.size() >= 1) && (releaseplans4.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Emp");
c.add("Code");
c.add("Proj");
c.add("AssociatedUserStories");
c.add("ReleasePlan");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(emps0);
d.add(codes1);
d.add(projs2);
d.add(associateduserstoriess3);
d.add(releaseplans4);
IntegrateAction f = new IntegrateAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Integrate"))
{
Vector<IntegrateAction> a = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions();
Vector<IntegrateAction> b = new Vector<IntegrateAction>();
for(int i=0; i<a.size(); i++)
{
IntegrateAction c = a.elementAt(i);
if((c.getAllEmps().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Integrate", ruleExec);
}
else if(s.equals("Acceptance testing"))
{
Vector<Employee> emps0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<AcceptanceTestingAction> allActions = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
AcceptanceTestingAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getInIterationPlanningMeeting() == true))
{
emps0.add(a);
}
}
Vector<Customer> custs1 = new Vector<Customer>();
Vector<CustomerRepresentative> customerrepresentatives = state.getCustomerStateRepository().getCustomerRepresentativeStateRepository().getAll();
for(int i=0; i<customerrepresentatives.size(); i++)
{
CustomerRepresentative a = customerrepresentatives.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false))
{
custs1.add(a);
}
}
Vector<Artifact> acceptancetestcasess2 = new Vector<Artifact>();
Vector<AcceptanceTests> acceptancetestss = state.getArtifactStateRepository().getAcceptanceTestsStateRepository().getAll();
for(int i=0; i<acceptancetestss.size(); i++)
{
AcceptanceTests a = acceptancetestss.elementAt(i);
boolean alreadyInAction = false;
Vector<AcceptanceTestingAction> allActions = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
AcceptanceTestingAction b = allActions.elementAt(j);
if(b.getAllAcceptanceTestCasess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0) && (a.getTestsRun() < 100.0))
{
acceptancetestcasess2.add(a);
}
}
Vector<Artifact> userstoriess3 = new Vector<Artifact>();
Vector<UserStories> userstoriess = state.getArtifactStateRepository().getUserStoriesStateRepository().getAll();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
boolean alreadyInAction = false;
Vector<AcceptanceTestingAction> allActions = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
AcceptanceTestingAction b = allActions.elementAt(j);
if(b.getAllUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
userstoriess3.add(a);
}
}
Vector<Artifact> codes4 = new Vector<Artifact>();
Vector<Code> codes = state.getArtifactStateRepository().getCodeStateRepository().getAll();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
boolean alreadyInAction = false;
Vector<AcceptanceTestingAction> allActions = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
AcceptanceTestingAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getPercentIntegrated() == 100.0))
{
codes4.add(a);
}
}
Vector<Project> projs5 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getNumActivitiesOccurring() == 0) && (a.getAcceptanceTesting() == false))
{
projs5.add(a);
}
}
Vector<Artifact> releaseplans6 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<AcceptanceTestingAction> allActions = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
AcceptanceTestingAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
releaseplans6.add(a);
}
}
if((emps0.size() >= 1) && (custs1.size() >= 1) && (acceptancetestcasess2.size() >= 1) && (userstoriess3.size() >= 1) && (codes4.size() >= 1) && (projs5.size() >= 1) && (releaseplans6.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Emp");
c.add("Cust");
c.add("AcceptanceTestCases");
c.add("UserStories");
c.add("Code");
c.add("Proj");
c.add("ReleasePlan");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(emps0);
d.add(custs1);
d.add(acceptancetestcasess2);
d.add(userstoriess3);
d.add(codes4);
d.add(projs5);
d.add(releaseplans6);
AcceptanceTestingAction f = new AcceptanceTestingAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Acceptance testing"))
{
Vector<AcceptanceTestingAction> a = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions();
Vector<AcceptanceTestingAction> b = new Vector<AcceptanceTestingAction>();
for(int i=0; i<a.size(); i++)
{
AcceptanceTestingAction c = a.elementAt(i);
if((c.getAllEmps().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Acceptance testing", ruleExec);
}
else if(s.equals("Release code and end iteration"))
{
Vector<Employee> emps0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<ReleaseCodeAndEndIterationAction> allActions = state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
ReleaseCodeAndEndIterationAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getInIterationPlanningMeeting() == true))
{
emps0.add(a);
}
}
Vector<Project> projs1 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getTimeSinceLastRelease() > 0) && (a.getReleaseMadeThisIteration() == false))
{
projs1.add(a);
}
}
Vector<Artifact> codes2 = new Vector<Artifact>();
Vector<Code> codes = state.getArtifactStateRepository().getCodeStateRepository().getAll();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
boolean alreadyInAction = false;
Vector<ReleaseCodeAndEndIterationAction> allActions = state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
ReleaseCodeAndEndIterationAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getPercentErroneous() == 0.0) && (a.getCompleteness() == 100.0) && (a.getPercentIntegrated() == 100.0))
{
codes2.add(a);
}
}
Vector<Artifact> acceptancetestss3 = new Vector<Artifact>();
Vector<AcceptanceTests> acceptancetestss = state.getArtifactStateRepository().getAcceptanceTestsStateRepository().getAll();
for(int i=0; i<acceptancetestss.size(); i++)
{
AcceptanceTests a = acceptancetestss.elementAt(i);
boolean alreadyInAction = false;
Vector<ReleaseCodeAndEndIterationAction> allActions = state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
ReleaseCodeAndEndIterationAction b = allActions.elementAt(j);
if(b.getAllAcceptanceTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getTestsRun() == 100.0) && (a.getTestsFailed() == 0.0))
{
acceptancetestss3.add(a);
}
}
Vector<Artifact> releaseplans4 = new Vector<Artifact>();
Vector<ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
boolean alreadyInAction = false;
Vector<ReleaseCodeAndEndIterationAction> allActions = state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
ReleaseCodeAndEndIterationAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getCompleteness() == 100.0))
{
releaseplans4.add(a);
}
}
Vector<Artifact> userstoriess5 = new Vector<Artifact>();
Vector<UserStories> userstoriess = state.getArtifactStateRepository().getUserStoriesStateRepository().getAll();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
boolean alreadyInAction = false;
Vector<ReleaseCodeAndEndIterationAction> allActions = state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
ReleaseCodeAndEndIterationAction b = allActions.elementAt(j);
if(b.getAllUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
userstoriess5.add(a);
}
}
if((emps0.size() >= 1) && (projs1.size() >= 1) && (codes2.size() >= 1) && (acceptancetestss3.size() >= 1) && (releaseplans4.size() >= 1) && (userstoriess5.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Emp");
c.add("Proj");
c.add("Code");
c.add("AcceptanceTests");
c.add("ReleasePlan");
c.add("UserStories");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(emps0);
d.add(projs1);
d.add(codes2);
d.add(acceptancetestss3);
d.add(releaseplans4);
d.add(userstoriess5);
ReleaseCodeAndEndIterationAction f = new ReleaseCodeAndEndIterationAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
else if(s.equals("JOIN Release code and end iteration"))
{
Vector<ReleaseCodeAndEndIterationAction> a = state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().getAllActions();
Vector<ReleaseCodeAndEndIterationAction> b = new Vector<ReleaseCodeAndEndIterationAction>();
for(int i=0; i<a.size(); i++)
{
ReleaseCodeAndEndIterationAction c = a.elementAt(i);
if((c.getAllEmps().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Release code and end iteration", ruleExec);
}
else if(s.equals("Deliver final product to customer"))
{
int choice = JOptionPane.showConfirmDialog(null, ("Are you sure you want to end the game?"), "Confirm Game Ending", JOptionPane.YES_NO_OPTION);
if(choice == JOptionPane.YES_OPTION)
{
Vector<Employee> emps0 = new Vector<Employee>();
Vector<SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
boolean alreadyInAction = false;
Vector<DeliverFinalProductToCustomerAction> allActions = state.getActionStateRepository().getDeliverFinalProductToCustomerActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
DeliverFinalProductToCustomerAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
emps0.add(a);
}
}
Vector<Manager> managers = state.getEmployeeStateRepository().getManagerStateRepository().getAll();
for(int i=0; i<managers.size(); i++)
{
Manager a = managers.elementAt(i);
boolean alreadyInAction = false;
Vector<DeliverFinalProductToCustomerAction> allActions = state.getActionStateRepository().getDeliverFinalProductToCustomerActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
DeliverFinalProductToCustomerAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
emps0.add(a);
}
}
Vector<CustomerRep> customerreps = state.getEmployeeStateRepository().getCustomerRepStateRepository().getAll();
for(int i=0; i<customerreps.size(); i++)
{
CustomerRep a = customerreps.elementAt(i);
boolean alreadyInAction = false;
Vector<DeliverFinalProductToCustomerAction> allActions = state.getActionStateRepository().getDeliverFinalProductToCustomerActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
DeliverFinalProductToCustomerAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
emps0.add(a);
}
}
Vector<Project> projs1 = new Vector<Project>();
Vector<TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
boolean alreadyInAction = false;
if((alreadyInAction == false) && (a.getIterationStarted() == false))
{
projs1.add(a);
}
}
Vector<Artifact> userstoriess2 = new Vector<Artifact>();
Vector<UserStories> userstoriess = state.getArtifactStateRepository().getUserStoriesStateRepository().getAll();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
boolean alreadyInAction = false;
Vector<DeliverFinalProductToCustomerAction> allActions = state.getActionStateRepository().getDeliverFinalProductToCustomerActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
DeliverFinalProductToCustomerAction b = allActions.elementAt(j);
if(b.getAllUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) && (a.getNumUserStoriesImplemented() >= 79.5) && (a.getNumUserStoriesIntegrated() == 80.0) && (a.getPercentErroneous() == 0.0))
{
userstoriess2.add(a);
}
}
Vector<Artifact> acceptancetestss3 = new Vector<Artifact>();
Vector<AcceptanceTests> acceptancetestss = state.getArtifactStateRepository().getAcceptanceTestsStateRepository().getAll();
for(int i=0; i<acceptancetestss.size(); i++)
{
AcceptanceTests a = acceptancetestss.elementAt(i);
boolean alreadyInAction = false;
Vector<DeliverFinalProductToCustomerAction> allActions = state.getActionStateRepository().getDeliverFinalProductToCustomerActionStateRepository().getAllActions(a);
for(int j=0; j<allActions.size(); j++)
{
DeliverFinalProductToCustomerAction b = allActions.elementAt(j);
if(b.getAllAcceptanceTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false))
{
acceptancetestss3.add(a);
}
}
if((emps0.size() >= 1) && (projs1.size() >= 1) && (userstoriess2.size() >= 1) && (acceptancetestss3.size() >= 1))
{
Vector<String> c = new Vector<String>();
c.add("Emp");
c.add("Proj");
c.add("UserStories");
c.add("AcceptanceTests");
Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
d.add(emps0);
d.add(projs1);
d.add(userstoriess2);
d.add(acceptancetestss3);
DeliverFinalProductToCustomerAction f = new DeliverFinalProductToCustomerAction();
new ParticipantSelectionDialogsDriver(parent, c, d, f, state, ruleExec, destChecker, e, s);
}
}
}
else if(s.equals("JOIN Deliver final product to customer"))
{
Vector<DeliverFinalProductToCustomerAction> a = state.getActionStateRepository().getDeliverFinalProductToCustomerActionStateRepository().getAllActions();
Vector<DeliverFinalProductToCustomerAction> b = new Vector<DeliverFinalProductToCustomerAction>();
for(int i=0; i<a.size(); i++)
{
DeliverFinalProductToCustomerAction c = a.elementAt(i);
if((c.getAllEmps().contains(e) == false) && (b.contains(c) == false))
{
b.add(c);
}
}
new ChooseActionToJoinDialog(parent, b, e, state, "Deliver final product to customer", ruleExec);
}
else if(s.equals("Stop designing"))
{
Vector<DesignAction> allActions = state.getActionStateRepository().getDesignActionStateRepository().getAllActions();
int a = 0;
for(int i=0; i<allActions.size(); i++)
{
DesignAction b = allActions.elementAt(i);
if(b.getAllParticipants().contains(e))
{
a++;
}
}
if(a == 1)
{
for(int i=0; i<allActions.size(); i++)
{
DesignAction b = allActions.elementAt(i);
if(b.getAllDevelopers().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleDesign", b);
b.removeDeveloper(e);
e.setOverheadText("I've stopped designing.");
if(b.getAllDevelopers().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("I've stopped designing.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("I've stopped designing.");
}
}
state.getActionStateRepository().getDesignActionStateRepository().remove(b);
}
}
}
}
else
{
Vector<DesignAction> b = new Vector<DesignAction>();
for(int i=0; i<allActions.size(); i++)
{
DesignAction c = (DesignAction)allActions.elementAt(i);
if((c.getAllDevelopers().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
}
new ChooseActionToDestroyDialog(parent, b, state, e, ruleExec, s);
}
}
else if(s.equals("Stop creating unit tests"))
{
Vector<CreateUnitTestsAction> allActions = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions();
int a = 0;
for(int i=0; i<allActions.size(); i++)
{
CreateUnitTestsAction b = allActions.elementAt(i);
if(b.getAllParticipants().contains(e))
{
a++;
}
}
if(a == 1)
{
for(int i=0; i<allActions.size(); i++)
{
CreateUnitTestsAction b = allActions.elementAt(i);
if(b.getAllDevelopers().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleCreateUT", b);
b.removeDeveloper(e);
e.setOverheadText("I've stopped creating unit tests.");
if(b.getAllDevelopers().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("I've stopped creating unit tests.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("I've stopped creating unit tests.");
}
}
state.getActionStateRepository().getCreateUnitTestsActionStateRepository().remove(b);
}
}
}
}
else
{
Vector<CreateUnitTestsAction> b = new Vector<CreateUnitTestsAction>();
for(int i=0; i<allActions.size(); i++)
{
CreateUnitTestsAction c = (CreateUnitTestsAction)allActions.elementAt(i);
if((c.getAllDevelopers().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
}
new ChooseActionToDestroyDialog(parent, b, state, e, ruleExec, s);
}
}
else if(s.equals("Stop learning coding standard"))
{
Vector<LearnCodingStandardAction> allActions = state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions();
int a = 0;
for(int i=0; i<allActions.size(); i++)
{
LearnCodingStandardAction b = allActions.elementAt(i);
if(b.getAllParticipants().contains(e))
{
a++;
}
}
if(a == 1)
{
for(int i=0; i<allActions.size(); i++)
{
LearnCodingStandardAction b = allActions.elementAt(i);
if(b.getAllDevelopers().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleLearnStd", b);
b.removeDeveloper(e);
e.setOverheadText("I've stopped learning the coding standard");
if(b.getAllDevelopers().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("I've stopped learning the coding standard");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("I've stopped learning the coding standard");
}
}
state.getActionStateRepository().getLearnCodingStandardActionStateRepository().remove(b);
}
}
}
}
else
{
Vector<LearnCodingStandardAction> b = new Vector<LearnCodingStandardAction>();
for(int i=0; i<allActions.size(); i++)
{
LearnCodingStandardAction c = (LearnCodingStandardAction)allActions.elementAt(i);
if((c.getAllDevelopers().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
}
new ChooseActionToDestroyDialog(parent, b, state, e, ruleExec, s);
}
}
else if(s.equals("Stop programming"))
{
Vector<ProgramAction> allActions = state.getActionStateRepository().getProgramActionStateRepository().getAllActions();
int a = 0;
for(int i=0; i<allActions.size(); i++)
{
ProgramAction b = allActions.elementAt(i);
if(b.getAllParticipants().contains(e))
{
a++;
}
}
if(a == 1)
{
for(int i=0; i<allActions.size(); i++)
{
ProgramAction b = allActions.elementAt(i);
if(b.getAllDevelopers().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotProgrammingProgramDest", b);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleProgram", b);
b.removeDeveloper(e);
e.setOverheadText("I've stopped programming.");
if(b.getAllDevelopers().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("I've stopped programming.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("I've stopped programming.");
}
}
state.getActionStateRepository().getProgramActionStateRepository().remove(b);
}
}
}
}
else
{
Vector<ProgramAction> b = new Vector<ProgramAction>();
for(int i=0; i<allActions.size(); i++)
{
ProgramAction c = (ProgramAction)allActions.elementAt(i);
if((c.getAllDevelopers().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
}
new ChooseActionToDestroyDialog(parent, b, state, e, ruleExec, s);
}
}
else if(s.equals("Stop pair programming (Robert and Joyce)"))
{
Vector<PairProgramRobertJoyceAction> allActions = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions();
int a = 0;
for(int i=0; i<allActions.size(); i++)
{
PairProgramRobertJoyceAction b = allActions.elementAt(i);
if(b.getAllParticipants().contains(e))
{
a++;
}
}
if(a == 1)
{
for(int i=0; i<allActions.size(); i++)
{
PairProgramRobertJoyceAction b = allActions.elementAt(i);
if(b.getAllRoberts().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramRJDest", b);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdlePairProgRJ", b);
b.removeRobert(e);
e.setOverheadText("We've stopped pair programming.");
if(b.getAllRoberts().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().remove(b);
}
}
if(b.getAllJoyces().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramRJDest", b);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdlePairProgRJ", b);
b.removeJoyce(e);
e.setOverheadText("We've stopped pair programming.");
if(b.getAllJoyces().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().remove(b);
}
}
}
}
else
{
Vector<PairProgramRobertJoyceAction> b = new Vector<PairProgramRobertJoyceAction>();
for(int i=0; i<allActions.size(); i++)
{
PairProgramRobertJoyceAction c = (PairProgramRobertJoyceAction)allActions.elementAt(i);
if((c.getAllRoberts().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
if((c.getAllJoyces().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
}
new ChooseActionToDestroyDialog(parent, b, state, e, ruleExec, s);
}
}
else if(s.equals("Stop pair programming (Timothy and Reda)"))
{
Vector<PairProgramTimothyRedaAction> allActions = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions();
int a = 0;
for(int i=0; i<allActions.size(); i++)
{
PairProgramTimothyRedaAction b = allActions.elementAt(i);
if(b.getAllParticipants().contains(e))
{
a++;
}
}
if(a == 1)
{
for(int i=0; i<allActions.size(); i++)
{
PairProgramTimothyRedaAction b = allActions.elementAt(i);
if(b.getAllTimothys().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramTRDest", b);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdlePairProgTR", b);
b.removeTimothy(e);
e.setOverheadText("We've stopped pair programming.");
if(b.getAllTimothys().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().remove(b);
}
}
if(b.getAllRedas().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramTRDest", b);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdlePairProgTR", b);
b.removeReda(e);
e.setOverheadText("We've stopped pair programming.");
if(b.getAllRedas().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().remove(b);
}
}
}
}
else
{
Vector<PairProgramTimothyRedaAction> b = new Vector<PairProgramTimothyRedaAction>();
for(int i=0; i<allActions.size(); i++)
{
PairProgramTimothyRedaAction c = (PairProgramTimothyRedaAction)allActions.elementAt(i);
if((c.getAllTimothys().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
if((c.getAllRedas().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
}
new ChooseActionToDestroyDialog(parent, b, state, e, ruleExec, s);
}
}
else if(s.equals("Stop pair programming (Peg & Sigfreido)"))
{
Vector<PairProgramPegSigfreidoAction> allActions = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions();
int a = 0;
for(int i=0; i<allActions.size(); i++)
{
PairProgramPegSigfreidoAction b = allActions.elementAt(i);
if(b.getAllParticipants().contains(e))
{
a++;
}
}
if(a == 1)
{
for(int i=0; i<allActions.size(); i++)
{
PairProgramPegSigfreidoAction b = allActions.elementAt(i);
if(b.getAllPegs().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramPSDest", b);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdlePairProgPS", b);
b.removePeg(e);
e.setOverheadText("We've stopped pair programming.");
if(b.getAllPegs().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().remove(b);
}
}
if(b.getAllSigfreidos().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramPSDest", b);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdlePairProgPS", b);
b.removeSigfreido(e);
e.setOverheadText("We've stopped pair programming.");
if(b.getAllSigfreidos().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().remove(b);
}
}
}
}
else
{
Vector<PairProgramPegSigfreidoAction> b = new Vector<PairProgramPegSigfreidoAction>();
for(int i=0; i<allActions.size(); i++)
{
PairProgramPegSigfreidoAction c = (PairProgramPegSigfreidoAction)allActions.elementAt(i);
if((c.getAllPegs().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
if((c.getAllSigfreidos().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
}
new ChooseActionToDestroyDialog(parent, b, state, e, ruleExec, s);
}
}
else if(s.equals("Stop unit testing and fixing"))
{
Vector<UnitTestingAndFixingAction> allActions = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions();
int a = 0;
for(int i=0; i<allActions.size(); i++)
{
UnitTestingAndFixingAction b = allActions.elementAt(i);
if(b.getAllParticipants().contains(e))
{
a++;
}
}
if(a == 1)
{
for(int i=0; i<allActions.size(); i++)
{
UnitTestingAndFixingAction b = allActions.elementAt(i);
if(b.getAllEmps().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleUTFix", b);
b.removeEmp(e);
e.setOverheadText("I've stopped unit testing and fixing");
if(b.getAllEmps().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("I've stopped unit testing and fixing");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("I've stopped unit testing and fixing");
}
}
state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().remove(b);
}
}
}
}
else
{
Vector<UnitTestingAndFixingAction> b = new Vector<UnitTestingAndFixingAction>();
for(int i=0; i<allActions.size(); i++)
{
UnitTestingAndFixingAction c = (UnitTestingAndFixingAction)allActions.elementAt(i);
if((c.getAllEmps().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
}
new ChooseActionToDestroyDialog(parent, b, state, e, ruleExec, s);
}
}
else if(s.equals("Stop refactoring"))
{
Vector<RefactorAction> allActions = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions();
int a = 0;
for(int i=0; i<allActions.size(); i++)
{
RefactorAction b = allActions.elementAt(i);
if(b.getAllParticipants().contains(e))
{
a++;
}
}
if(a == 1)
{
for(int i=0; i<allActions.size(); i++)
{
RefactorAction b = allActions.elementAt(i);
if(b.getAllEmps().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleRefactor", b);
b.removeEmp(e);
e.setOverheadText("I've stopped refactoring the code");
if(b.getAllEmps().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("I've stopped refactoring the code");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("I've stopped refactoring the code");
}
}
state.getActionStateRepository().getRefactorActionStateRepository().remove(b);
}
}
}
}
else
{
Vector<RefactorAction> b = new Vector<RefactorAction>();
for(int i=0; i<allActions.size(); i++)
{
RefactorAction c = (RefactorAction)allActions.elementAt(i);
if((c.getAllEmps().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
}
new ChooseActionToDestroyDialog(parent, b, state, e, ruleExec, s);
}
}
else if(s.equals("Stop integrating - Robert and Joyce"))
{
Vector<IntegrateRobertJoyceAction> allActions = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions();
int a = 0;
for(int i=0; i<allActions.size(); i++)
{
IntegrateRobertJoyceAction b = allActions.elementAt(i);
if(b.getAllParticipants().contains(e))
{
a++;
}
}
if(a == 1)
{
for(int i=0; i<allActions.size(); i++)
{
IntegrateRobertJoyceAction b = allActions.elementAt(i);
if(b.getAllRoberts().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotIntegratingRJ", b);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleIntRJ", b);
b.removeRobert(e);
e.setOverheadText("We've stopped integrating.");
if(b.getAllRoberts().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().remove(b);
}
}
if(b.getAllJoyces().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotIntegratingRJ", b);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleIntRJ", b);
b.removeJoyce(e);
e.setOverheadText("We've stopped integrating.");
if(b.getAllJoyces().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().remove(b);
}
}
}
}
else
{
Vector<IntegrateRobertJoyceAction> b = new Vector<IntegrateRobertJoyceAction>();
for(int i=0; i<allActions.size(); i++)
{
IntegrateRobertJoyceAction c = (IntegrateRobertJoyceAction)allActions.elementAt(i);
if((c.getAllRoberts().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
if((c.getAllJoyces().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
}
new ChooseActionToDestroyDialog(parent, b, state, e, ruleExec, s);
}
}
else if(s.equals("Stop integrating - Timothy and Reda"))
{
Vector<IntegrateTimothyRedaAction> allActions = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions();
int a = 0;
for(int i=0; i<allActions.size(); i++)
{
IntegrateTimothyRedaAction b = allActions.elementAt(i);
if(b.getAllParticipants().contains(e))
{
a++;
}
}
if(a == 1)
{
for(int i=0; i<allActions.size(); i++)
{
IntegrateTimothyRedaAction b = allActions.elementAt(i);
if(b.getAllTimothys().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotIntegratingTR", b);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleIntTR", b);
b.removeTimothy(e);
e.setOverheadText("We've stopped integrating.");
if(b.getAllTimothys().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().remove(b);
}
}
if(b.getAllRedas().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotIntegratingTR", b);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleIntTR", b);
b.removeReda(e);
e.setOverheadText("We've stopped integrating.");
if(b.getAllRedas().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().remove(b);
}
}
}
}
else
{
Vector<IntegrateTimothyRedaAction> b = new Vector<IntegrateTimothyRedaAction>();
for(int i=0; i<allActions.size(); i++)
{
IntegrateTimothyRedaAction c = (IntegrateTimothyRedaAction)allActions.elementAt(i);
if((c.getAllTimothys().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
if((c.getAllRedas().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
}
new ChooseActionToDestroyDialog(parent, b, state, e, ruleExec, s);
}
}
else if(s.equals("Stop integrating - Peg and Sigfreido"))
{
Vector<IntegratePegSigfreidoAction> allActions = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions();
int a = 0;
for(int i=0; i<allActions.size(); i++)
{
IntegratePegSigfreidoAction b = allActions.elementAt(i);
if(b.getAllParticipants().contains(e))
{
a++;
}
}
if(a == 1)
{
for(int i=0; i<allActions.size(); i++)
{
IntegratePegSigfreidoAction b = allActions.elementAt(i);
if(b.getAllPegs().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotIntegratingPS", b);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleIntPS", b);
b.removePeg(e);
e.setOverheadText("We've stopped integrating.");
if(b.getAllPegs().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().remove(b);
}
}
if(b.getAllSigfreidos().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotIntegratingPS", b);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleIntPS", b);
b.removeSigfreido(e);
e.setOverheadText("We've stopped integrating.");
if(b.getAllSigfreidos().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().remove(b);
}
}
}
}
else
{
Vector<IntegratePegSigfreidoAction> b = new Vector<IntegratePegSigfreidoAction>();
for(int i=0; i<allActions.size(); i++)
{
IntegratePegSigfreidoAction c = (IntegratePegSigfreidoAction)allActions.elementAt(i);
if((c.getAllPegs().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
if((c.getAllSigfreidos().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
}
new ChooseActionToDestroyDialog(parent, b, state, e, ruleExec, s);
}
}
else if(s.equals("Stop integrating"))
{
Vector<IntegrateAction> allActions = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions();
int a = 0;
for(int i=0; i<allActions.size(); i++)
{
IntegrateAction b = allActions.elementAt(i);
if(b.getAllParticipants().contains(e))
{
a++;
}
}
if(a == 1)
{
for(int i=0; i<allActions.size(); i++)
{
IntegrateAction b = allActions.elementAt(i);
if(b.getAllEmps().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetNotIntegrating", b);
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleIntegrate", b);
b.removeEmp(e);
e.setOverheadText("I've stopped integrating");
if(b.getAllEmps().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("I've stopped integrating");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("I've stopped integrating");
}
}
state.getActionStateRepository().getIntegrateActionStateRepository().remove(b);
}
}
}
}
else
{
Vector<IntegrateAction> b = new Vector<IntegrateAction>();
for(int i=0; i<allActions.size(); i++)
{
IntegrateAction c = (IntegrateAction)allActions.elementAt(i);
if((c.getAllEmps().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
}
new ChooseActionToDestroyDialog(parent, b, state, e, ruleExec, s);
}
}
else if(s.equals("Stop acceptance testing"))
{
Vector<AcceptanceTestingAction> allActions = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions();
int a = 0;
for(int i=0; i<allActions.size(); i++)
{
AcceptanceTestingAction b = allActions.elementAt(i);
if(b.getAllParticipants().contains(e))
{
a++;
}
}
if(a == 1)
{
for(int i=0; i<allActions.size(); i++)
{
AcceptanceTestingAction b = allActions.elementAt(i);
if(b.getAllEmps().contains(e))
{
ruleExec.update(parent, RuleExecutor.UPDATE_ONE, "SetIdleAccTest", b);
b.removeEmp(e);
e.setOverheadText("We've halted acceptance testing");
if(b.getAllEmps().size() < 1)
{
Vector<SSObject> c = b.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
((Employee)d).setOverheadText("We've halted acceptance testing");
}
else if(d instanceof Customer)
{
((Customer)d).setOverheadText("We've halted acceptance testing");
}
}
state.getActionStateRepository().getAcceptanceTestingActionStateRepository().remove(b);
}
}
}
}
else
{
Vector<AcceptanceTestingAction> b = new Vector<AcceptanceTestingAction>();
for(int i=0; i<allActions.size(); i++)
{
AcceptanceTestingAction c = (AcceptanceTestingAction)allActions.elementAt(i);
if((c.getAllEmps().contains(e)) && (!(b.contains(c))))
{
b.add(c);
}
}
new ChooseActionToDestroyDialog(parent, b, state, e, ruleExec, s);
}
}
}
// update all employees' menus:
Vector<Employee> allEmps = state.getEmployeeStateRepository().getAll();
for(int i=0; i<allEmps.size(); i++)
{
allEmps.elementAt(i).clearMenu();
}
// update trigger checker:
trigChecker.update(true, parent);
// update destroyer checker:
destChecker.update(true, parent);
// update gui:
((SimSEGUI)parent).update();
}
}
