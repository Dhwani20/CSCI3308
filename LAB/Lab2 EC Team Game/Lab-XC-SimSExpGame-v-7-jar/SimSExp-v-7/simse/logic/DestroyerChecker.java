/* File generated by: simse.codegenerator.logicgenerator.DestroyerCheckerGenerator */
package simse.logic;
import simse.state.*;
import simse.gui.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import java.util.*;
import javax.swing.*;
public class DestroyerChecker
{
private State state;
private RuleExecutor ruleExec;
private TriggerChecker trigCheck;
private Random ranNumGen;
public DestroyerChecker(State s, RuleExecutor r, TriggerChecker t)
{
state = s;
ruleExec = r;
trigCheck = t;
ranNumGen = new Random();
}
public void update(boolean updateUserDestsOnly, JFrame gui)
{
Vector<simse.adts.actions.Action> actions = state.getActionStateRepository().getAllActions();
for(int i=0; i<actions.size(); i++)
{
simse.adts.actions.Action tempAct = actions.elementAt(i);
if((tempAct instanceof CreateProgrammingTasksAction) && (state.getActionStateRepository().getCreateProgrammingTasksActionStateRepository().getAllActions().contains(tempAct)))
{
CreateProgrammingTasksAction createprogrammingtasksTempAct = (CreateProgrammingTasksAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> emps = createprogrammingtasksTempAct.getAllEmps();
for(int j=0; j<emps.size(); j++)
{
Employee a = emps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> iterationplans = createprogrammingtasksTempAct.getAllIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact a = iterationplans.elementAt(j);
if(a instanceof CurrentIterationPlan)
{
if((!(((CurrentIterationPlan)a).getCompleteness() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Project> projs = createprogrammingtasksTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> releaseplans = createprogrammingtasksTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("We have finished creating and signing up for programming tasks.");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("We have finished creating and signing up for programming tasks.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetProgrammingTasksChosen", tempAct);
state.getActionStateRepository().getCreateProgrammingTasksActionStateRepository().remove(createprogrammingtasksTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof IterationPlanningMeetingAction) && (state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions().contains(tempAct)))
{
IterationPlanningMeetingAction iterationplanningmeetingTempAct = (IterationPlanningMeetingAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> developers = iterationplanningmeetingTempAct.getAllDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee a = developers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Employee> customerreps = iterationplanningmeetingTempAct.getAllCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee a = customerreps.elementAt(j);
if(a instanceof CustomerRep)
{
}
}
Vector<Artifact> iterationplans = iterationplanningmeetingTempAct.getAllIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact a = iterationplans.elementAt(j);
if(a instanceof CurrentIterationPlan)
{
if((!(((CurrentIterationPlan)a).getCompleteness() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Project> projs = iterationplanningmeetingTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> releaseplans = iterationplanningmeetingTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
if((!(((ReleasePlan)a).getCustomerInvolved() == 1)))
{
destroy = false;
break;
}
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("We have completed the iteration plan and adjourned the meeting.");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("We have completed the iteration plan and adjourned the meeting.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIterationMtg", tempAct);
state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().remove(iterationplanningmeetingTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof CreateUserStoriesAction) && (state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions().contains(tempAct)))
{
CreateUserStoriesAction createuserstoriesTempAct = (CreateUserStoriesAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> developers = createuserstoriesTempAct.getAllDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee a = developers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Employee> customerreps = createuserstoriesTempAct.getAllCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee a = customerreps.elementAt(j);
if(a instanceof CustomerRep)
{
}
}
Vector<Artifact> userstoriess = createuserstoriesTempAct.getAllUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact a = userstoriess.elementAt(j);
if(a instanceof UserStories)
{
if((!(((UserStories)a).getSpecificationCompleteness() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Project> projs = createuserstoriesTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("We've finished creating user stories.");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("We've finished creating user stories.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleCreateUS", tempAct);
state.getActionStateRepository().getCreateUserStoriesActionStateRepository().remove(createuserstoriesTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof ReleasePlanningMeetingAction) && (state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions().contains(tempAct)))
{
ReleasePlanningMeetingAction releaseplanningmeetingTempAct = (ReleasePlanningMeetingAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> developers = releaseplanningmeetingTempAct.getAllDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee a = developers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Employee> managers = releaseplanningmeetingTempAct.getAllManagers();
for(int j=0; j<managers.size(); j++)
{
Employee a = managers.elementAt(j);
if(a instanceof Manager)
{
}
}
Vector<Employee> customerreps = releaseplanningmeetingTempAct.getAllCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee a = customerreps.elementAt(j);
if(a instanceof CustomerRep)
{
}
}
Vector<Artifact> releaseplans = releaseplanningmeetingTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
if((!(((ReleasePlan)a).getCompleteness() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Artifact> userstoriess = releaseplanningmeetingTempAct.getAllUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact a = userstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Project> projs = releaseplanningmeetingTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("We've finished the release planning meeting, and produced a release plan, which specifies which user stories are going to be implemented for each system release and dates for those releases.");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("We've finished the release planning meeting, and produced a release plan, which specifies which user stories are going to be implemented for each system release and dates for those releases.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUserStoriesPrioritized", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleReleaseMtg", tempAct);
state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().remove(releaseplanningmeetingTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof StartIterationAction) && (state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions().contains(tempAct)))
{
StartIterationAction startiterationTempAct = (StartIterationAction)tempAct;
if(!updateUserDestsOnly)
{
if(startiterationTempAct.getTimeToLive() == 0)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
}
else if(c instanceof Customer)
{

}
}
state.getActionStateRepository().getStartIterationActionStateRepository().remove(startiterationTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof IterationPlanningMeetingAction) && (state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions().contains(tempAct)))
{
IterationPlanningMeetingAction iterationplanningmeetingTempAct = (IterationPlanningMeetingAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> developers = iterationplanningmeetingTempAct.getAllDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee a = developers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Employee> customerreps = iterationplanningmeetingTempAct.getAllCustomerReps();
for(int j=0; j<customerreps.size(); j++)
{
Employee a = customerreps.elementAt(j);
if(a instanceof CustomerRep)
{
}
}
Vector<Artifact> iterationplans = iterationplanningmeetingTempAct.getAllIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact a = iterationplans.elementAt(j);
if(a instanceof CurrentIterationPlan)
{
if((!(((CurrentIterationPlan)a).getCompleteness() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Project> projs = iterationplanningmeetingTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> releaseplans = iterationplanningmeetingTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
if((!(((ReleasePlan)a).getCustomerInvolved() == 0)))
{
destroy = false;
break;
}
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("We have completed the iteration plan and adjourned the meeting. It took longer than expected because the customer was not involved in the release planning meeting, so we had a lot of issues to hash out in this meeting.");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("We have completed the iteration plan and adjourned the meeting. It took longer than expected because the customer was not involved in the release planning meeting, so we had a lot of issues to hash out in this meeting.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIterationMtg", tempAct);
state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().remove(iterationplanningmeetingTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof ChooseUserStoriesForIterationAction) && (state.getActionStateRepository().getChooseUserStoriesForIterationActionStateRepository().getAllActions().contains(tempAct)))
{
ChooseUserStoriesForIterationAction chooseuserstoriesforiterationTempAct = (ChooseUserStoriesForIterationAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> emps = chooseuserstoriesforiterationTempAct.getAllEmps();
for(int j=0; j<emps.size(); j++)
{
Employee a = emps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
else if(a instanceof CustomerRep)
{
}
}
Vector<Project> projs = chooseuserstoriesforiterationTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> iterationplans = chooseuserstoriesforiterationTempAct.getAllIterationPlans();
for(int j=0; j<iterationplans.size(); j++)
{
Artifact a = iterationplans.elementAt(j);
if(a instanceof CurrentIterationPlan)
{
if((!(((CurrentIterationPlan)a).getCompleteness() >= 50.0)))
{
destroy = false;
break;
}
}
}
Vector<Artifact> releaseplans = chooseuserstoriesforiterationTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("We have chosen about 20 user stories to be completed in this iteration.");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("We have chosen about 20 user stories to be completed in this iteration.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUserStoriesChosen", tempAct);
state.getActionStateRepository().getChooseUserStoriesForIterationActionStateRepository().remove(chooseuserstoriesforiterationTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof CreateAcceptanceTestsAction) && (state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions().contains(tempAct)))
{
CreateAcceptanceTestsAction createacceptancetestsTempAct = (CreateAcceptanceTestsAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> developers = createacceptancetestsTempAct.getAllDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee a = developers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Employee> custreps = createacceptancetestsTempAct.getAllCustReps();
for(int j=0; j<custreps.size(); j++)
{
Employee a = custreps.elementAt(j);
if(a instanceof CustomerRep)
{
}
}
Vector<Artifact> testss = createacceptancetestsTempAct.getAllTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact a = testss.elementAt(j);
if(a instanceof AcceptanceTests)
{
if((!(((AcceptanceTests)a).getCompleteness() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Project> projs = createacceptancetestsTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> releaseplans = createacceptancetestsTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("We've finished creating the acceptance tests");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("We've finished creating the acceptance tests");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetAccTestsCreated", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsCreateATDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleCreateAccTests", tempAct);
state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().remove(createacceptancetestsTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof DesignAction) && (state.getActionStateRepository().getDesignActionStateRepository().getAllActions().contains(tempAct)))
{
DesignAction designTempAct = (DesignAction)tempAct;
boolean destroy = true;
Vector<Employee> developers = designTempAct.getAllDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee a = developers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Tool> crccardss = designTempAct.getAllCRCCardss();
for(int j=0; j<crccardss.size(); j++)
{
Tool a = crccardss.elementAt(j);
if(a instanceof CRCCards)
{
}
}
Vector<Artifact> designs = designTempAct.getAllDesigns();
for(int j=0; j<designs.size(); j++)
{
Artifact a = designs.elementAt(j);
if(a instanceof Design)
{
}
}
Vector<Project> projs = designTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = designTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = designTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).addMenuItem("Stop designing");
}
}
}
}
if((tempAct instanceof DesignAction) && (state.getActionStateRepository().getDesignActionStateRepository().getAllActions().contains(tempAct)))
{
DesignAction designTempAct = (DesignAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> developers = designTempAct.getAllDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee a = developers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Tool> crccardss = designTempAct.getAllCRCCardss();
for(int j=0; j<crccardss.size(); j++)
{
Tool a = crccardss.elementAt(j);
if(a instanceof CRCCards)
{
}
}
Vector<Artifact> designs = designTempAct.getAllDesigns();
for(int j=0; j<designs.size(); j++)
{
Artifact a = designs.elementAt(j);
if(a instanceof Design)
{
if((!(((Design)a).getNumCRCCardsCompleted() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Project> projs = designTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = designTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = designTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("We've finished designing.");
((Employee) c).removeMenuItem("Stop designing");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("We've finished designing.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsDesignDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleDesign", tempAct);
state.getActionStateRepository().getDesignActionStateRepository().remove(designTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof CreateUnitTestsAction) && (state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions().contains(tempAct)))
{
CreateUnitTestsAction createunittestsTempAct = (CreateUnitTestsAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> developers = createunittestsTempAct.getAllDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee a = developers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> testss = createunittestsTempAct.getAllTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact a = testss.elementAt(j);
if(a instanceof UnitTests)
{
if((!(((UnitTests)a).getCompleteness() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Tool> testingframeworks = createunittestsTempAct.getAllTestingFrameworks();
for(int j=0; j<testingframeworks.size(); j++)
{
Tool a = testingframeworks.elementAt(j);
if(a instanceof UnitTestingFramework)
{
}
}
Vector<Project> projs = createunittestsTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateddesigns = createunittestsTempAct.getAllAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact a = associateddesigns.elementAt(j);
if(a instanceof Design)
{
}
}
Vector<Artifact> releaseplans = createunittestsTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("We've finished creating unit tests.");
((Employee) c).removeMenuItem("Stop creating unit tests");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("We've finished creating unit tests.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUnitTestsCreated", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsCreateUTDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleCreateUT", tempAct);
state.getActionStateRepository().getCreateUnitTestsActionStateRepository().remove(createunittestsTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof CreateUnitTestsAction) && (state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions().contains(tempAct)))
{
CreateUnitTestsAction createunittestsTempAct = (CreateUnitTestsAction)tempAct;
boolean destroy = true;
Vector<Employee> developers = createunittestsTempAct.getAllDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee a = developers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> testss = createunittestsTempAct.getAllTestss();
for(int j=0; j<testss.size(); j++)
{
Artifact a = testss.elementAt(j);
if(a instanceof UnitTests)
{
}
}
Vector<Tool> testingframeworks = createunittestsTempAct.getAllTestingFrameworks();
for(int j=0; j<testingframeworks.size(); j++)
{
Tool a = testingframeworks.elementAt(j);
if(a instanceof UnitTestingFramework)
{
}
}
Vector<Project> projs = createunittestsTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateddesigns = createunittestsTempAct.getAllAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact a = associateddesigns.elementAt(j);
if(a instanceof Design)
{
}
}
Vector<Artifact> releaseplans = createunittestsTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).addMenuItem("Stop creating unit tests");
}
}
}
}
if((tempAct instanceof LearnCodingStandardAction) && (state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions().contains(tempAct)))
{
LearnCodingStandardAction learncodingstandardTempAct = (LearnCodingStandardAction)tempAct;
boolean destroy = true;
Vector<Employee> developers = learncodingstandardTempAct.getAllDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee a = developers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Tool> codingstandards = learncodingstandardTempAct.getAllCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool a = codingstandards.elementAt(j);
if(a instanceof CodingStandard)
{
}
}
Vector<Project> projs = learncodingstandardTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).addMenuItem("Stop learning coding standard");
}
}
}
}
if((tempAct instanceof LearnCodingStandardAction) && (state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions().contains(tempAct)))
{
LearnCodingStandardAction learncodingstandardTempAct = (LearnCodingStandardAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> developers = learncodingstandardTempAct.getAllDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee a = developers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
if((!(((SoftwareDeveloper)a).getKnowsCodingStandardNumerical() == 1.0)))
{
destroy = false;
break;
}
}
}
Vector<Tool> codingstandards = learncodingstandardTempAct.getAllCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool a = codingstandards.elementAt(j);
if(a instanceof CodingStandard)
{
}
}
Vector<Project> projs = learncodingstandardTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("I'm finished learning the coding standard, and feel comfortable enough to start using it now.");
((Employee) c).removeMenuItem("Stop learning coding standard");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("I'm finished learning the coding standard, and feel comfortable enough to start using it now.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetKnowsCodingStandard", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleLearnStd", tempAct);
state.getActionStateRepository().getLearnCodingStandardActionStateRepository().remove(learncodingstandardTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof ProgramAction) && (state.getActionStateRepository().getProgramActionStateRepository().getAllActions().contains(tempAct)))
{
ProgramAction programTempAct = (ProgramAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> developers = programTempAct.getAllDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee a = developers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = programTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
if((!(((Code)a).getCompleteness() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Tool> codingstandards = programTempAct.getAllCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool a = codingstandards.elementAt(j);
if(a instanceof CodingStandard)
{
}
}
Vector<Artifact> associateddesigns = programTempAct.getAllAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact a = associateddesigns.elementAt(j);
if(a instanceof Design)
{
}
}
Vector<Artifact> associatedunittestss = programTempAct.getAllAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact a = associatedunittestss.elementAt(j);
if(a instanceof UnitTests)
{
}
}
Vector<Project> projs = programTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = programTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = programTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("I've finished programming!");
((Employee) c).removeMenuItem("Stop programming");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("I've finished programming!");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingProgramDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsProgramDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleProgram", tempAct);
state.getActionStateRepository().getProgramActionStateRepository().remove(programTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof ProgramAction) && (state.getActionStateRepository().getProgramActionStateRepository().getAllActions().contains(tempAct)))
{
ProgramAction programTempAct = (ProgramAction)tempAct;
boolean destroy = true;
Vector<Employee> developers = programTempAct.getAllDevelopers();
for(int j=0; j<developers.size(); j++)
{
Employee a = developers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = programTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
}
}
Vector<Tool> codingstandards = programTempAct.getAllCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool a = codingstandards.elementAt(j);
if(a instanceof CodingStandard)
{
}
}
Vector<Artifact> associateddesigns = programTempAct.getAllAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact a = associateddesigns.elementAt(j);
if(a instanceof Design)
{
}
}
Vector<Artifact> associatedunittestss = programTempAct.getAllAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact a = associatedunittestss.elementAt(j);
if(a instanceof UnitTests)
{
}
}
Vector<Project> projs = programTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = programTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = programTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).addMenuItem("Stop programming");
}
}
}
}
if((tempAct instanceof PairProgramRobertJoyceAction) && (state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions().contains(tempAct)))
{
PairProgramRobertJoyceAction pairprogramrobertjoyceTempAct = (PairProgramRobertJoyceAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> roberts = pairprogramrobertjoyceTempAct.getAllRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee a = roberts.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Employee> joyces = pairprogramrobertjoyceTempAct.getAllJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee a = joyces.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = pairprogramrobertjoyceTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
if((!(((Code)a).getCompleteness() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Tool> codingstandards = pairprogramrobertjoyceTempAct.getAllCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool a = codingstandards.elementAt(j);
if(a instanceof CodingStandard)
{
}
}
Vector<Artifact> associateddesigns = pairprogramrobertjoyceTempAct.getAllAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact a = associateddesigns.elementAt(j);
if(a instanceof Design)
{
}
}
Vector<Artifact> associatedunittestss = pairprogramrobertjoyceTempAct.getAllAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact a = associatedunittestss.elementAt(j);
if(a instanceof UnitTests)
{
}
}
Vector<Project> projs = pairprogramrobertjoyceTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = pairprogramrobertjoyceTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = pairprogramrobertjoyceTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("We've finished pair programming.");
((Employee) c).removeMenuItem("Stop pair programming (Robert and Joyce)");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("We've finished pair programming.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramRJDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgRJDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgRJ", tempAct);
state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().remove(pairprogramrobertjoyceTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof PairProgramRobertJoyceAction) && (state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions().contains(tempAct)))
{
PairProgramRobertJoyceAction pairprogramrobertjoyceTempAct = (PairProgramRobertJoyceAction)tempAct;
boolean destroy = true;
Vector<Employee> roberts = pairprogramrobertjoyceTempAct.getAllRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee a = roberts.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Employee> joyces = pairprogramrobertjoyceTempAct.getAllJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee a = joyces.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = pairprogramrobertjoyceTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
}
}
Vector<Tool> codingstandards = pairprogramrobertjoyceTempAct.getAllCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool a = codingstandards.elementAt(j);
if(a instanceof CodingStandard)
{
}
}
Vector<Artifact> associateddesigns = pairprogramrobertjoyceTempAct.getAllAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact a = associateddesigns.elementAt(j);
if(a instanceof Design)
{
}
}
Vector<Artifact> associatedunittestss = pairprogramrobertjoyceTempAct.getAllAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact a = associatedunittestss.elementAt(j);
if(a instanceof UnitTests)
{
}
}
Vector<Project> projs = pairprogramrobertjoyceTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = pairprogramrobertjoyceTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = pairprogramrobertjoyceTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).addMenuItem("Stop pair programming (Robert and Joyce)");
}
}
}
}
if((tempAct instanceof PairProgramTimothyRedaAction) && (state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions().contains(tempAct)))
{
PairProgramTimothyRedaAction pairprogramtimothyredaTempAct = (PairProgramTimothyRedaAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> timothys = pairprogramtimothyredaTempAct.getAllTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee a = timothys.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Employee> redas = pairprogramtimothyredaTempAct.getAllRedas();
for(int j=0; j<redas.size(); j++)
{
Employee a = redas.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = pairprogramtimothyredaTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
if((!(((Code)a).getCompleteness() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Tool> codingstandards = pairprogramtimothyredaTempAct.getAllCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool a = codingstandards.elementAt(j);
if(a instanceof CodingStandard)
{
}
}
Vector<Artifact> associateddesigns = pairprogramtimothyredaTempAct.getAllAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact a = associateddesigns.elementAt(j);
if(a instanceof Design)
{
}
}
Vector<Artifact> associatedunittestss = pairprogramtimothyredaTempAct.getAllAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact a = associatedunittestss.elementAt(j);
if(a instanceof UnitTests)
{
}
}
Vector<Project> projs = pairprogramtimothyredaTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = pairprogramtimothyredaTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = pairprogramtimothyredaTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("We've finished pair programming.");
((Employee) c).removeMenuItem("Stop pair programming (Timothy and Reda)");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("We've finished pair programming.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramTRDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgTRDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgTR", tempAct);
state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().remove(pairprogramtimothyredaTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof PairProgramTimothyRedaAction) && (state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions().contains(tempAct)))
{
PairProgramTimothyRedaAction pairprogramtimothyredaTempAct = (PairProgramTimothyRedaAction)tempAct;
boolean destroy = true;
Vector<Employee> timothys = pairprogramtimothyredaTempAct.getAllTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee a = timothys.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Employee> redas = pairprogramtimothyredaTempAct.getAllRedas();
for(int j=0; j<redas.size(); j++)
{
Employee a = redas.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = pairprogramtimothyredaTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
}
}
Vector<Tool> codingstandards = pairprogramtimothyredaTempAct.getAllCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool a = codingstandards.elementAt(j);
if(a instanceof CodingStandard)
{
}
}
Vector<Artifact> associateddesigns = pairprogramtimothyredaTempAct.getAllAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact a = associateddesigns.elementAt(j);
if(a instanceof Design)
{
}
}
Vector<Artifact> associatedunittestss = pairprogramtimothyredaTempAct.getAllAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact a = associatedunittestss.elementAt(j);
if(a instanceof UnitTests)
{
}
}
Vector<Project> projs = pairprogramtimothyredaTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = pairprogramtimothyredaTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = pairprogramtimothyredaTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).addMenuItem("Stop pair programming (Timothy and Reda)");
}
}
}
}
if((tempAct instanceof PairProgramPegSigfreidoAction) && (state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions().contains(tempAct)))
{
PairProgramPegSigfreidoAction pairprogrampegsigfreidoTempAct = (PairProgramPegSigfreidoAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> pegs = pairprogrampegsigfreidoTempAct.getAllPegs();
for(int j=0; j<pegs.size(); j++)
{
Employee a = pegs.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Employee> sigfreidos = pairprogrampegsigfreidoTempAct.getAllSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee a = sigfreidos.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = pairprogrampegsigfreidoTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
if((!(((Code)a).getCompleteness() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Tool> codingstandards = pairprogrampegsigfreidoTempAct.getAllCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool a = codingstandards.elementAt(j);
if(a instanceof CodingStandard)
{
}
}
Vector<Artifact> associateddesigns = pairprogrampegsigfreidoTempAct.getAllAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact a = associateddesigns.elementAt(j);
if(a instanceof Design)
{
}
}
Vector<Artifact> associatedunittestss = pairprogrampegsigfreidoTempAct.getAllAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact a = associatedunittestss.elementAt(j);
if(a instanceof UnitTests)
{
}
}
Vector<Project> projs = pairprogrampegsigfreidoTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = pairprogrampegsigfreidoTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = pairprogrampegsigfreidoTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("We've finished pair programming.");
((Employee) c).removeMenuItem("Stop pair programming (Peg & Sigfreido)");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("We've finished pair programming.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramPSDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgPSDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgPS", tempAct);
state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().remove(pairprogrampegsigfreidoTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof PairProgramPegSigfreidoAction) && (state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions().contains(tempAct)))
{
PairProgramPegSigfreidoAction pairprogrampegsigfreidoTempAct = (PairProgramPegSigfreidoAction)tempAct;
boolean destroy = true;
Vector<Employee> pegs = pairprogrampegsigfreidoTempAct.getAllPegs();
for(int j=0; j<pegs.size(); j++)
{
Employee a = pegs.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Employee> sigfreidos = pairprogrampegsigfreidoTempAct.getAllSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee a = sigfreidos.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = pairprogrampegsigfreidoTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
}
}
Vector<Tool> codingstandards = pairprogrampegsigfreidoTempAct.getAllCodingStandards();
for(int j=0; j<codingstandards.size(); j++)
{
Tool a = codingstandards.elementAt(j);
if(a instanceof CodingStandard)
{
}
}
Vector<Artifact> associateddesigns = pairprogrampegsigfreidoTempAct.getAllAssociatedDesigns();
for(int j=0; j<associateddesigns.size(); j++)
{
Artifact a = associateddesigns.elementAt(j);
if(a instanceof Design)
{
}
}
Vector<Artifact> associatedunittestss = pairprogrampegsigfreidoTempAct.getAllAssociatedUnitTestss();
for(int j=0; j<associatedunittestss.size(); j++)
{
Artifact a = associatedunittestss.elementAt(j);
if(a instanceof UnitTests)
{
}
}
Vector<Project> projs = pairprogrampegsigfreidoTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = pairprogrampegsigfreidoTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = pairprogrampegsigfreidoTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).addMenuItem("Stop pair programming (Peg & Sigfreido)");
}
}
}
}
if((tempAct instanceof UnitTestingAndFixingAction) && (state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions().contains(tempAct)))
{
UnitTestingAndFixingAction unittestingandfixingTempAct = (UnitTestingAndFixingAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> emps = unittestingandfixingTempAct.getAllEmps();
for(int j=0; j<emps.size(); j++)
{
Employee a = emps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = unittestingandfixingTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
if((!(((Code)a).getPercentErroneous() == 0.0)))
{
destroy = false;
break;
}
}
}
Vector<Artifact> unittestss = unittestingandfixingTempAct.getAllUnitTestss();
for(int j=0; j<unittestss.size(); j++)
{
Artifact a = unittestss.elementAt(j);
if(a instanceof UnitTests)
{
}
}
Vector<Tool> testingtools = unittestingandfixingTempAct.getAllTestingTools();
for(int j=0; j<testingtools.size(); j++)
{
Tool a = testingtools.elementAt(j);
if(a instanceof UnitTestingFramework)
{
}
}
Vector<Project> projs = unittestingandfixingTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> acceptancetestss = unittestingandfixingTempAct.getAllAcceptanceTestss();
for(int j=0; j<acceptancetestss.size(); j++)
{
Artifact a = acceptancetestss.elementAt(j);
if(a instanceof AcceptanceTests)
{
}
}
Vector<Artifact> releaseplans = unittestingandfixingTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("I've finished unit testing and fixing");
((Employee) c).removeMenuItem("Stop unit testing and fixing");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("I've finished unit testing and fixing");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsUTDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleUTFix", tempAct);
state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().remove(unittestingandfixingTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof UnitTestingAndFixingAction) && (state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions().contains(tempAct)))
{
UnitTestingAndFixingAction unittestingandfixingTempAct = (UnitTestingAndFixingAction)tempAct;
boolean destroy = true;
Vector<Employee> emps = unittestingandfixingTempAct.getAllEmps();
for(int j=0; j<emps.size(); j++)
{
Employee a = emps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = unittestingandfixingTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
}
}
Vector<Artifact> unittestss = unittestingandfixingTempAct.getAllUnitTestss();
for(int j=0; j<unittestss.size(); j++)
{
Artifact a = unittestss.elementAt(j);
if(a instanceof UnitTests)
{
}
}
Vector<Tool> testingtools = unittestingandfixingTempAct.getAllTestingTools();
for(int j=0; j<testingtools.size(); j++)
{
Tool a = testingtools.elementAt(j);
if(a instanceof UnitTestingFramework)
{
}
}
Vector<Project> projs = unittestingandfixingTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> acceptancetestss = unittestingandfixingTempAct.getAllAcceptanceTestss();
for(int j=0; j<acceptancetestss.size(); j++)
{
Artifact a = acceptancetestss.elementAt(j);
if(a instanceof AcceptanceTests)
{
}
}
Vector<Artifact> releaseplans = unittestingandfixingTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).addMenuItem("Stop unit testing and fixing");
}
}
}
}
if((tempAct instanceof RefactorAction) && (state.getActionStateRepository().getRefactorActionStateRepository().getAllActions().contains(tempAct)))
{
RefactorAction refactorTempAct = (RefactorAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> emps = refactorTempAct.getAllEmps();
for(int j=0; j<emps.size(); j++)
{
Employee a = emps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = refactorTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
if((!(((Code)a).getPercentRefactored() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Project> projs = refactorTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Tool> refactoringtools = refactorTempAct.getAllRefactoringTools();
for(int j=0; j<refactoringtools.size(); j++)
{
Tool a = refactoringtools.elementAt(j);
if(a instanceof RefactoringTool)
{
}
}
Vector<Artifact> releaseplans = refactorTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("I'm finished refactoring the code");
((Employee) c).removeMenuItem("Stop refactoring");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("I'm finished refactoring the code");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsRefactorDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleRefactor", tempAct);
state.getActionStateRepository().getRefactorActionStateRepository().remove(refactorTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof RefactorAction) && (state.getActionStateRepository().getRefactorActionStateRepository().getAllActions().contains(tempAct)))
{
RefactorAction refactorTempAct = (RefactorAction)tempAct;
boolean destroy = true;
Vector<Employee> emps = refactorTempAct.getAllEmps();
for(int j=0; j<emps.size(); j++)
{
Employee a = emps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = refactorTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
}
}
Vector<Project> projs = refactorTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Tool> refactoringtools = refactorTempAct.getAllRefactoringTools();
for(int j=0; j<refactoringtools.size(); j++)
{
Tool a = refactoringtools.elementAt(j);
if(a instanceof RefactoringTool)
{
}
}
Vector<Artifact> releaseplans = refactorTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).addMenuItem("Stop refactoring");
}
}
}
}
if((tempAct instanceof IntegrateRobertJoyceAction) && (state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions().contains(tempAct)))
{
IntegrateRobertJoyceAction integraterobertjoyceTempAct = (IntegrateRobertJoyceAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> roberts = integraterobertjoyceTempAct.getAllRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee a = roberts.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Employee> joyces = integraterobertjoyceTempAct.getAllJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee a = joyces.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = integraterobertjoyceTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
if((!(((Code)a).getPercentIntegrated() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Project> projs = integraterobertjoyceTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = integraterobertjoyceTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = integraterobertjoyceTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("We've finished integrating our code with the rest of the system.");
((Employee) c).removeMenuItem("Stop integrating - Robert and Joyce");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("We've finished integrating our code with the rest of the system.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingRJ", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateRJDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntRJ", tempAct);
state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().remove(integraterobertjoyceTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof IntegrateRobertJoyceAction) && (state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions().contains(tempAct)))
{
IntegrateRobertJoyceAction integraterobertjoyceTempAct = (IntegrateRobertJoyceAction)tempAct;
boolean destroy = true;
Vector<Employee> roberts = integraterobertjoyceTempAct.getAllRoberts();
for(int j=0; j<roberts.size(); j++)
{
Employee a = roberts.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Employee> joyces = integraterobertjoyceTempAct.getAllJoyces();
for(int j=0; j<joyces.size(); j++)
{
Employee a = joyces.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = integraterobertjoyceTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
}
}
Vector<Project> projs = integraterobertjoyceTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = integraterobertjoyceTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = integraterobertjoyceTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).addMenuItem("Stop integrating - Robert and Joyce");
}
}
}
}
if((tempAct instanceof IntegrateTimothyRedaAction) && (state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions().contains(tempAct)))
{
IntegrateTimothyRedaAction integratetimothyredaTempAct = (IntegrateTimothyRedaAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> timothys = integratetimothyredaTempAct.getAllTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee a = timothys.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Employee> redas = integratetimothyredaTempAct.getAllRedas();
for(int j=0; j<redas.size(); j++)
{
Employee a = redas.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = integratetimothyredaTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
if((!(((Code)a).getPercentIntegrated() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Project> projs = integratetimothyredaTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = integratetimothyredaTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = integratetimothyredaTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("We've finished integrating our code with the rest of the system.");
((Employee) c).removeMenuItem("Stop integrating - Timothy and Reda");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("We've finished integrating our code with the rest of the system.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingTR", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateTRDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntTR", tempAct);
state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().remove(integratetimothyredaTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof IntegrateTimothyRedaAction) && (state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions().contains(tempAct)))
{
IntegrateTimothyRedaAction integratetimothyredaTempAct = (IntegrateTimothyRedaAction)tempAct;
boolean destroy = true;
Vector<Employee> timothys = integratetimothyredaTempAct.getAllTimothys();
for(int j=0; j<timothys.size(); j++)
{
Employee a = timothys.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Employee> redas = integratetimothyredaTempAct.getAllRedas();
for(int j=0; j<redas.size(); j++)
{
Employee a = redas.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = integratetimothyredaTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
}
}
Vector<Project> projs = integratetimothyredaTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = integratetimothyredaTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = integratetimothyredaTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).addMenuItem("Stop integrating - Timothy and Reda");
}
}
}
}
if((tempAct instanceof IntegratePegSigfreidoAction) && (state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions().contains(tempAct)))
{
IntegratePegSigfreidoAction integratepegsigfreidoTempAct = (IntegratePegSigfreidoAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> pegs = integratepegsigfreidoTempAct.getAllPegs();
for(int j=0; j<pegs.size(); j++)
{
Employee a = pegs.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Employee> sigfreidos = integratepegsigfreidoTempAct.getAllSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee a = sigfreidos.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = integratepegsigfreidoTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
if((!(((Code)a).getPercentIntegrated() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Project> projs = integratepegsigfreidoTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = integratepegsigfreidoTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = integratepegsigfreidoTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("We've finished integrating our code with the rest of the system.");
((Employee) c).removeMenuItem("Stop integrating - Peg and Sigfreido");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("We've finished integrating our code with the rest of the system.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingPS", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegratePSDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntPS", tempAct);
state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().remove(integratepegsigfreidoTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof IntegratePegSigfreidoAction) && (state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions().contains(tempAct)))
{
IntegratePegSigfreidoAction integratepegsigfreidoTempAct = (IntegratePegSigfreidoAction)tempAct;
boolean destroy = true;
Vector<Employee> pegs = integratepegsigfreidoTempAct.getAllPegs();
for(int j=0; j<pegs.size(); j++)
{
Employee a = pegs.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Employee> sigfreidos = integratepegsigfreidoTempAct.getAllSigfreidos();
for(int j=0; j<sigfreidos.size(); j++)
{
Employee a = sigfreidos.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = integratepegsigfreidoTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
}
}
Vector<Project> projs = integratepegsigfreidoTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = integratepegsigfreidoTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = integratepegsigfreidoTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).addMenuItem("Stop integrating - Peg and Sigfreido");
}
}
}
}
if((tempAct instanceof IntegrateAction) && (state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions().contains(tempAct)))
{
IntegrateAction integrateTempAct = (IntegrateAction)tempAct;
boolean destroy = true;
Vector<Employee> emps = integrateTempAct.getAllEmps();
for(int j=0; j<emps.size(); j++)
{
Employee a = emps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = integrateTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
}
}
Vector<Project> projs = integrateTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = integrateTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = integrateTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).addMenuItem("Stop integrating");
}
}
}
}
if((tempAct instanceof IntegrateAction) && (state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions().contains(tempAct)))
{
IntegrateAction integrateTempAct = (IntegrateAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> emps = integrateTempAct.getAllEmps();
for(int j=0; j<emps.size(); j++)
{
Employee a = emps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Artifact> codes = integrateTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
if((!(((Code)a).getPercentIntegrated() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Project> projs = integrateTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> associateduserstoriess = integrateTempAct.getAllAssociatedUserStoriess();
for(int j=0; j<associateduserstoriess.size(); j++)
{
Artifact a = associateduserstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> releaseplans = integrateTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("I've finished integrating");
((Employee) c).removeMenuItem("Stop integrating");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("I've finished integrating");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegrating", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntegrate", tempAct);
state.getActionStateRepository().getIntegrateActionStateRepository().remove(integrateTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof AcceptanceTestingAction) && (state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions().contains(tempAct)))
{
AcceptanceTestingAction acceptancetestingTempAct = (AcceptanceTestingAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> emps = acceptancetestingTempAct.getAllEmps();
for(int j=0; j<emps.size(); j++)
{
Employee a = emps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Customer> custs = acceptancetestingTempAct.getAllCusts();
for(int j=0; j<custs.size(); j++)
{
Customer a = custs.elementAt(j);
if(a instanceof CustomerRepresentative)
{
}
}
Vector<Artifact> acceptancetestcasess = acceptancetestingTempAct.getAllAcceptanceTestCasess();
for(int j=0; j<acceptancetestcasess.size(); j++)
{
Artifact a = acceptancetestcasess.elementAt(j);
if(a instanceof AcceptanceTests)
{
if((!(((AcceptanceTests)a).getCustomerInvolvedInCreation() == 1)) || (!(((AcceptanceTests)a).getTestsRun() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Artifact> userstoriess = acceptancetestingTempAct.getAllUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact a = userstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> codes = acceptancetestingTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
if((!(((Code)a).getPercentErroneous() == 0.0)))
{
destroy = false;
break;
}
}
}
Vector<Project> projs = acceptancetestingTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> releaseplans = acceptancetestingTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("Hooray! All acceptance tests passed! We can release the code and end this iteration.");
((Employee) c).removeMenuItem("Stop acceptance testing");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("Hooray! All acceptance tests passed! We can release the code and end this iteration.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotAcceptanceTesting", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNumFailedTests", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCodePcntErroneousAccTesting", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUSPcntErroneousAccTesting", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCustomerInvolvedAccTestDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleAccTest", tempAct);
state.getActionStateRepository().getAcceptanceTestingActionStateRepository().remove(acceptancetestingTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof AcceptanceTestingAction) && (state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions().contains(tempAct)))
{
AcceptanceTestingAction acceptancetestingTempAct = (AcceptanceTestingAction)tempAct;
boolean destroy = true;
Vector<Employee> emps = acceptancetestingTempAct.getAllEmps();
for(int j=0; j<emps.size(); j++)
{
Employee a = emps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Customer> custs = acceptancetestingTempAct.getAllCusts();
for(int j=0; j<custs.size(); j++)
{
Customer a = custs.elementAt(j);
if(a instanceof CustomerRepresentative)
{
}
}
Vector<Artifact> acceptancetestcasess = acceptancetestingTempAct.getAllAcceptanceTestCasess();
for(int j=0; j<acceptancetestcasess.size(); j++)
{
Artifact a = acceptancetestcasess.elementAt(j);
if(a instanceof AcceptanceTests)
{
}
}
Vector<Artifact> userstoriess = acceptancetestingTempAct.getAllUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact a = userstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> codes = acceptancetestingTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
}
}
Vector<Project> projs = acceptancetestingTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> releaseplans = acceptancetestingTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).addMenuItem("Stop acceptance testing");
}
}
}
}
if((tempAct instanceof AcceptanceTestingAction) && (state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions().contains(tempAct)))
{
AcceptanceTestingAction acceptancetestingTempAct = (AcceptanceTestingAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> emps = acceptancetestingTempAct.getAllEmps();
for(int j=0; j<emps.size(); j++)
{
Employee a = emps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Customer> custs = acceptancetestingTempAct.getAllCusts();
for(int j=0; j<custs.size(); j++)
{
Customer a = custs.elementAt(j);
if(a instanceof CustomerRepresentative)
{
}
}
Vector<Artifact> acceptancetestcasess = acceptancetestingTempAct.getAllAcceptanceTestCasess();
for(int j=0; j<acceptancetestcasess.size(); j++)
{
Artifact a = acceptancetestcasess.elementAt(j);
if(a instanceof AcceptanceTests)
{
if((!(((AcceptanceTests)a).getCustomerInvolvedInCreation() == 1)) || (!(((AcceptanceTests)a).getTestsRun() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Artifact> userstoriess = acceptancetestingTempAct.getAllUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact a = userstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> codes = acceptancetestingTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
if((!(((Code)a).getPercentErroneous() > 0.0)))
{
destroy = false;
break;
}
}
}
Vector<Project> projs = acceptancetestingTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> releaseplans = acceptancetestingTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("Some of the acceptance tests failed because there are some bugs in the code. The customer wants us to fix them before we move on.");
((Employee) c).removeMenuItem("Stop acceptance testing");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("Some of the acceptance tests failed because there are some bugs in the code. The customer wants us to fix them before we move on.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotAcceptanceTesting", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNumFailedTests", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCodePcntErroneousAccTesting", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUSPcntErroneousAccTesting", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCustomerInvolvedAccTestDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleAccTest", tempAct);
state.getActionStateRepository().getAcceptanceTestingActionStateRepository().remove(acceptancetestingTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof AcceptanceTestingAction) && (state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions().contains(tempAct)))
{
AcceptanceTestingAction acceptancetestingTempAct = (AcceptanceTestingAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> emps = acceptancetestingTempAct.getAllEmps();
for(int j=0; j<emps.size(); j++)
{
Employee a = emps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Customer> custs = acceptancetestingTempAct.getAllCusts();
for(int j=0; j<custs.size(); j++)
{
Customer a = custs.elementAt(j);
if(a instanceof CustomerRepresentative)
{
}
}
Vector<Artifact> acceptancetestcasess = acceptancetestingTempAct.getAllAcceptanceTestCasess();
for(int j=0; j<acceptancetestcasess.size(); j++)
{
Artifact a = acceptancetestcasess.elementAt(j);
if(a instanceof AcceptanceTests)
{
if((!(((AcceptanceTests)a).getCustomerInvolvedInCreation() == 0)) || (!(((AcceptanceTests)a).getTestsRun() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Artifact> userstoriess = acceptancetestingTempAct.getAllUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact a = userstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> codes = acceptancetestingTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
if((!(((Code)a).getPercentErroneous() == 0.0)))
{
destroy = false;
break;
}
}
}
Vector<Project> projs = acceptancetestingTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> releaseplans = acceptancetestingTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("About half of the accpetance tests failed because the customer said they were the wrong tests to run. We have revised the acceptance tests cases, but we now have some work to do correcting the incorrect functionality.");
((Employee) c).removeMenuItem("Stop acceptance testing");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("About half of the accpetance tests failed because the customer said they were the wrong tests to run. We have revised the acceptance tests cases, but we now have some work to do correcting the incorrect functionality.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotAcceptanceTesting", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNumFailedTests", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCodePcntErroneousAccTesting", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUSPcntErroneousAccTesting", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCustomerInvolvedAccTestDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleAccTest", tempAct);
state.getActionStateRepository().getAcceptanceTestingActionStateRepository().remove(acceptancetestingTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof AcceptanceTestingAction) && (state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions().contains(tempAct)))
{
AcceptanceTestingAction acceptancetestingTempAct = (AcceptanceTestingAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> emps = acceptancetestingTempAct.getAllEmps();
for(int j=0; j<emps.size(); j++)
{
Employee a = emps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Customer> custs = acceptancetestingTempAct.getAllCusts();
for(int j=0; j<custs.size(); j++)
{
Customer a = custs.elementAt(j);
if(a instanceof CustomerRepresentative)
{
}
}
Vector<Artifact> acceptancetestcasess = acceptancetestingTempAct.getAllAcceptanceTestCasess();
for(int j=0; j<acceptancetestcasess.size(); j++)
{
Artifact a = acceptancetestcasess.elementAt(j);
if(a instanceof AcceptanceTests)
{
if((!(((AcceptanceTests)a).getCustomerInvolvedInCreation() == 0)) || (!(((AcceptanceTests)a).getTestsRun() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Artifact> userstoriess = acceptancetestingTempAct.getAllUserStoriess();
for(int j=0; j<userstoriess.size(); j++)
{
Artifact a = userstoriess.elementAt(j);
if(a instanceof UserStories)
{
}
}
Vector<Artifact> codes = acceptancetestingTempAct.getAllCodes();
for(int j=0; j<codes.size(); j++)
{
Artifact a = codes.elementAt(j);
if(a instanceof Code)
{
if((!(((Code)a).getPercentErroneous() > 0.0)))
{
destroy = false;
break;
}
}
}
Vector<Project> projs = acceptancetestingTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> releaseplans = acceptancetestingTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("Not only did the customer say we had the wrong acceptance test cases and a lot of incorrect functionality, but the tests also revealed a number of bugs in the code! We have to go back and fix these problems before the customer will accept this release.");
((Employee) c).removeMenuItem("Stop acceptance testing");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("Not only did the customer say we had the wrong acceptance test cases and a lot of incorrect functionality, but the tests also revealed a number of bugs in the code! We have to go back and fix these problems before the customer will accept this release.");
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotAcceptanceTesting", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNumFailedTests", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCodePcntErroneousAccTesting", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUSPcntErroneousAccTesting", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCustomerInvolvedAccTestDest", tempAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleAccTest", tempAct);
state.getActionStateRepository().getAcceptanceTestingActionStateRepository().remove(acceptancetestingTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof ReleaseCodeAndEndIterationAction) && (state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().getAllActions().contains(tempAct)))
{
ReleaseCodeAndEndIterationAction releasecodeandenditerationTempAct = (ReleaseCodeAndEndIterationAction)tempAct;
if(!updateUserDestsOnly)
{
if(releasecodeandenditerationTempAct.getTimeToLive() == 0)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
}
else if(c instanceof Customer)
{

}
}
state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().remove(releasecodeandenditerationTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof RequireReleasePlanDoOverAction) && (state.getActionStateRepository().getRequireReleasePlanDoOverActionStateRepository().getAllActions().contains(tempAct)))
{
RequireReleasePlanDoOverAction requirereleaseplandooverTempAct = (RequireReleasePlanDoOverAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> emps = requirereleaseplandooverTempAct.getAllEmps();
for(int j=0; j<emps.size(); j++)
{
Employee a = emps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
}
}
Vector<Project> projs = requirereleaseplandooverTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
Vector<Artifact> releaseplans = requirereleaseplandooverTempAct.getAllReleasePlans();
for(int j=0; j<releaseplans.size(); j++)
{
Artifact a = releaseplans.elementAt(j);
if(a instanceof ReleasePlan)
{
if((!(((ReleasePlan)a).getCompleteness() == 100.0)))
{
destroy = false;
break;
}
}
}
Vector<Employee> custreps = requirereleaseplandooverTempAct.getAllCustReps();
for(int j=0; j<custreps.size(); j++)
{
Employee a = custreps.elementAt(j);
if(a instanceof CustomerRep)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{

}
else if(c instanceof Customer)
{

}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "ReactivateOtherActions", tempAct);
state.getActionStateRepository().getRequireReleasePlanDoOverActionStateRepository().remove(requirereleaseplandooverTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof CustomerComplainsAction) && (state.getActionStateRepository().getCustomerComplainsActionStateRepository().getAllActions().contains(tempAct)))
{
CustomerComplainsAction customercomplainsTempAct = (CustomerComplainsAction)tempAct;
if(!updateUserDestsOnly)
{
if(customercomplainsTempAct.getTimeToLive() == 0)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
}
else if(c instanceof Customer)
{

}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCustomerNotComplaining", tempAct);
state.getActionStateRepository().getCustomerComplainsActionStateRepository().remove(customercomplainsTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof AllEmployeesIdleAction) && (state.getActionStateRepository().getAllEmployeesIdleActionStateRepository().getAllActions().contains(tempAct)))
{
AllEmployeesIdleAction allemployeesidleTempAct = (AllEmployeesIdleAction)tempAct;
if(!updateUserDestsOnly)
{
if(allemployeesidleTempAct.getTimeToLive() == 0)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
((Employee)c).setOverheadText("I'm bored... I'll just sit here and play solitaire 'til you tell me what to do.");
}
else if(c instanceof Customer)
{
((Customer)c).setOverheadText("I'm bored... I'll just sit here and play solitaire 'til you tell me what to do.");
}
}
state.getActionStateRepository().getAllEmployeesIdleActionStateRepository().remove(allemployeesidleTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof AllEmployeesIdleAction) && (state.getActionStateRepository().getAllEmployeesIdleActionStateRepository().getAllActions().contains(tempAct)))
{
AllEmployeesIdleAction allemployeesidleTempAct = (AllEmployeesIdleAction)tempAct;
if(!updateUserDestsOnly)
{
boolean destroy = true;
Vector<Employee> emps = allemployeesidleTempAct.getAllEmps();
for(int j=0; j<emps.size(); j++)
{
Employee a = emps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
if((!(((SoftwareDeveloper)a).getIdle() == false)))
{
destroy = false;
break;
}
}
}
Vector<Project> projs = allemployeesidleTempAct.getAllProjs();
for(int j=0; j<projs.size(); j++)
{
Project a = projs.elementAt(j);
if(a instanceof TheProject)
{
}
}
if(destroy)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{

}
else if(c instanceof Customer)
{

}
}
state.getActionStateRepository().getAllEmployeesIdleActionStateRepository().remove(allemployeesidleTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
if((tempAct instanceof WarnOfImpendingDeadlineAction) && (state.getActionStateRepository().getWarnOfImpendingDeadlineActionStateRepository().getAllActions().contains(tempAct)))
{
WarnOfImpendingDeadlineAction warnofimpendingdeadlineTempAct = (WarnOfImpendingDeadlineAction)tempAct;
if(!updateUserDestsOnly)
{
if(warnofimpendingdeadlineTempAct.getTimeToLive() == 0)
{
Vector<SSObject> b = tempAct.getAllParticipants();
for(int j=0; j<b.size(); j++)
{
SSObject c = b.elementAt(j);
if(c instanceof Employee)
{
}
else if(c instanceof Customer)
{

}
}
state.getActionStateRepository().getWarnOfImpendingDeadlineActionStateRepository().remove(warnofimpendingdeadlineTempAct);
trigCheck.update(true, gui);
update(false, gui);
}
}
}
}
// update trigger checker:
trigCheck.update(true, gui);
}
}
