/* File generated by: simse.codegenerator.logicgenerator.TriggerCheckerGenerator */
package simse.logic;
import simse.state.*;
import simse.gui.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import java.util.*;
import javax.swing.*;
public class TriggerChecker
{
private State state;
private RuleExecutor ruleExec;
private Random ranNumGen;
public TriggerChecker(State s, RuleExecutor r)
{
state = s;
ruleExec = r;
ranNumGen = new Random();
}
public void update(boolean updateUserTrigsOnly, JFrame gui)
{
Vector <Employee> developers0 = new Vector<Employee>();
Vector <SoftwareDeveloper> softwaredevelopers = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().getAll();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<CreateUserStoriesAction> allActions = state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
CreateUserStoriesAction b = allActions.elementAt(j);
if(b.getAllDevelopers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
developers0.add(a);
}
}
Vector <Employee> customerreps0 = new Vector<Employee>();
Vector <CustomerRep> customerreps = state.getEmployeeStateRepository().getCustomerRepStateRepository().getAll();
for(int i=0; i<customerreps.size(); i++)
{
CustomerRep a = customerreps.elementAt(i);
Vector<CreateUserStoriesAction> allActions = state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
CreateUserStoriesAction b = allActions.elementAt(j);
if(b.getAllCustomerReps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
customerreps0.add(a);
}
}
Vector <Artifact> userstoriess0 = new Vector<Artifact>();
Vector <UserStories> userstoriess = state.getArtifactStateRepository().getUserStoriesStateRepository().getAll();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
Vector<CreateUserStoriesAction> allActions = state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
CreateUserStoriesAction b = allActions.elementAt(j);
if(b.getAllUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getSpecificationCompleteness() < 100.0))
{
userstoriess0.add(a);
}
}
Vector <Project> projs0 = new Vector<Project>();
Vector <TheProject> theprojects = state.getProjectStateRepository().getTheProjectStateRepository().getAll();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<CreateUserStoriesAction> allActions = state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false) )
{
projs0.add(a);
}
}
if((developers0.size()  >= 1) && (customerreps0.size()  >= 1) && (userstoriess0.size()  >= 1) && (projs0.size()  >= 1))
{
for(int j=0; j<developers0.size(); j++)
{
Employee z = (Employee)developers0.elementAt(j);
z.addMenuItem("Create user stories");
}
for(int j=0; j<customerreps0.size(); j++)
{
Employee z = (Employee)customerreps0.elementAt(j);
z.addMenuItem("Create user stories");
}
}
Vector a2s = state.getActionStateRepository().getCreateUserStoriesActionStateRepository().getAllActions();
if(a2s.size() == 0)
{
Vector f2 = state.getEmployeeStateRepository().getAll();
for(int i=0; i<f2.size(); i++)
{
((Employee)f2.elementAt(i)).removeMenuItem("JOIN Create user stories");
}
}
for(int i=0; i<a2s.size(); i++)
{
CreateUserStoriesAction a2 = (CreateUserStoriesAction)a2s.elementAt(i);
if(a2.getAllDevelopers().size() < 999999)
{
Vector b2s = state.getEmployeeStateRepository().getAll();
for(int j=0; j<b2s.size(); j++)
{
Employee b2 = (Employee)b2s.elementAt(j);
if(((b2 instanceof SoftwareDeveloper)) && (a2.getAllDevelopers().contains(b2) == false))
{
boolean z2 = true;
for(int k=0; k<a2s.size(); k++)
{
CreateUserStoriesAction a2b = (CreateUserStoriesAction)a2s.elementAt(k);
if(a2b.getAllDevelopers().contains(b2))
{
z2 = false;
break;
}
}
if(z2 && (b2.getMenu().contains("JOIN Create user stories") == false))
{
if((b2 instanceof SoftwareDeveloper))
{
b2.addMenuItem("JOIN Create user stories");
}
}
}
}
}
if(a2.getAllCustomerReps().size() < 999999)
{
Vector b2s = state.getEmployeeStateRepository().getAll();
for(int j=0; j<b2s.size(); j++)
{
Employee b2 = (Employee)b2s.elementAt(j);
if(((b2 instanceof CustomerRep)) && (a2.getAllCustomerReps().contains(b2) == false))
{
boolean z2 = true;
for(int k=0; k<a2s.size(); k++)
{
CreateUserStoriesAction a2b = (CreateUserStoriesAction)a2s.elementAt(k);
if(a2b.getAllCustomerReps().contains(b2))
{
z2 = false;
break;
}
}
if(z2 && (b2.getMenu().contains("JOIN Create user stories") == false))
{
if((b2 instanceof CustomerRep))
{
b2.addMenuItem("JOIN Create user stories");
}
}
}
}
}
}
Vector <Employee> developers1 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<ReleasePlanningMeetingAction> allActions = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ReleasePlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllDevelopers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
developers1.add(a);
}
}
Vector <Employee> managers1 = new Vector<Employee>();
Vector <Manager> managers = state.getEmployeeStateRepository().getManagerStateRepository().getAll();
for(int i=0; i<managers.size(); i++)
{
Manager a = managers.elementAt(i);
Vector<ReleasePlanningMeetingAction> allActions = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ReleasePlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllManagers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
managers1.add(a);
}
}
Vector <Employee> customerreps1 = new Vector<Employee>();
for(int i=0; i<customerreps.size(); i++)
{
CustomerRep a = customerreps.elementAt(i);
Vector<ReleasePlanningMeetingAction> allActions = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ReleasePlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllCustomerReps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
customerreps1.add(a);
}
}
Vector <Artifact> releaseplans1 = new Vector<Artifact>();
Vector <ReleasePlan> releaseplans = state.getArtifactStateRepository().getReleasePlanStateRepository().getAll();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<ReleasePlanningMeetingAction> allActions = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ReleasePlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 0.0))
{
releaseplans1.add(a);
}
}
Vector <Artifact> userstoriess1 = new Vector<Artifact>();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
Vector<ReleasePlanningMeetingAction> allActions = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ReleasePlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getSpecificationCompleteness() == 100.0))
{
userstoriess1.add(a);
}
}
Vector <Project> projs1 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<ReleasePlanningMeetingAction> allActions = state.getActionStateRepository().getReleasePlanningMeetingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false) )
{
projs1.add(a);
}
}
if((developers1.size()  >= 1) && (managers1.size() > 0) && (customerreps1.size() > 0) && (releaseplans1.size()  >= 1) && (userstoriess1.size()  >= 1) && (projs1.size()  >= 1))
{
for(int j=0; j<developers1.size(); j++)
{
Employee z = (Employee)developers1.elementAt(j);
z.addMenuItem("Hold release planning meeting");
}
for(int j=0; j<managers1.size(); j++)
{
Employee z = (Employee)managers1.elementAt(j);
z.addMenuItem("Hold release planning meeting");
}
for(int j=0; j<customerreps1.size(); j++)
{
Employee z = (Employee)customerreps1.elementAt(j);
z.addMenuItem("Hold release planning meeting");
}
}
Vector <Employee> emps2 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
emps2.add(a);
}
}
Vector <Project> projs2 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getIterationStarted() == false))
{
projs2.add(a);
}
}
Vector <Artifact> releaseplans2 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans2.add(a);
}
}
Vector <Artifact> userstoriess2 = new Vector<Artifact>();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getImplementationCompleteness() < 100.0) && (a.getNumUserStoriesIntegrated() < 80.0))
{
userstoriess2.add(a);
}
}
Vector <Artifact> iterationplans2 = new Vector<Artifact>();
Vector <CurrentIterationPlan> currentiterationplans = state.getArtifactStateRepository().getCurrentIterationPlanStateRepository().getAll();
for(int i=0; i<currentiterationplans.size(); i++)
{
CurrentIterationPlan a = currentiterationplans.elementAt(i);
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllIterationPlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
iterationplans2.add(a);
}
}
Vector <Artifact> designs2 = new Vector<Artifact>();
Vector <Design> designs = state.getArtifactStateRepository().getDesignStateRepository().getAll();
for(int i=0; i<designs.size(); i++)
{
Design a = designs.elementAt(i);
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllDesigns().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
designs2.add(a);
}
}
Vector <Artifact> unittestss2 = new Vector<Artifact>();
Vector <UnitTests> unittestss = state.getArtifactStateRepository().getUnitTestsStateRepository().getAll();
for(int i=0; i<unittestss.size(); i++)
{
UnitTests a = unittestss.elementAt(i);
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllUnitTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
unittestss2.add(a);
}
}
Vector <Artifact> acceptancetestss2 = new Vector<Artifact>();
Vector <AcceptanceTests> acceptancetestss = state.getArtifactStateRepository().getAcceptanceTestsStateRepository().getAll();
for(int i=0; i<acceptancetestss.size(); i++)
{
AcceptanceTests a = acceptancetestss.elementAt(i);
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllAcceptanceTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
acceptancetestss2.add(a);
}
}
Vector <Artifact> codes2 = new Vector<Artifact>();
Vector <Code> codes = state.getArtifactStateRepository().getCodeStateRepository().getAll();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
codes2.add(a);
}
}
Vector <Employee> customerreps2 = new Vector<Employee>();
for(int i=0; i<customerreps.size(); i++)
{
CustomerRep a = customerreps.elementAt(i);
Vector<StartIterationAction> allActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
StartIterationAction b = allActions.elementAt(j);
if(b.getAllCustomerReps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
customerreps2.add(a);
}
}
if((emps2.size()  >= 6) && (projs2.size()  >= 1) && (releaseplans2.size()  >= 1) && (userstoriess2.size()  >= 1) && (iterationplans2.size()  >= 1) && (designs2.size()  >= 1) && (unittestss2.size()  >= 1) && (acceptancetestss2.size()  >= 1) && (codes2.size()  >= 1) && (customerreps2.size()  >= 1))
{
for(int j=0; j<emps2.size(); j++)
{
Employee z = (Employee)emps2.elementAt(j);
z.addMenuItem("Start iteration");
}
for(int j=0; j<customerreps2.size(); j++)
{
Employee z = (Employee)customerreps2.elementAt(j);
z.addMenuItem("Start iteration");
}
}
Vector <Employee> developers3 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<IterationPlanningMeetingAction> allActions = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IterationPlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllDevelopers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getInIterationPlanningMeeting() == false))
{
developers3.add(a);
}
}
Vector <Employee> customerreps3 = new Vector<Employee>();
for(int i=0; i<customerreps.size(); i++)
{
CustomerRep a = customerreps.elementAt(i);
Vector<IterationPlanningMeetingAction> allActions = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IterationPlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllCustomerReps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getInIterationPlanningMeeting() == false))
{
customerreps3.add(a);
}
}
Vector <Artifact> iterationplans3 = new Vector<Artifact>();
for(int i=0; i<currentiterationplans.size(); i++)
{
CurrentIterationPlan a = currentiterationplans.elementAt(i);
Vector<IterationPlanningMeetingAction> allActions = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IterationPlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllIterationPlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() < 100.0))
{
iterationplans3.add(a);
}
}
Vector <Project> projs3 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<IterationPlanningMeetingAction> allActions = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == false) && (a.getProgrammingTasksAssignedThisIteration() == false) && (a.getIterationPlanningMeetingStarted() == false))
{
projs3.add(a);
}
}
Vector <Artifact> releaseplans3 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<IterationPlanningMeetingAction> allActions = state.getActionStateRepository().getIterationPlanningMeetingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IterationPlanningMeetingAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans3.add(a);
}
}
if((developers3.size()  >= 1) && (customerreps3.size()  >= 1) && (iterationplans3.size()  >= 1) && (projs3.size()  >= 1) && (releaseplans3.size()  >= 1))
{
for(int j=0; j<developers3.size(); j++)
{
Employee z = (Employee)developers3.elementAt(j);
z.addMenuItem("Hold iteration planning meeting");
}
for(int j=0; j<customerreps3.size(); j++)
{
Employee z = (Employee)customerreps3.elementAt(j);
z.addMenuItem("Hold iteration planning meeting");
}
}
if(!updateUserTrigsOnly)
{
Vector <Employee> emps4 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<ChooseUserStoriesForIterationAction> allActions = state.getActionStateRepository().getChooseUserStoriesForIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ChooseUserStoriesForIterationAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getInIterationPlanningMeeting() == true))
{
emps4.add(a);
}
}
for(int i=0; i<customerreps.size(); i++)
{
CustomerRep a = customerreps.elementAt(i);
Vector<ChooseUserStoriesForIterationAction> allActions = state.getActionStateRepository().getChooseUserStoriesForIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ChooseUserStoriesForIterationAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getInIterationPlanningMeeting() == true))
{
emps4.add(a);
}
}
Vector <Project> projs4 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<ChooseUserStoriesForIterationAction> allActions = state.getActionStateRepository().getChooseUserStoriesForIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getUserStoriesChosenForThisIteration() == false) && (a.getIterationPlanningMeetingStarted() == true))
{
projs4.add(a);
}
}
Vector <Artifact> iterationplans4 = new Vector<Artifact>();
for(int i=0; i<currentiterationplans.size(); i++)
{
CurrentIterationPlan a = currentiterationplans.elementAt(i);
Vector<ChooseUserStoriesForIterationAction> allActions = state.getActionStateRepository().getChooseUserStoriesForIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ChooseUserStoriesForIterationAction b = allActions.elementAt(j);
if(b.getAllIterationPlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() < 50.0))
{
iterationplans4.add(a);
}
}
Vector <Artifact> releaseplans4 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<ChooseUserStoriesForIterationAction> allActions = state.getActionStateRepository().getChooseUserStoriesForIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ChooseUserStoriesForIterationAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans4.add(a);
}
}
while((emps4.size()  >= 1) && (projs4.size()  >= 1) && (iterationplans4.size()  >= 1) && (releaseplans4.size()  >= 1))
{
ChooseUserStoriesForIterationAction a = new ChooseUserStoriesForIterationAction();
while(true)
{
if(emps4.size() > 0)
{
Employee a0 = emps4.remove(0);
a.addEmp(a0);
}
else
{
break;
}
}
for(int i=0; i<1; i++)
{
if(projs4.size() > 0)
{
Project a1 = projs4.elementAt(0);
a.addProj(a1);
}
else
{
break;
}
}
for(int i=0; i<1; i++)
{
if(iterationplans4.size() > 0)
{
Artifact a2 = iterationplans4.remove(0);
a.addIterationPlan(a2);
}
else
{
break;
}
}
for(int i=0; i<1; i++)
{
if(releaseplans4.size() > 0)
{
Artifact a3 = releaseplans4.remove(0);
a.addReleasePlan(a3);
}
else
{
break;
}
}
// set all overhead texts:
Vector<SSObject> allPart = a.getAllParticipants();
for(int i=0; i<allPart.size(); i++)
{
SSObject tempObj = allPart.elementAt(i);
if(tempObj instanceof Employee)
{
((Employee)tempObj).setOverheadText("We are now choosing which stories will be developed in this iteration.");
}
else if(tempObj instanceof Customer)
{
((Customer)tempObj).setOverheadText("We are now choosing which stories will be developed in this iteration.");
}
}
state.getActionStateRepository().getChooseUserStoriesForIterationActionStateRepository().add(a);
}
}
if(!updateUserTrigsOnly)
{
Vector <Employee> emps5 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<CreateProgrammingTasksAction> allActions = state.getActionStateRepository().getCreateProgrammingTasksActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
CreateProgrammingTasksAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getInIterationPlanningMeeting() == true))
{
emps5.add(a);
}
}
Vector <Artifact> iterationplans5 = new Vector<Artifact>();
for(int i=0; i<currentiterationplans.size(); i++)
{
CurrentIterationPlan a = currentiterationplans.elementAt(i);
Vector<CreateProgrammingTasksAction> allActions = state.getActionStateRepository().getCreateProgrammingTasksActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
CreateProgrammingTasksAction b = allActions.elementAt(j);
if(b.getAllIterationPlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() > 50.0))
{
iterationplans5.add(a);
}
}
Vector <Project> projs5 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<CreateProgrammingTasksAction> allActions = state.getActionStateRepository().getCreateProgrammingTasksActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == false) && (a.getIterationPlanningMeetingStarted() == true))
{
projs5.add(a);
}
}
Vector <Artifact> releaseplans5 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<CreateProgrammingTasksAction> allActions = state.getActionStateRepository().getCreateProgrammingTasksActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
CreateProgrammingTasksAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans5.add(a);
}
}
while((emps5.size()  >= 1) && (iterationplans5.size()  >= 1) && (projs5.size()  >= 1) && (releaseplans5.size()  >= 1))
{
CreateProgrammingTasksAction a = new CreateProgrammingTasksAction();
while(true)
{
if(emps5.size() > 0)
{
Employee a0 = emps5.remove(0);
a.addEmp(a0);
}
else
{
break;
}
}
for(int i=0; i<1; i++)
{
if(iterationplans5.size() > 0)
{
Artifact a1 = iterationplans5.remove(0);
a.addIterationPlan(a1);
}
else
{
break;
}
}
for(int i=0; i<1; i++)
{
if(projs5.size() > 0)
{
Project a2 = projs5.elementAt(0);
a.addProj(a2);
}
else
{
break;
}
}
for(int i=0; i<1; i++)
{
if(releaseplans5.size() > 0)
{
Artifact a3 = releaseplans5.remove(0);
a.addReleasePlan(a3);
}
else
{
break;
}
}
// set all overhead texts:
Vector<SSObject> allPart = a.getAllParticipants();
for(int i=0; i<allPart.size(); i++)
{
SSObject tempObj = allPart.elementAt(i);
if(tempObj instanceof Employee)
{
((Employee)tempObj).setOverheadText("We are now breaking down the user stories into programming tasks and signing up for who will complete each one.");
}
else if(tempObj instanceof Customer)
{
((Customer)tempObj).setOverheadText("We are now breaking down the user stories into programming tasks and signing up for who will complete each one.");
}
}
state.getActionStateRepository().getCreateProgrammingTasksActionStateRepository().add(a);
}
}
Vector <Employee> developers6 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<CreateAcceptanceTestsAction> allActions = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
CreateAcceptanceTestsAction b = allActions.elementAt(j);
if(b.getAllDevelopers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getInIterationPlanningMeeting() == true))
{
developers6.add(a);
}
}
Vector <Employee> custreps6 = new Vector<Employee>();
for(int i=0; i<customerreps.size(); i++)
{
CustomerRep a = customerreps.elementAt(i);
Vector<CreateAcceptanceTestsAction> allActions = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
CreateAcceptanceTestsAction b = allActions.elementAt(j);
if(b.getAllCustReps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getInIterationPlanningMeeting() == true))
{
custreps6.add(a);
}
}
Vector <Artifact> testss6 = new Vector<Artifact>();
for(int i=0; i<acceptancetestss.size(); i++)
{
AcceptanceTests a = acceptancetestss.elementAt(i);
Vector<CreateAcceptanceTestsAction> allActions = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
CreateAcceptanceTestsAction b = allActions.elementAt(j);
if(b.getAllTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() < 100.0))
{
testss6.add(a);
}
}
Vector <Project> projs6 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<CreateAcceptanceTestsAction> allActions = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getAcceptanceTesting() == false))
{
projs6.add(a);
}
}
Vector <Artifact> releaseplans6 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<CreateAcceptanceTestsAction> allActions = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
CreateAcceptanceTestsAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans6.add(a);
}
}
if((developers6.size()  >= 1) && (custreps6.size() > 0) && (testss6.size()  >= 1) && (projs6.size()  >= 1) && (releaseplans6.size()  >= 1))
{
for(int j=0; j<developers6.size(); j++)
{
Employee z = (Employee)developers6.elementAt(j);
z.addMenuItem("Create acceptance tests");
}
for(int j=0; j<custreps6.size(); j++)
{
Employee z = (Employee)custreps6.elementAt(j);
z.addMenuItem("Create acceptance tests");
}
}
Vector a8s = state.getActionStateRepository().getCreateAcceptanceTestsActionStateRepository().getAllActions();
if(a8s.size() == 0)
{
Vector f8 = state.getEmployeeStateRepository().getAll();
for(int i=0; i<f8.size(); i++)
{
((Employee)f8.elementAt(i)).removeMenuItem("JOIN Create acceptance tests");
}
}
for(int i=0; i<a8s.size(); i++)
{
CreateAcceptanceTestsAction a8 = (CreateAcceptanceTestsAction)a8s.elementAt(i);
if(a8.getAllDevelopers().size() < 999999)
{
Vector b8s = state.getEmployeeStateRepository().getAll();
for(int j=0; j<b8s.size(); j++)
{
Employee b8 = (Employee)b8s.elementAt(j);
if(((b8 instanceof SoftwareDeveloper)) && (a8.getAllDevelopers().contains(b8) == false))
{
boolean z8 = true;
for(int k=0; k<a8s.size(); k++)
{
CreateAcceptanceTestsAction a8b = (CreateAcceptanceTestsAction)a8s.elementAt(k);
if(a8b.getAllDevelopers().contains(b8))
{
z8 = false;
break;
}
}
if(z8 && (b8.getMenu().contains("JOIN Create acceptance tests") == false))
{
if((b8 instanceof SoftwareDeveloper) && (((SoftwareDeveloper)b8).getInIterationPlanningMeeting() == true))
{
b8.addMenuItem("JOIN Create acceptance tests");
}
}
}
}
}
if(a8.getAllCustReps().size() < 999999)
{
Vector b8s = state.getEmployeeStateRepository().getAll();
for(int j=0; j<b8s.size(); j++)
{
Employee b8 = (Employee)b8s.elementAt(j);
if(((b8 instanceof CustomerRep)) && (a8.getAllCustReps().contains(b8) == false))
{
boolean z8 = true;
for(int k=0; k<a8s.size(); k++)
{
CreateAcceptanceTestsAction a8b = (CreateAcceptanceTestsAction)a8s.elementAt(k);
if(a8b.getAllCustReps().contains(b8))
{
z8 = false;
break;
}
}
if(z8 && (b8.getMenu().contains("JOIN Create acceptance tests") == false))
{
if((b8 instanceof CustomerRep) && (((CustomerRep)b8).getInIterationPlanningMeeting() == true))
{
b8.addMenuItem("JOIN Create acceptance tests");
}
}
}
}
}
}
Vector <Employee> developers7 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<DesignAction> allActions = state.getActionStateRepository().getDesignActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
DesignAction b = allActions.elementAt(j);
if(b.getAllDevelopers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getInIterationPlanningMeeting() == true))
{
developers7.add(a);
}
}
Vector <Tool> crccardss7 = new Vector<Tool>();
Vector <CRCCards> crccardss = state.getToolStateRepository().getCRCCardsStateRepository().getAll();
for(int i=0; i<crccardss.size(); i++)
{
CRCCards a = crccardss.elementAt(i);
Vector<DesignAction> allActions = state.getActionStateRepository().getDesignActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false) )
{
crccardss7.add(a);
}
}
Vector <Artifact> designs7 = new Vector<Artifact>();
for(int i=0; i<designs.size(); i++)
{
Design a = designs.elementAt(i);
Vector<DesignAction> allActions = state.getActionStateRepository().getDesignActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
DesignAction b = allActions.elementAt(j);
if(b.getAllDesigns().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getNumCRCCardsCompleted() < 100.0))
{
designs7.add(a);
}
}
Vector <Project> projs7 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<DesignAction> allActions = state.getActionStateRepository().getDesignActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getAcceptanceTesting() == false))
{
projs7.add(a);
}
}
Vector <Artifact> associateduserstoriess7 = new Vector<Artifact>();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
Vector<DesignAction> allActions = state.getActionStateRepository().getDesignActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
DesignAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
associateduserstoriess7.add(a);
}
}
Vector <Artifact> releaseplans7 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<DesignAction> allActions = state.getActionStateRepository().getDesignActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
DesignAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans7.add(a);
}
}
if((developers7.size()  >= 1) && (crccardss7.size()  >= 1) && (designs7.size()  >= 1) && (projs7.size()  >= 1) && (associateduserstoriess7.size()  >= 1) && (releaseplans7.size()  >= 1))
{
for(int j=0; j<developers7.size(); j++)
{
Employee z = (Employee)developers7.elementAt(j);
z.addMenuItem("Design");
}
}
Vector a9s = state.getActionStateRepository().getDesignActionStateRepository().getAllActions();
if(a9s.size() == 0)
{
Vector f9 = state.getEmployeeStateRepository().getAll();
for(int i=0; i<f9.size(); i++)
{
((Employee)f9.elementAt(i)).removeMenuItem("JOIN Design");
}
}
for(int i=0; i<a9s.size(); i++)
{
DesignAction a9 = (DesignAction)a9s.elementAt(i);
if(a9.getAllDevelopers().size() < 999999)
{
Vector b9s = state.getEmployeeStateRepository().getAll();
for(int j=0; j<b9s.size(); j++)
{
Employee b9 = (Employee)b9s.elementAt(j);
if(((b9 instanceof SoftwareDeveloper)) && (a9.getAllDevelopers().contains(b9) == false))
{
boolean z9 = true;
for(int k=0; k<a9s.size(); k++)
{
DesignAction a9b = (DesignAction)a9s.elementAt(k);
if(a9b.getAllDevelopers().contains(b9))
{
z9 = false;
break;
}
}
if(z9 && (b9.getMenu().contains("JOIN Design") == false))
{
if((b9 instanceof SoftwareDeveloper) && (((SoftwareDeveloper)b9).getInIterationPlanningMeeting() == true))
{
b9.addMenuItem("JOIN Design");
}
}
}
}
}
}
Vector <Employee> developers8 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<CreateUnitTestsAction> allActions = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
CreateUnitTestsAction b = allActions.elementAt(j);
if(b.getAllDevelopers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getInIterationPlanningMeeting() == true))
{
developers8.add(a);
}
}
Vector <Artifact> testss8 = new Vector<Artifact>();
for(int i=0; i<unittestss.size(); i++)
{
UnitTests a = unittestss.elementAt(i);
Vector<CreateUnitTestsAction> allActions = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
CreateUnitTestsAction b = allActions.elementAt(j);
if(b.getAllTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() < 100.0))
{
testss8.add(a);
}
}
Vector <Tool> testingframeworks8 = new Vector<Tool>();
Vector <UnitTestingFramework> unittestingframeworks = state.getToolStateRepository().getUnitTestingFrameworkStateRepository().getAll();
for(int i=0; i<unittestingframeworks.size(); i++)
{
UnitTestingFramework a = unittestingframeworks.elementAt(i);
Vector<CreateUnitTestsAction> allActions = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false) )
{
testingframeworks8.add(a);
}
}
Vector <Project> projs8 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<CreateUnitTestsAction> allActions = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getAcceptanceTesting() == false))
{
projs8.add(a);
}
}
Vector <Artifact> associateddesigns8 = new Vector<Artifact>();
for(int i=0; i<designs.size(); i++)
{
Design a = designs.elementAt(i);
Vector<CreateUnitTestsAction> allActions = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
CreateUnitTestsAction b = allActions.elementAt(j);
if(b.getAllAssociatedDesigns().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getNumCRCCardsCompleted() == 100.0))
{
associateddesigns8.add(a);
}
}
Vector <Artifact> releaseplans8 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<CreateUnitTestsAction> allActions = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
CreateUnitTestsAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans8.add(a);
}
}
if((developers8.size()  >= 1) && (testss8.size()  >= 1) && (testingframeworks8.size() >= 0) && (projs8.size()  >= 1) && (associateddesigns8.size()  >= 1) && (releaseplans8.size()  >= 1))
{
for(int j=0; j<developers8.size(); j++)
{
Employee z = (Employee)developers8.elementAt(j);
z.addMenuItem("Create unit tests");
}
}
Vector a10s = state.getActionStateRepository().getCreateUnitTestsActionStateRepository().getAllActions();
if(a10s.size() == 0)
{
Vector f10 = state.getEmployeeStateRepository().getAll();
for(int i=0; i<f10.size(); i++)
{
((Employee)f10.elementAt(i)).removeMenuItem("JOIN Create unit tests");
}
}
for(int i=0; i<a10s.size(); i++)
{
CreateUnitTestsAction a10 = (CreateUnitTestsAction)a10s.elementAt(i);
if(a10.getAllDevelopers().size() < 999999)
{
Vector b10s = state.getEmployeeStateRepository().getAll();
for(int j=0; j<b10s.size(); j++)
{
Employee b10 = (Employee)b10s.elementAt(j);
if(((b10 instanceof SoftwareDeveloper)) && (a10.getAllDevelopers().contains(b10) == false))
{
boolean z10 = true;
for(int k=0; k<a10s.size(); k++)
{
CreateUnitTestsAction a10b = (CreateUnitTestsAction)a10s.elementAt(k);
if(a10b.getAllDevelopers().contains(b10))
{
z10 = false;
break;
}
}
if(z10 && (b10.getMenu().contains("JOIN Create unit tests") == false))
{
if((b10 instanceof SoftwareDeveloper) && (((SoftwareDeveloper)b10).getInIterationPlanningMeeting() == true))
{
b10.addMenuItem("JOIN Create unit tests");
}
}
}
}
}
}
Vector <Employee> developers9 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<LearnCodingStandardAction> allActions = state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
LearnCodingStandardAction b = allActions.elementAt(j);
if(b.getAllDevelopers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getKnowsCodingStandard() == false) && (a.getKnowsCodingStandardNumerical() < 1.0))
{
developers9.add(a);
}
}
Vector <Tool> codingstandards9 = new Vector<Tool>();
Vector <CodingStandard> codingstandards = state.getToolStateRepository().getCodingStandardStateRepository().getAll();
for(int i=0; i<codingstandards.size(); i++)
{
CodingStandard a = codingstandards.elementAt(i);
Vector<LearnCodingStandardAction> allActions = state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false) )
{
codingstandards9.add(a);
}
}
Vector <Project> projs9 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<LearnCodingStandardAction> allActions = state.getActionStateRepository().getLearnCodingStandardActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false) )
{
projs9.add(a);
}
}
if((developers9.size()  >= 1) && (codingstandards9.size()  >= 1) && (projs9.size()  >= 1))
{
for(int j=0; j<developers9.size(); j++)
{
Employee z = (Employee)developers9.elementAt(j);
z.addMenuItem("Learn coding standard");
}
}
Vector <Employee> developers10 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<ProgramAction> allActions = state.getActionStateRepository().getProgramActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ProgramAction b = allActions.elementAt(j);
if(b.getAllDevelopers().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getInIterationPlanningMeeting() == true) && (a.getProgramming() == false))
{
developers10.add(a);
}
}
Vector <Artifact> codes10 = new Vector<Artifact>();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
Vector<ProgramAction> allActions = state.getActionStateRepository().getProgramActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ProgramAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() < 100.0))
{
codes10.add(a);
}
}
Vector <Tool> codingstandards10 = new Vector<Tool>();
for(int i=0; i<codingstandards.size(); i++)
{
CodingStandard a = codingstandards.elementAt(i);
Vector<ProgramAction> allActions = state.getActionStateRepository().getProgramActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false) )
{
codingstandards10.add(a);
}
}
Vector <Artifact> associateddesigns10 = new Vector<Artifact>();
for(int i=0; i<designs.size(); i++)
{
Design a = designs.elementAt(i);
Vector<ProgramAction> allActions = state.getActionStateRepository().getProgramActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ProgramAction b = allActions.elementAt(j);
if(b.getAllAssociatedDesigns().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
associateddesigns10.add(a);
}
}
Vector <Artifact> associatedunittestss10 = new Vector<Artifact>();
for(int i=0; i<unittestss.size(); i++)
{
UnitTests a = unittestss.elementAt(i);
Vector<ProgramAction> allActions = state.getActionStateRepository().getProgramActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ProgramAction b = allActions.elementAt(j);
if(b.getAllAssociatedUnitTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
associatedunittestss10.add(a);
}
}
Vector <Project> projs10 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<ProgramAction> allActions = state.getActionStateRepository().getProgramActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getAcceptanceTesting() == false))
{
projs10.add(a);
}
}
Vector <Artifact> associateduserstoriess10 = new Vector<Artifact>();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
Vector<ProgramAction> allActions = state.getActionStateRepository().getProgramActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ProgramAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
associateduserstoriess10.add(a);
}
}
Vector <Artifact> releaseplans10 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<ProgramAction> allActions = state.getActionStateRepository().getProgramActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ProgramAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans10.add(a);
}
}
if((developers10.size()  >= 1) && (codes10.size()  >= 1) && (codingstandards10.size()  >= 1) && (associateddesigns10.size()  >= 1) && (associatedunittestss10.size()  >= 1) && (projs10.size()  >= 1) && (associateduserstoriess10.size()  >= 1) && (releaseplans10.size()  >= 1))
{
for(int j=0; j<developers10.size(); j++)
{
Employee z = (Employee)developers10.elementAt(j);
z.addMenuItem("Program");
}
}
Vector a12s = state.getActionStateRepository().getProgramActionStateRepository().getAllActions();
if(a12s.size() == 0)
{
Vector f12 = state.getEmployeeStateRepository().getAll();
for(int i=0; i<f12.size(); i++)
{
((Employee)f12.elementAt(i)).removeMenuItem("JOIN Program");
}
}
for(int i=0; i<a12s.size(); i++)
{
ProgramAction a12 = (ProgramAction)a12s.elementAt(i);
if(a12.getAllDevelopers().size() < 999999)
{
Vector b12s = state.getEmployeeStateRepository().getAll();
for(int j=0; j<b12s.size(); j++)
{
Employee b12 = (Employee)b12s.elementAt(j);
if(((b12 instanceof SoftwareDeveloper)) && (a12.getAllDevelopers().contains(b12) == false))
{
boolean z12 = true;
for(int k=0; k<a12s.size(); k++)
{
ProgramAction a12b = (ProgramAction)a12s.elementAt(k);
if(a12b.getAllDevelopers().contains(b12))
{
z12 = false;
break;
}
}
if(z12 && (b12.getMenu().contains("JOIN Program") == false))
{
if((b12 instanceof SoftwareDeveloper) && (((SoftwareDeveloper)b12).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)b12).getProgramming() == false))
{
b12.addMenuItem("JOIN Program");
}
}
}
}
}
}
Vector <Employee> roberts11 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<PairProgramRobertJoyceAction> allActions = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllRoberts().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getName() .equals("Robert")) && (a.getInIterationPlanningMeeting() == true) && (a.getProgramming() == false))
{
roberts11.add(a);
}
}
Vector <Employee> joyces11 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<PairProgramRobertJoyceAction> allActions = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllJoyces().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getName() .equals("Joyce")) && (a.getInIterationPlanningMeeting() == true) && (a.getProgramming() == false))
{
joyces11.add(a);
}
}
Vector <Artifact> codes11 = new Vector<Artifact>();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
Vector<PairProgramRobertJoyceAction> allActions = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() < 100.0))
{
codes11.add(a);
}
}
Vector <Tool> codingstandards11 = new Vector<Tool>();
for(int i=0; i<codingstandards.size(); i++)
{
CodingStandard a = codingstandards.elementAt(i);
Vector<PairProgramRobertJoyceAction> allActions = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false) )
{
codingstandards11.add(a);
}
}
Vector <Artifact> associateddesigns11 = new Vector<Artifact>();
for(int i=0; i<designs.size(); i++)
{
Design a = designs.elementAt(i);
Vector<PairProgramRobertJoyceAction> allActions = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllAssociatedDesigns().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
associateddesigns11.add(a);
}
}
Vector <Artifact> associatedunittestss11 = new Vector<Artifact>();
for(int i=0; i<unittestss.size(); i++)
{
UnitTests a = unittestss.elementAt(i);
Vector<PairProgramRobertJoyceAction> allActions = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllAssociatedUnitTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
associatedunittestss11.add(a);
}
}
Vector <Project> projs11 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<PairProgramRobertJoyceAction> allActions = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getAcceptanceTesting() == false))
{
projs11.add(a);
}
}
Vector <Artifact> associateduserstoriess11 = new Vector<Artifact>();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
Vector<PairProgramRobertJoyceAction> allActions = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
associateduserstoriess11.add(a);
}
}
Vector <Artifact> releaseplans11 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<PairProgramRobertJoyceAction> allActions = state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans11.add(a);
}
}
if((roberts11.size()  >= 1) && (joyces11.size()  >= 1) && (codes11.size()  >= 1) && (codingstandards11.size()  >= 1) && (associateddesigns11.size()  >= 1) && (associatedunittestss11.size()  >= 1) && (projs11.size()  >= 1) && (associateduserstoriess11.size()  >= 1) && (releaseplans11.size()  >= 1))
{
for(int j=0; j<roberts11.size(); j++)
{
Employee z = (Employee)roberts11.elementAt(j);
z.addMenuItem("Pair program (Robert and Joyce)");
}
for(int j=0; j<joyces11.size(); j++)
{
Employee z = (Employee)joyces11.elementAt(j);
z.addMenuItem("Pair program (Robert and Joyce)");
}
}
Vector <Employee> timothys12 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<PairProgramTimothyRedaAction> allActions = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllTimothys().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getName() .equals("Timothy")) && (a.getInIterationPlanningMeeting() == true) && (a.getProgramming() == false))
{
timothys12.add(a);
}
}
Vector <Employee> redas12 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<PairProgramTimothyRedaAction> allActions = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllRedas().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getName() .equals("Reda")) && (a.getInIterationPlanningMeeting() == true) && (a.getProgramming() == false))
{
redas12.add(a);
}
}
Vector <Artifact> codes12 = new Vector<Artifact>();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
Vector<PairProgramTimothyRedaAction> allActions = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() < 100.0))
{
codes12.add(a);
}
}
Vector <Tool> codingstandards12 = new Vector<Tool>();
for(int i=0; i<codingstandards.size(); i++)
{
CodingStandard a = codingstandards.elementAt(i);
Vector<PairProgramTimothyRedaAction> allActions = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false) )
{
codingstandards12.add(a);
}
}
Vector <Artifact> associateddesigns12 = new Vector<Artifact>();
for(int i=0; i<designs.size(); i++)
{
Design a = designs.elementAt(i);
Vector<PairProgramTimothyRedaAction> allActions = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllAssociatedDesigns().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
associateddesigns12.add(a);
}
}
Vector <Artifact> associatedunittestss12 = new Vector<Artifact>();
for(int i=0; i<unittestss.size(); i++)
{
UnitTests a = unittestss.elementAt(i);
Vector<PairProgramTimothyRedaAction> allActions = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllAssociatedUnitTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
associatedunittestss12.add(a);
}
}
Vector <Project> projs12 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<PairProgramTimothyRedaAction> allActions = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getAcceptanceTesting() == false))
{
projs12.add(a);
}
}
Vector <Artifact> associateduserstoriess12 = new Vector<Artifact>();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
Vector<PairProgramTimothyRedaAction> allActions = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
associateduserstoriess12.add(a);
}
}
Vector <Artifact> releaseplans12 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<PairProgramTimothyRedaAction> allActions = state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans12.add(a);
}
}
if((timothys12.size()  >= 1) && (redas12.size()  >= 1) && (codes12.size()  >= 1) && (codingstandards12.size()  >= 1) && (associateddesigns12.size()  >= 1) && (associatedunittestss12.size()  >= 1) && (projs12.size()  >= 1) && (associateduserstoriess12.size()  >= 1) && (releaseplans12.size()  >= 1))
{
for(int j=0; j<timothys12.size(); j++)
{
Employee z = (Employee)timothys12.elementAt(j);
z.addMenuItem("Pair Program (Timothy and Reda)");
}
for(int j=0; j<redas12.size(); j++)
{
Employee z = (Employee)redas12.elementAt(j);
z.addMenuItem("Pair Program (Timothy and Reda)");
}
}
Vector <Employee> pegs13 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<PairProgramPegSigfreidoAction> allActions = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramPegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllPegs().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getName() .equals("Peg")) && (a.getInIterationPlanningMeeting() == true) && (a.getProgramming() == false))
{
pegs13.add(a);
}
}
Vector <Employee> sigfreidos13 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<PairProgramPegSigfreidoAction> allActions = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramPegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllSigfreidos().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getName() .equals("Sigfreido")) && (a.getInIterationPlanningMeeting() == true) && (a.getProgramming() == false))
{
sigfreidos13.add(a);
}
}
Vector <Artifact> codes13 = new Vector<Artifact>();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
Vector<PairProgramPegSigfreidoAction> allActions = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramPegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() < 100.0))
{
codes13.add(a);
}
}
Vector <Tool> codingstandards13 = new Vector<Tool>();
for(int i=0; i<codingstandards.size(); i++)
{
CodingStandard a = codingstandards.elementAt(i);
Vector<PairProgramPegSigfreidoAction> allActions = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false) )
{
codingstandards13.add(a);
}
}
Vector <Artifact> associateddesigns13 = new Vector<Artifact>();
for(int i=0; i<designs.size(); i++)
{
Design a = designs.elementAt(i);
Vector<PairProgramPegSigfreidoAction> allActions = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramPegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllAssociatedDesigns().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
associateddesigns13.add(a);
}
}
Vector <Artifact> associatedunittestss13 = new Vector<Artifact>();
for(int i=0; i<unittestss.size(); i++)
{
UnitTests a = unittestss.elementAt(i);
Vector<PairProgramPegSigfreidoAction> allActions = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramPegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllAssociatedUnitTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
associatedunittestss13.add(a);
}
}
Vector <Project> projs13 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<PairProgramPegSigfreidoAction> allActions = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getAcceptanceTesting() == false))
{
projs13.add(a);
}
}
Vector <Artifact> associateduserstoriess13 = new Vector<Artifact>();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
Vector<PairProgramPegSigfreidoAction> allActions = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramPegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
associateduserstoriess13.add(a);
}
}
Vector <Artifact> releaseplans13 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<PairProgramPegSigfreidoAction> allActions = state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
PairProgramPegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans13.add(a);
}
}
if((pegs13.size()  >= 1) && (sigfreidos13.size()  >= 1) && (codes13.size()  >= 1) && (codingstandards13.size()  >= 1) && (associateddesigns13.size()  >= 1) && (associatedunittestss13.size()  >= 1) && (projs13.size()  >= 1) && (associateduserstoriess13.size()  >= 1) && (releaseplans13.size()  >= 1))
{
for(int j=0; j<pegs13.size(); j++)
{
Employee z = (Employee)pegs13.elementAt(j);
z.addMenuItem("Pair program (Peg and Sigfreido)");
}
for(int j=0; j<sigfreidos13.size(); j++)
{
Employee z = (Employee)sigfreidos13.elementAt(j);
z.addMenuItem("Pair program (Peg and Sigfreido)");
}
}
Vector <Employee> emps14 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<UnitTestingAndFixingAction> allActions = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
UnitTestingAndFixingAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getInIterationPlanningMeeting() == true))
{
emps14.add(a);
}
}
Vector <Artifact> codes14 = new Vector<Artifact>();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
Vector<UnitTestingAndFixingAction> allActions = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
UnitTestingAndFixingAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getPercentErroneous() > 0.0) && (a.getCompleteness() == 100.0))
{
codes14.add(a);
}
}
Vector <Artifact> unittestss14 = new Vector<Artifact>();
for(int i=0; i<unittestss.size(); i++)
{
UnitTests a = unittestss.elementAt(i);
Vector<UnitTestingAndFixingAction> allActions = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
UnitTestingAndFixingAction b = allActions.elementAt(j);
if(b.getAllUnitTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
unittestss14.add(a);
}
}
Vector <Tool> testingtools14 = new Vector<Tool>();
for(int i=0; i<unittestingframeworks.size(); i++)
{
UnitTestingFramework a = unittestingframeworks.elementAt(i);
Vector<UnitTestingAndFixingAction> allActions = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false) )
{
testingtools14.add(a);
}
}
Vector <Project> projs14 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<UnitTestingAndFixingAction> allActions = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getAcceptanceTesting() == false))
{
projs14.add(a);
}
}
Vector <Artifact> acceptancetestss14 = new Vector<Artifact>();
for(int i=0; i<acceptancetestss.size(); i++)
{
AcceptanceTests a = acceptancetestss.elementAt(i);
Vector<UnitTestingAndFixingAction> allActions = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
UnitTestingAndFixingAction b = allActions.elementAt(j);
if(b.getAllAcceptanceTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
acceptancetestss14.add(a);
}
}
Vector <Artifact> releaseplans14 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<UnitTestingAndFixingAction> allActions = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
UnitTestingAndFixingAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans14.add(a);
}
}
if((emps14.size()  >= 1) && (codes14.size()  >= 1) && (unittestss14.size()  >= 1) && (testingtools14.size() >= 0) && (projs14.size()  >= 1) && (acceptancetestss14.size()  >= 1) && (releaseplans14.size()  >= 1))
{
for(int j=0; j<emps14.size(); j++)
{
Employee z = (Employee)emps14.elementAt(j);
z.addMenuItem("Unit test and fix");
}
}
Vector a16s = state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().getAllActions();
if(a16s.size() == 0)
{
Vector f16 = state.getEmployeeStateRepository().getAll();
for(int i=0; i<f16.size(); i++)
{
((Employee)f16.elementAt(i)).removeMenuItem("JOIN Unit test and fix");
}
}
for(int i=0; i<a16s.size(); i++)
{
UnitTestingAndFixingAction a16 = (UnitTestingAndFixingAction)a16s.elementAt(i);
if(a16.getAllEmps().size() < 999999)
{
Vector b16s = state.getEmployeeStateRepository().getAll();
for(int j=0; j<b16s.size(); j++)
{
Employee b16 = (Employee)b16s.elementAt(j);
if(((b16 instanceof SoftwareDeveloper)) && (a16.getAllEmps().contains(b16) == false))
{
boolean z16 = true;
for(int k=0; k<a16s.size(); k++)
{
UnitTestingAndFixingAction a16b = (UnitTestingAndFixingAction)a16s.elementAt(k);
if(a16b.getAllEmps().contains(b16))
{
z16 = false;
break;
}
}
if(z16 && (b16.getMenu().contains("JOIN Unit test and fix") == false))
{
if((b16 instanceof SoftwareDeveloper) && (((SoftwareDeveloper)b16).getInIterationPlanningMeeting() == true))
{
b16.addMenuItem("JOIN Unit test and fix");
}
}
}
}
}
}
Vector <Employee> emps15 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<RefactorAction> allActions = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
RefactorAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getInIterationPlanningMeeting() == true))
{
emps15.add(a);
}
}
Vector <Artifact> codes15 = new Vector<Artifact>();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
Vector<RefactorAction> allActions = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
RefactorAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0) && (a.getPercentRefactored() < 100.0))
{
codes15.add(a);
}
}
Vector <Project> projs15 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<RefactorAction> allActions = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getAcceptanceTesting() == false))
{
projs15.add(a);
}
}
Vector <Tool> refactoringtools15 = new Vector<Tool>();
Vector <RefactoringTool> refactoringtools = state.getToolStateRepository().getRefactoringToolStateRepository().getAll();
for(int i=0; i<refactoringtools.size(); i++)
{
RefactoringTool a = refactoringtools.elementAt(i);
Vector<RefactorAction> allActions = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false) )
{
refactoringtools15.add(a);
}
}
Vector <Artifact> releaseplans15 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<RefactorAction> allActions = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
RefactorAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans15.add(a);
}
}
if((emps15.size()  >= 1) && (codes15.size()  >= 1) && (projs15.size()  >= 1) && (refactoringtools15.size() >= 0) && (releaseplans15.size()  >= 1))
{
for(int j=0; j<emps15.size(); j++)
{
Employee z = (Employee)emps15.elementAt(j);
z.addMenuItem("Refactor code");
}
}
Vector a17s = state.getActionStateRepository().getRefactorActionStateRepository().getAllActions();
if(a17s.size() == 0)
{
Vector f17 = state.getEmployeeStateRepository().getAll();
for(int i=0; i<f17.size(); i++)
{
((Employee)f17.elementAt(i)).removeMenuItem("JOIN Refactor code");
}
}
for(int i=0; i<a17s.size(); i++)
{
RefactorAction a17 = (RefactorAction)a17s.elementAt(i);
if(a17.getAllEmps().size() < 999999)
{
Vector b17s = state.getEmployeeStateRepository().getAll();
for(int j=0; j<b17s.size(); j++)
{
Employee b17 = (Employee)b17s.elementAt(j);
if(((b17 instanceof SoftwareDeveloper)) && (a17.getAllEmps().contains(b17) == false))
{
boolean z17 = true;
for(int k=0; k<a17s.size(); k++)
{
RefactorAction a17b = (RefactorAction)a17s.elementAt(k);
if(a17b.getAllEmps().contains(b17))
{
z17 = false;
break;
}
}
if(z17 && (b17.getMenu().contains("JOIN Refactor code") == false))
{
if((b17 instanceof SoftwareDeveloper) && (((SoftwareDeveloper)b17).getInIterationPlanningMeeting() == true))
{
b17.addMenuItem("JOIN Refactor code");
}
}
}
}
}
}
Vector <Employee> roberts16 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<IntegrateRobertJoyceAction> allActions = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegrateRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllRoberts().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getName() .equals("Robert")) && (a.getInIterationPlanningMeeting() == true) && (a.getIntegrating() == false))
{
roberts16.add(a);
}
}
Vector <Artifact> codes16 = new Vector<Artifact>();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
Vector<IntegrateRobertJoyceAction> allActions = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegrateRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0) && (a.getPercentIntegrated() < 100.0))
{
codes16.add(a);
}
}
Vector <Project> projs16 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<IntegrateRobertJoyceAction> allActions = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getRobertAndJoycePairProgThisIteration() == true) && (a.getAcceptanceTesting() == false))
{
projs16.add(a);
}
}
Vector <Employee> joyces16 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<IntegrateRobertJoyceAction> allActions = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegrateRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllJoyces().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getName() .equals("Joyce")) && (a.getInIterationPlanningMeeting() == true) && (a.getIntegrating() == false))
{
joyces16.add(a);
}
}
Vector <Artifact> associateduserstoriess16 = new Vector<Artifact>();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
Vector<IntegrateRobertJoyceAction> allActions = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegrateRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
associateduserstoriess16.add(a);
}
}
Vector <Artifact> releaseplans16 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<IntegrateRobertJoyceAction> allActions = state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegrateRobertJoyceAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans16.add(a);
}
}
if((roberts16.size()  >= 1) && (joyces16.size()  >= 1) && (codes16.size()  >= 1) && (projs16.size()  >= 1) && (associateduserstoriess16.size()  >= 1) && (releaseplans16.size()  >= 1))
{
for(int j=0; j<roberts16.size(); j++)
{
Employee z = (Employee)roberts16.elementAt(j);
z.addMenuItem("Pair integrate (Robert and Joyce)");
}
for(int j=0; j<joyces16.size(); j++)
{
Employee z = (Employee)joyces16.elementAt(j);
z.addMenuItem("Pair integrate (Robert and Joyce)");
}
}
Vector <Employee> timothys17 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<IntegrateTimothyRedaAction> allActions = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegrateTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllTimothys().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getName() .equals("Timothy")) && (a.getInIterationPlanningMeeting() == true) && (a.getIntegrating() == false))
{
timothys17.add(a);
}
}
Vector <Employee> redas17 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<IntegrateTimothyRedaAction> allActions = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegrateTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllRedas().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getName() .equals("Reda")) && (a.getInIterationPlanningMeeting() == true) && (a.getIntegrating() == false))
{
redas17.add(a);
}
}
Vector <Artifact> codes17 = new Vector<Artifact>();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
Vector<IntegrateTimothyRedaAction> allActions = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegrateTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0) && (a.getPercentIntegrated() < 100.0))
{
codes17.add(a);
}
}
Vector <Project> projs17 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<IntegrateTimothyRedaAction> allActions = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getIterationStarted() == true) && (a.getUserStoriesChosenForThisIteration() == true) && (a.getProgrammingTasksAssignedThisIteration() == true) && (a.getIterationPlanningMeetingStarted() == true) && (a.getTimothyAndRedaPairProgThisIteration() == true) && (a.getAcceptanceTesting() == false))
{
projs17.add(a);
}
}
Vector <Artifact> associateduserstoriess17 = new Vector<Artifact>();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
Vector<IntegrateTimothyRedaAction> allActions = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegrateTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
associateduserstoriess17.add(a);
}
}
Vector <Artifact> releaseplans17 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<IntegrateTimothyRedaAction> allActions = state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegrateTimothyRedaAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans17.add(a);
}
}
if((timothys17.size()  >= 1) && (redas17.size()  >= 1) && (codes17.size()  >= 1) && (projs17.size()  >= 1) && (associateduserstoriess17.size()  >= 1) && (releaseplans17.size()  >= 1))
{
for(int j=0; j<timothys17.size(); j++)
{
Employee z = (Employee)timothys17.elementAt(j);
z.addMenuItem("Pair integrate (Timothy and Reda)");
}
for(int j=0; j<redas17.size(); j++)
{
Employee z = (Employee)redas17.elementAt(j);
z.addMenuItem("Pair integrate (Timothy and Reda)");
}
}
Vector <Employee> pegs18 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<IntegratePegSigfreidoAction> allActions = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegratePegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllPegs().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getName() .equals("Peg")) && (a.getInIterationPlanningMeeting() == true) && (a.getIntegrating() == false))
{
pegs18.add(a);
}
}
Vector <Employee> sigfreidos18 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<IntegratePegSigfreidoAction> allActions = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegratePegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllSigfreidos().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getName() .equals("Sigfreido")) && (a.getInIterationPlanningMeeting() == true) && (a.getIntegrating() == false))
{
sigfreidos18.add(a);
}
}
Vector <Artifact> codes18 = new Vector<Artifact>();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
Vector<IntegratePegSigfreidoAction> allActions = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegratePegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0) && (a.getPercentIntegrated() < 100.0))
{
codes18.add(a);
}
}
Vector <Project> projs18 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<IntegratePegSigfreidoAction> allActions = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getPegAndSigfreidoPairProgThisIteration() == true) && (a.getAcceptanceTesting() == false))
{
projs18.add(a);
}
}
Vector <Artifact> associateduserstoriess18 = new Vector<Artifact>();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
Vector<IntegratePegSigfreidoAction> allActions = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegratePegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
associateduserstoriess18.add(a);
}
}
Vector <Artifact> releaseplans18 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<IntegratePegSigfreidoAction> allActions = state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegratePegSigfreidoAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans18.add(a);
}
}
if((pegs18.size()  >= 1) && (sigfreidos18.size()  >= 1) && (codes18.size()  >= 1) && (projs18.size()  >= 1) && (associateduserstoriess18.size()  >= 1) && (releaseplans18.size()  >= 1))
{
for(int j=0; j<pegs18.size(); j++)
{
Employee z = (Employee)pegs18.elementAt(j);
z.addMenuItem("Pair integrate (Peg and Sigfreido)");
}
for(int j=0; j<sigfreidos18.size(); j++)
{
Employee z = (Employee)sigfreidos18.elementAt(j);
z.addMenuItem("Pair integrate (Peg and Sigfreido)");
}
}
Vector <Employee> emps19 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<IntegrateAction> allActions = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegrateAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getInIterationPlanningMeeting() == true) && (a.getIntegrating() == false))
{
emps19.add(a);
}
}
Vector <Artifact> codes19 = new Vector<Artifact>();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
Vector<IntegrateAction> allActions = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegrateAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0) && (a.getPercentIntegrated() < 100.0))
{
codes19.add(a);
}
}
Vector <Project> projs19 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<IntegrateAction> allActions = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getAcceptanceTesting() == false))
{
projs19.add(a);
}
}
Vector <Artifact> associateduserstoriess19 = new Vector<Artifact>();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
Vector<IntegrateAction> allActions = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegrateAction b = allActions.elementAt(j);
if(b.getAllAssociatedUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
associateduserstoriess19.add(a);
}
}
Vector <Artifact> releaseplans19 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<IntegrateAction> allActions = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
IntegrateAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans19.add(a);
}
}
if((emps19.size()  >= 1) && (codes19.size()  >= 1) && (projs19.size()  >= 1) && (associateduserstoriess19.size()  >= 1) && (releaseplans19.size()  >= 1))
{
for(int j=0; j<emps19.size(); j++)
{
Employee z = (Employee)emps19.elementAt(j);
z.addMenuItem("Integrate");
}
}
Vector a21s = state.getActionStateRepository().getIntegrateActionStateRepository().getAllActions();
if(a21s.size() == 0)
{
Vector f21 = state.getEmployeeStateRepository().getAll();
for(int i=0; i<f21.size(); i++)
{
((Employee)f21.elementAt(i)).removeMenuItem("JOIN Integrate");
}
}
for(int i=0; i<a21s.size(); i++)
{
IntegrateAction a21 = (IntegrateAction)a21s.elementAt(i);
if(a21.getAllEmps().size() < 999999)
{
Vector b21s = state.getEmployeeStateRepository().getAll();
for(int j=0; j<b21s.size(); j++)
{
Employee b21 = (Employee)b21s.elementAt(j);
if(((b21 instanceof SoftwareDeveloper)) && (a21.getAllEmps().contains(b21) == false))
{
boolean z21 = true;
for(int k=0; k<a21s.size(); k++)
{
IntegrateAction a21b = (IntegrateAction)a21s.elementAt(k);
if(a21b.getAllEmps().contains(b21))
{
z21 = false;
break;
}
}
if(z21 && (b21.getMenu().contains("JOIN Integrate") == false))
{
if((b21 instanceof SoftwareDeveloper) && (((SoftwareDeveloper)b21).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)b21).getIntegrating() == false))
{
b21.addMenuItem("JOIN Integrate");
}
}
}
}
}
}
Vector <Employee> emps20 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<AcceptanceTestingAction> allActions = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
AcceptanceTestingAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getInIterationPlanningMeeting() == true))
{
emps20.add(a);
}
}
Vector <Customer> custs20 = new Vector<Customer>();
Vector <CustomerRepresentative> customerrepresentatives = state.getCustomerStateRepository().getCustomerRepresentativeStateRepository().getAll();
for(int i=0; i<customerrepresentatives.size(); i++)
{
CustomerRepresentative a = customerrepresentatives.elementAt(i);
Vector<AcceptanceTestingAction> allActions = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false) )
{
custs20.add(a);
}
}
Vector <Artifact> acceptancetestcasess20 = new Vector<Artifact>();
for(int i=0; i<acceptancetestss.size(); i++)
{
AcceptanceTests a = acceptancetestss.elementAt(i);
Vector<AcceptanceTestingAction> allActions = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
AcceptanceTestingAction b = allActions.elementAt(j);
if(b.getAllAcceptanceTestCasess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0) && (a.getTestsRun() < 100.0))
{
acceptancetestcasess20.add(a);
}
}
Vector <Artifact> userstoriess20 = new Vector<Artifact>();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
Vector<AcceptanceTestingAction> allActions = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
AcceptanceTestingAction b = allActions.elementAt(j);
if(b.getAllUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
userstoriess20.add(a);
}
}
Vector <Artifact> codes20 = new Vector<Artifact>();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
Vector<AcceptanceTestingAction> allActions = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
AcceptanceTestingAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getPercentIntegrated() == 100.0))
{
codes20.add(a);
}
}
Vector <Project> projs20 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<AcceptanceTestingAction> allActions = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getNumActivitiesOccurring() == 0) && (a.getAcceptanceTesting() == false))
{
projs20.add(a);
}
}
Vector <Artifact> releaseplans20 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<AcceptanceTestingAction> allActions = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
AcceptanceTestingAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans20.add(a);
}
}
if((emps20.size()  >= 1) && (custs20.size()  >= 1) && (acceptancetestcasess20.size()  >= 1) && (userstoriess20.size()  >= 1) && (codes20.size()  >= 1) && (projs20.size()  >= 1) && (releaseplans20.size()  >= 1))
{
for(int j=0; j<emps20.size(); j++)
{
Employee z = (Employee)emps20.elementAt(j);
z.addMenuItem("Acceptance testing");
}
}
Vector a22s = state.getActionStateRepository().getAcceptanceTestingActionStateRepository().getAllActions();
if(a22s.size() == 0)
{
Vector f22 = state.getEmployeeStateRepository().getAll();
for(int i=0; i<f22.size(); i++)
{
((Employee)f22.elementAt(i)).removeMenuItem("JOIN Acceptance testing");
}
}
for(int i=0; i<a22s.size(); i++)
{
AcceptanceTestingAction a22 = (AcceptanceTestingAction)a22s.elementAt(i);
if(a22.getAllEmps().size() < 999999)
{
Vector b22s = state.getEmployeeStateRepository().getAll();
for(int j=0; j<b22s.size(); j++)
{
Employee b22 = (Employee)b22s.elementAt(j);
if(((b22 instanceof SoftwareDeveloper)) && (a22.getAllEmps().contains(b22) == false))
{
boolean z22 = true;
for(int k=0; k<a22s.size(); k++)
{
AcceptanceTestingAction a22b = (AcceptanceTestingAction)a22s.elementAt(k);
if(a22b.getAllEmps().contains(b22))
{
z22 = false;
break;
}
}
if(z22 && (b22.getMenu().contains("JOIN Acceptance testing") == false))
{
if((b22 instanceof SoftwareDeveloper) && (((SoftwareDeveloper)b22).getInIterationPlanningMeeting() == true))
{
b22.addMenuItem("JOIN Acceptance testing");
}
}
}
}
}
}
Vector <Employee> emps21 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<ReleaseCodeAndEndIterationAction> allActions = state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ReleaseCodeAndEndIterationAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getInIterationPlanningMeeting() == true))
{
emps21.add(a);
}
}
Vector <Project> projs21 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<ReleaseCodeAndEndIterationAction> allActions = state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getTimeSinceLastRelease() > 0) && (a.getReleaseMadeThisIteration() == false))
{
projs21.add(a);
}
}
Vector <Artifact> codes21 = new Vector<Artifact>();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
Vector<ReleaseCodeAndEndIterationAction> allActions = state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ReleaseCodeAndEndIterationAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getPercentErroneous() == 0.0) && (a.getCompleteness() == 100.0) && (a.getPercentIntegrated() == 100.0))
{
codes21.add(a);
}
}
Vector <Artifact> acceptancetestss21 = new Vector<Artifact>();
for(int i=0; i<acceptancetestss.size(); i++)
{
AcceptanceTests a = acceptancetestss.elementAt(i);
Vector<ReleaseCodeAndEndIterationAction> allActions = state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ReleaseCodeAndEndIterationAction b = allActions.elementAt(j);
if(b.getAllAcceptanceTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getTestsRun() == 100.0) && (a.getTestsFailed() == 0.0))
{
acceptancetestss21.add(a);
}
}
Vector <Artifact> releaseplans21 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<ReleaseCodeAndEndIterationAction> allActions = state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ReleaseCodeAndEndIterationAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0))
{
releaseplans21.add(a);
}
}
Vector <Artifact> userstoriess21 = new Vector<Artifact>();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
Vector<ReleaseCodeAndEndIterationAction> allActions = state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
ReleaseCodeAndEndIterationAction b = allActions.elementAt(j);
if(b.getAllUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
userstoriess21.add(a);
}
}
if((emps21.size()  >= 1) && (codes21.size()  >= 1) && (projs21.size()  >= 1) && (acceptancetestss21.size()  >= 1) && (releaseplans21.size()  >= 1) && (userstoriess21.size()  >= 1))
{
for(int j=0; j<emps21.size(); j++)
{
Employee z = (Employee)emps21.elementAt(j);
z.addMenuItem("Release code and end iteration");
}
}
if(!updateUserTrigsOnly)
{
Vector <Artifact> userstoriess22 = new Vector<Artifact>();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
Vector<UpdateUserStoriesAttributesAction> allActions = state.getActionStateRepository().getUpdateUserStoriesAttributesActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
UpdateUserStoriesAttributesAction b = allActions.elementAt(j);
if(b.getAllUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
userstoriess22.add(a);
}
}
Vector <Project> projs22 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<UpdateUserStoriesAttributesAction> allActions = state.getActionStateRepository().getUpdateUserStoriesAttributesActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false) )
{
projs22.add(a);
}
}
Vector <Artifact> codes22 = new Vector<Artifact>();
for(int i=0; i<codes.size(); i++)
{
Code a = codes.elementAt(i);
Vector<UpdateUserStoriesAttributesAction> allActions = state.getActionStateRepository().getUpdateUserStoriesAttributesActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
UpdateUserStoriesAttributesAction b = allActions.elementAt(j);
if(b.getAllCodes().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getPercentIntegrated() > 0.0))
{
codes22.add(a);
}
}
while((userstoriess22.size()  >= 1) && (projs22.size()  >= 1) && (codes22.size()  >= 1))
{
UpdateUserStoriesAttributesAction a = new UpdateUserStoriesAttributesAction();
for(int i=0; i<1; i++)
{
if(userstoriess22.size() > 0)
{
Artifact a0 = userstoriess22.remove(0);
a.addUserStories(a0);
}
else
{
break;
}
}
for(int i=0; i<1; i++)
{
if(projs22.size() > 0)
{
Project a1 = projs22.elementAt(0);
a.addProj(a1);
}
else
{
break;
}
}
for(int i=0; i<1; i++)
{
if(codes22.size() > 0)
{
Artifact a2 = codes22.remove(0);
a.addCode(a2);
}
else
{
break;
}
}
// set all overhead texts:
Vector<SSObject> allPart = a.getAllParticipants();
for(int i=0; i<allPart.size(); i++)
{
SSObject tempObj = allPart.elementAt(i);
if(tempObj instanceof Employee)
{
}
else if(tempObj instanceof Customer)
{
((Customer)tempObj).setOverheadText("");
}
}
state.getActionStateRepository().getUpdateUserStoriesAttributesActionStateRepository().add(a);
}
}
if(!updateUserTrigsOnly)
{
Vector <Employee> emps23 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<SetEmployeeProductivitiesAction> allActions = state.getActionStateRepository().getSetEmployeeProductivitiesActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
SetEmployeeProductivitiesAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
emps23.add(a);
}
}
for(int i=0; i<managers.size(); i++)
{
Manager a = managers.elementAt(i);
Vector<SetEmployeeProductivitiesAction> allActions = state.getActionStateRepository().getSetEmployeeProductivitiesActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
SetEmployeeProductivitiesAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
emps23.add(a);
}
}
for(int i=0; i<customerreps.size(); i++)
{
CustomerRep a = customerreps.elementAt(i);
Vector<SetEmployeeProductivitiesAction> allActions = state.getActionStateRepository().getSetEmployeeProductivitiesActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
SetEmployeeProductivitiesAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
emps23.add(a);
}
}
Vector <Project> projs23 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<SetEmployeeProductivitiesAction> allActions = state.getActionStateRepository().getSetEmployeeProductivitiesActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false) )
{
projs23.add(a);
}
}
while((emps23.size()  >= 1) && (projs23.size()  >= 1))
{
SetEmployeeProductivitiesAction a = new SetEmployeeProductivitiesAction();
while(true)
{
if(emps23.size() > 0)
{
Employee a0 = emps23.remove(0);
a.addEmp(a0);
}
else
{
break;
}
}
for(int i=0; i<1; i++)
{
if(projs23.size() > 0)
{
Project a1 = projs23.elementAt(0);
a.addProj(a1);
}
else
{
break;
}
}
// set all overhead texts:
Vector<SSObject> allPart = a.getAllParticipants();
for(int i=0; i<allPart.size(); i++)
{
SSObject tempObj = allPart.elementAt(i);
if(tempObj instanceof Employee)
{
}
else if(tempObj instanceof Customer)
{
((Customer)tempObj).setOverheadText("");
}
}
state.getActionStateRepository().getSetEmployeeProductivitiesActionStateRepository().add(a);
}
}
if(!updateUserTrigsOnly)
{
Vector <Project> projs24 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<UpdateProjectAttributesAction> allActions = state.getActionStateRepository().getUpdateProjectAttributesActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false) )
{
projs24.add(a);
}
}
Vector <Employee> emps24 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<UpdateProjectAttributesAction> allActions = state.getActionStateRepository().getUpdateProjectAttributesActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
UpdateProjectAttributesAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
emps24.add(a);
}
}
while((projs24.size()  >= 1) && (emps24.size()  >= 1))
{
UpdateProjectAttributesAction a = new UpdateProjectAttributesAction();
for(int i=0; i<1; i++)
{
if(projs24.size() > 0)
{
Project a0 = projs24.elementAt(0);
a.addProj(a0);
}
else
{
break;
}
}
while(true)
{
if(emps24.size() > 0)
{
Employee a1 = emps24.remove(0);
a.addEmp(a1);
}
else
{
break;
}
}
// set all overhead texts:
Vector<SSObject> allPart = a.getAllParticipants();
for(int i=0; i<allPart.size(); i++)
{
SSObject tempObj = allPart.elementAt(i);
if(tempObj instanceof Employee)
{
}
else if(tempObj instanceof Customer)
{
((Customer)tempObj).setOverheadText("");
}
}
state.getActionStateRepository().getUpdateProjectAttributesActionStateRepository().add(a);
}
}
if(!updateUserTrigsOnly)
{
Vector <Employee> emps25 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<RequireReleasePlanDoOverAction> allActions = state.getActionStateRepository().getRequireReleasePlanDoOverActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
RequireReleasePlanDoOverAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
emps25.add(a);
}
}
Vector <Project> projs25 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<RequireReleasePlanDoOverAction> allActions = state.getActionStateRepository().getRequireReleasePlanDoOverActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false) )
{
projs25.add(a);
}
}
Vector <Artifact> releaseplans25 = new Vector<Artifact>();
for(int i=0; i<releaseplans.size(); i++)
{
ReleasePlan a = releaseplans.elementAt(i);
Vector<RequireReleasePlanDoOverAction> allActions = state.getActionStateRepository().getRequireReleasePlanDoOverActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
RequireReleasePlanDoOverAction b = allActions.elementAt(j);
if(b.getAllReleasePlans().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getCompleteness() == 100.0) && (a.getManagementInvolved() == 0))
{
releaseplans25.add(a);
}
}
Vector <Employee> custreps25 = new Vector<Employee>();
for(int i=0; i<customerreps.size(); i++)
{
CustomerRep a = customerreps.elementAt(i);
Vector<RequireReleasePlanDoOverAction> allActions = state.getActionStateRepository().getRequireReleasePlanDoOverActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
RequireReleasePlanDoOverAction b = allActions.elementAt(j);
if(b.getAllCustReps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
custreps25.add(a);
}
}
while((emps25.size()  >= 1) && (projs25.size()  >= 1) && (releaseplans25.size()  >= 1) && (custreps25.size()  >= 1))
{
RequireReleasePlanDoOverAction a = new RequireReleasePlanDoOverAction();
while(true)
{
if(emps25.size() > 0)
{
Employee a0 = emps25.remove(0);
a.addEmp(a0);
}
else
{
break;
}
}
for(int i=0; i<1; i++)
{
if(projs25.size() > 0)
{
Project a1 = projs25.elementAt(0);
a.addProj(a1);
}
else
{
break;
}
}
for(int i=0; i<1; i++)
{
if(releaseplans25.size() > 0)
{
Artifact a2 = releaseplans25.remove(0);
a.addReleasePlan(a2);
}
else
{
break;
}
}
while(true)
{
if(custreps25.size() > 0)
{
Employee a3 = custreps25.remove(0);
a.addCustRep(a3);
}
else
{
break;
}
}
if((ranNumGen.nextDouble() * 100.0) < 1.0)
{
// set all overhead texts:
Vector<SSObject> allPart = a.getAllParticipants();
for(int i=0; i<allPart.size(); i++)
{
SSObject tempObj = allPart.elementAt(i);
if(tempObj instanceof Employee)
{
((Employee)tempObj).setOverheadText("Management found out that we held the release planning meeting without them. They say our release plan is all wrong, and we must be redone immediately, before any more progress is made!");
}
else if(tempObj instanceof Customer)
{
((Customer)tempObj).setOverheadText("Management found out that we held the release planning meeting without them. They say our release plan is all wrong, and we must be redone immediately, before any more progress is made!");
}
}
state.getActionStateRepository().getRequireReleasePlanDoOverActionStateRepository().add(a);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "ResetReleasePlanCompleteness", a);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "DeactivateOtherActions", a);
}
}
}
if(!updateUserTrigsOnly)
{
Vector <Employee> custreps26 = new Vector<Employee>();
for(int i=0; i<customerreps.size(); i++)
{
CustomerRep a = customerreps.elementAt(i);
Vector<CustomerComplainsAction> allActions = state.getActionStateRepository().getCustomerComplainsActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
CustomerComplainsAction b = allActions.elementAt(j);
if(b.getAllCustReps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
custreps26.add(a);
}
}
Vector <Project> projs26 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<CustomerComplainsAction> allActions = state.getActionStateRepository().getCustomerComplainsActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getTimeSinceLastRelease() >= 435) && (a.getCustomerComplaining() == false))
{
projs26.add(a);
}
}
while((custreps26.size()  >= 1) && (projs26.size()  >= 1))
{
CustomerComplainsAction a = new CustomerComplainsAction();
for(int i=0; i<1; i++)
{
if(custreps26.size() > 0)
{
Employee a0 = custreps26.remove(0);
a.addCustRep(a0);
}
else
{
break;
}
}
for(int i=0; i<1; i++)
{
if(projs26.size() > 0)
{
Project a1 = projs26.elementAt(0);
a.addProj(a1);
}
else
{
break;
}
}
// set all overhead texts:
Vector<SSObject> allPart = a.getAllParticipants();
for(int i=0; i<allPart.size(); i++)
{
SSObject tempObj = allPart.elementAt(i);
if(tempObj instanceof Employee)
{
((Employee)tempObj).setOverheadText("WHAT'S GOING ON?? I expected to see a new release of the code by now. Where is it??");
}
else if(tempObj instanceof Customer)
{
((Customer)tempObj).setOverheadText("WHAT'S GOING ON?? I expected to see a new release of the code by now. Where is it??");
}
}
state.getActionStateRepository().getCustomerComplainsActionStateRepository().add(a);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCustomerComplaining", a);
}
}
if(!updateUserTrigsOnly)
{
Vector <Employee> emps27 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<AllEmployeesIdleAction> allActions = state.getActionStateRepository().getAllEmployeesIdleActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
AllEmployeesIdleAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getIdle() == true))
{
emps27.add(a);
}
}
Vector <Project> projs27 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<AllEmployeesIdleAction> allActions = state.getActionStateRepository().getAllEmployeesIdleActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getTimeElapsed() > 0))
{
projs27.add(a);
}
}
while((emps27.size()  >= 6) && (projs27.size()  >= 1))
{
AllEmployeesIdleAction a = new AllEmployeesIdleAction();
for(int i=0; i<6; i++)
{
if(emps27.size() > 0)
{
Employee a0 = emps27.remove(0);
a.addEmp(a0);
}
else
{
break;
}
}
for(int i=0; i<1; i++)
{
if(projs27.size() > 0)
{
Project a1 = projs27.elementAt(0);
a.addProj(a1);
}
else
{
break;
}
}
// set all overhead texts:
Vector<SSObject> allPart = a.getAllParticipants();
for(int i=0; i<allPart.size(); i++)
{
SSObject tempObj = allPart.elementAt(i);
if(tempObj instanceof Employee)
{
}
else if(tempObj instanceof Customer)
{
((Customer)tempObj).setOverheadText("");
}
}
state.getActionStateRepository().getAllEmployeesIdleActionStateRepository().add(a);
}
}
Vector <Employee> emps28 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<DeliverFinalProductToCustomerAction> allActions = state.getActionStateRepository().getDeliverFinalProductToCustomerActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
DeliverFinalProductToCustomerAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
emps28.add(a);
}
}
for(int i=0; i<managers.size(); i++)
{
Manager a = managers.elementAt(i);
Vector<DeliverFinalProductToCustomerAction> allActions = state.getActionStateRepository().getDeliverFinalProductToCustomerActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
DeliverFinalProductToCustomerAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
emps28.add(a);
}
}
for(int i=0; i<customerreps.size(); i++)
{
CustomerRep a = customerreps.elementAt(i);
Vector<DeliverFinalProductToCustomerAction> allActions = state.getActionStateRepository().getDeliverFinalProductToCustomerActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
DeliverFinalProductToCustomerAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
emps28.add(a);
}
}
Vector <Project> projs28 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<DeliverFinalProductToCustomerAction> allActions = state.getActionStateRepository().getDeliverFinalProductToCustomerActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getIterationStarted() == false))
{
projs28.add(a);
}
}
Vector <Artifact> userstoriess28 = new Vector<Artifact>();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
Vector<DeliverFinalProductToCustomerAction> allActions = state.getActionStateRepository().getDeliverFinalProductToCustomerActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
DeliverFinalProductToCustomerAction b = allActions.elementAt(j);
if(b.getAllUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false)  && (a.getNumUserStoriesImplemented() >= 79.5) && (a.getNumUserStoriesIntegrated() == 80.0) && (a.getPercentErroneous() == 0.0))
{
userstoriess28.add(a);
}
}
Vector <Artifact> acceptancetestss28 = new Vector<Artifact>();
for(int i=0; i<acceptancetestss.size(); i++)
{
AcceptanceTests a = acceptancetestss.elementAt(i);
Vector<DeliverFinalProductToCustomerAction> allActions = state.getActionStateRepository().getDeliverFinalProductToCustomerActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
DeliverFinalProductToCustomerAction b = allActions.elementAt(j);
if(b.getAllAcceptanceTestss().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
acceptancetestss28.add(a);
}
}
if((emps28.size()  >= 1) && (projs28.size()  >= 1) && (userstoriess28.size()  >= 1) && (acceptancetestss28.size()  >= 1))
{
for(int j=0; j<emps28.size(); j++)
{
Employee z = (Employee)emps28.elementAt(j);
z.addMenuItem("Deliver final product to customer");
}
}
if(!updateUserTrigsOnly)
{
Vector <Employee> emps29 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<WarnOfImpendingDeadlineAction> allActions = state.getActionStateRepository().getWarnOfImpendingDeadlineActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
WarnOfImpendingDeadlineAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
emps29.add(a);
}
}
Vector <Project> projs29 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<WarnOfImpendingDeadlineAction> allActions = state.getActionStateRepository().getWarnOfImpendingDeadlineActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getTimeElapsed() == 1700))
{
projs29.add(a);
}
}
while((emps29.size()  >= 1) && (projs29.size()  >= 1))
{
WarnOfImpendingDeadlineAction a = new WarnOfImpendingDeadlineAction();
while(true)
{
if(emps29.size() > 0)
{
Employee a0 = emps29.remove(0);
a.addEmp(a0);
}
else
{
break;
}
}
for(int i=0; i<1; i++)
{
if(projs29.size() > 0)
{
Project a1 = projs29.elementAt(0);
a.addProj(a1);
}
else
{
break;
}
}
// set all overhead texts:
Vector<SSObject> allPart = a.getAllParticipants();
for(int i=0; i<allPart.size(); i++)
{
SSObject tempObj = allPart.elementAt(i);
if(tempObj instanceof Employee)
{
((Employee)tempObj).setOverheadText("WARNING: The final deadline for the project is only 100 ticks away! At the deadline, we have to deliver whatever we have so far to the customer!");
}
else if(tempObj instanceof Customer)
{
((Customer)tempObj).setOverheadText("WARNING: The final deadline for the project is only 100 ticks away! At the deadline, we have to deliver whatever we have so far to the customer!");
}
}
state.getActionStateRepository().getWarnOfImpendingDeadlineActionStateRepository().add(a);
}
}
if(!updateUserTrigsOnly)
{
Vector <Employee> emps30 = new Vector<Employee>();
for(int i=0; i<softwaredevelopers.size(); i++)
{
SoftwareDeveloper a = softwaredevelopers.elementAt(i);
Vector<GameOverAction> allActions = state.getActionStateRepository().getGameOverActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
GameOverAction b = allActions.elementAt(j);
if(b.getAllEmps().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
emps30.add(a);
}
}
Vector <Project> projs30 = new Vector<Project>();
for(int i=0; i<theprojects.size(); i++)
{
TheProject a = theprojects.elementAt(i);
Vector<GameOverAction> allActions = state.getActionStateRepository().getGameOverActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
if((alreadyInAction == false)  && (a.getTimeElapsed() == 1800))
{
projs30.add(a);
}
}
Vector <Artifact> userstoriess30 = new Vector<Artifact>();
for(int i=0; i<userstoriess.size(); i++)
{
UserStories a = userstoriess.elementAt(i);
Vector<GameOverAction> allActions = state.getActionStateRepository().getGameOverActionStateRepository().getAllActions(a);
boolean alreadyInAction = false;
for(int j=0; j<allActions.size(); j++)
{
GameOverAction b = allActions.elementAt(j);
if(b.getAllUserStoriess().contains(a))
{
alreadyInAction = true;
break;
}
}
if((alreadyInAction == false) )
{
userstoriess30.add(a);
}
}
while((emps30.size()  >= 1) && (projs30.size()  >= 1) && (userstoriess30.size()  >= 1))
{
GameOverAction a = new GameOverAction();
while(true)
{
if(emps30.size() > 0)
{
Employee a0 = emps30.remove(0);
a.addEmp(a0);
}
else
{
break;
}
}
for(int i=0; i<1; i++)
{
if(projs30.size() > 0)
{
Project a1 = projs30.elementAt(0);
a.addProj(a1);
}
else
{
break;
}
}
for(int i=0; i<1; i++)
{
if(userstoriess30.size() > 0)
{
Artifact a2 = userstoriess30.remove(0);
a.addUserStories(a2);
}
else
{
break;
}
}
// set all overhead texts:
Vector<SSObject> allPart = a.getAllParticipants();
for(int i=0; i<allPart.size(); i++)
{
SSObject tempObj = allPart.elementAt(i);
if(tempObj instanceof Employee)
{
((Employee)tempObj).setOverheadText("TIME IS UP! The customer demands the product right now!");
}
else if(tempObj instanceof Customer)
{
((Customer)tempObj).setOverheadText("TIME IS UP! The customer demands the product right now!");
}
}
state.getActionStateRepository().getGameOverActionStateRepository().add(a);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "CalculateScore", a);
// stop game and give score:
GameOverAction t111 = (GameOverAction)a;
if(t111.getAllProjs().size() > 0)
{
TheProject t = (TheProject)(t111.getAllProjs().elementAt(0));
if(t != null)
{
double v = t.getScore();
state.getClock().stop();
state.setScore(v);
((SimSEGUI)gui).update();
JOptionPane.showMessageDialog(null, ("Your score is " + v), "Game over!", JOptionPane.INFORMATION_MESSAGE);
}
}
}
}
}
}