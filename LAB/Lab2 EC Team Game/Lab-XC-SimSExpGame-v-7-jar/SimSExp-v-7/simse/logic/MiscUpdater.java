/* File generated by: simse.codegenerator.logicgenerator.MiscUpdaterGenerator */
package simse.logic;
import simse.state.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import java.util.*;
public class MiscUpdater
{
private State state;
public MiscUpdater(State s)
{
state = s;
}
public void update()
{
// clear menus and overhead texts:
Vector<Employee> employees = state.getEmployeeStateRepository().getAll();
for(int i=0; i<employees.size(); i++)
{
employees.elementAt(i).clearOverheadText();
employees.elementAt(i).clearMenu();
}

// update actions' time elapsed:
Vector<simse.adts.actions.Action> actions = state.getActionStateRepository().getAllActions();
for(int i=0; i<actions.size(); i++)
{
simse.adts.actions.Action act = actions.elementAt(i);
act.incrementTimeElapsed();
}

// decrement time to live for actions w/ timed destroyers:
Vector<StartIterationAction>startiterationActions = state.getActionStateRepository().getStartIterationActionStateRepository().getAllActions();
for (int i = 0; i < startiterationActions.size(); i++) {
StartIterationAction act = startiterationActions.elementAt(i);
act.decrementTimeToLive();
}
Vector<ReleaseCodeAndEndIterationAction>releasecodeandenditerationActions = state.getActionStateRepository().getReleaseCodeAndEndIterationActionStateRepository().getAllActions();
for (int i = 0; i < releasecodeandenditerationActions.size(); i++) {
ReleaseCodeAndEndIterationAction act = releasecodeandenditerationActions.elementAt(i);
act.decrementTimeToLive();
}
Vector<CustomerComplainsAction>customercomplainsActions = state.getActionStateRepository().getCustomerComplainsActionStateRepository().getAllActions();
for (int i = 0; i < customercomplainsActions.size(); i++) {
CustomerComplainsAction act = customercomplainsActions.elementAt(i);
act.decrementTimeToLive();
}
Vector<AllEmployeesIdleAction>allemployeesidleActions = state.getActionStateRepository().getAllEmployeesIdleActionStateRepository().getAllActions();
for (int i = 0; i < allemployeesidleActions.size(); i++) {
AllEmployeesIdleAction act = allemployeesidleActions.elementAt(i);
act.decrementTimeToLive();
}
Vector<WarnOfImpendingDeadlineAction>warnofimpendingdeadlineActions = state.getActionStateRepository().getWarnOfImpendingDeadlineActionStateRepository().getAllActions();
for (int i = 0; i < warnofimpendingdeadlineActions.size(); i++) {
WarnOfImpendingDeadlineAction act = warnofimpendingdeadlineActions.elementAt(i);
act.decrementTimeToLive();
}

// update clock:
state.getClock().incrementTime();
}
}
