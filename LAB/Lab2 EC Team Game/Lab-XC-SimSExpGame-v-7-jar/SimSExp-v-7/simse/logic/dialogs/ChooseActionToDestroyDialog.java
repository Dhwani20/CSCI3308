/* File generated by: simse.codegenerator.logicgenerator.dialoggenerator.ChooseActionToDestroyDialogGenerator */
package simse.logic.dialogs;
import simse.state.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import simse.logic.*;
import simse.gui.*;
import java.util.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import javax.swing.border.*;
import javax.swing.event.*;
public class ChooseActionToDestroyDialog extends JDialog implements ActionListener
{
private Vector<? extends simse.adts.actions.Action> actions;
private State state;
private RuleExecutor ruleExec;
private Employee emp;
private String menuText;
private JFrame gui;
private Vector<JCheckBox> checkBoxes;
private JButton okButton;
private JButton cancelButton;
public ChooseActionToDestroyDialog(JFrame owner, Vector<? extends simse.adts.actions.Action> acts, State s, Employee e, RuleExecutor r, String mText)
{
super(owner, true);
actions = acts;
state = s;
ruleExec = r;
gui = owner;
emp = e;
menuText = mText;
checkBoxes = new Vector<JCheckBox>();
setTitle("Stop Action(s)");
Box mainPane = Box.createVerticalBox();
JPanel topPane = new JPanel();
String actionName = new String();
simse.adts.actions.Action tempAct = actions.elementAt(0);
if(tempAct instanceof DesignAction)
{
actionName = "Design";
}
else if(tempAct instanceof CreateUnitTestsAction)
{
actionName = "CreateUnitTests";
}
else if(tempAct instanceof LearnCodingStandardAction)
{
actionName = "LearnCodingStandard";
}
else if(tempAct instanceof ProgramAction)
{
actionName = "Program";
}
else if(tempAct instanceof PairProgramRobertJoyceAction)
{
actionName = "PairProgramRobertJoyce";
}
else if(tempAct instanceof PairProgramTimothyRedaAction)
{
actionName = "PairProgramTimothyReda";
}
else if(tempAct instanceof PairProgramPegSigfreidoAction)
{
actionName = "PairProgramPegSigfreido";
}
else if(tempAct instanceof UnitTestingAndFixingAction)
{
actionName = "UnitTestingAndFixing";
}
else if(tempAct instanceof RefactorAction)
{
actionName = "Refactor";
}
else if(tempAct instanceof IntegrateRobertJoyceAction)
{
actionName = "IntegrateRobertJoyce";
}
else if(tempAct instanceof IntegrateTimothyRedaAction)
{
actionName = "IntegrateTimothyReda";
}
else if(tempAct instanceof IntegratePegSigfreidoAction)
{
actionName = "IntegratePegSigfreido";
}
else if(tempAct instanceof IntegrateAction)
{
actionName = "Integrate";
}
else if(tempAct instanceof AcceptanceTestingAction)
{
actionName = "AcceptanceTesting";
}
topPane.add(new JLabel("Choose which " + actionName + " Action to stop:"));
JPanel middlePane = new JPanel(new GridLayout(0, 1));
if(tempAct instanceof DesignAction)
{
for(int i=0; i<actions.size(); i++)
{
DesignAction act = (DesignAction)actions.elementAt(i);
if(act.getAllParticipants().contains(emp))
{
StringBuffer label = new StringBuffer();
label.append("Developer(s); ");
Vector<Employee> allDevelopers = act.getAllDevelopers();
for(int j=0; j<allDevelopers.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allDevelopers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("CRCCards(s); ");
Vector<Tool> allCRCCardss = act.getAllCRCCardss();
for(int j=0; j<allCRCCardss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allCRCCardss.elementAt(j);
if(a instanceof CRCCards)
{
label.append("CRCCards(" + ((CRCCards)a).getDescription() + ")");
}
}
label.append("; ");
label.append("Design(s); ");
Vector<Artifact> allDesigns = act.getAllDesigns();
for(int j=0; j<allDesigns.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allDesigns.elementAt(j);
if(a instanceof Design)
{
label.append("Design(" + ((Design)a).getDescription() + ")");
}
}
label.append("; ");
label.append("Proj(s); ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; ");
label.append("AssociatedUserStories(s); ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; ");
label.append("ReleasePlan(s); ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
JPanel tempPane = new JPanel(new BorderLayout());
JCheckBox tempCheckBox = new JCheckBox(label.toString());
tempPane.add(tempCheckBox, BorderLayout.WEST);
checkBoxes.add(tempCheckBox);
middlePane.add(tempPane);
}
}
}
else if(tempAct instanceof CreateUnitTestsAction)
{
for(int i=0; i<actions.size(); i++)
{
CreateUnitTestsAction act = (CreateUnitTestsAction)actions.elementAt(i);
if(act.getAllParticipants().contains(emp))
{
StringBuffer label = new StringBuffer();
label.append("Developer(s); ");
Vector<Employee> allDevelopers = act.getAllDevelopers();
for(int j=0; j<allDevelopers.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allDevelopers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Tests(s); ");
Vector<Artifact> allTestss = act.getAllTestss();
for(int j=0; j<allTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allTestss.elementAt(j);
if(a instanceof UnitTests)
{
label.append("UnitTests(" + ((UnitTests)a).getDescription() + ")");
}
}
label.append("; ");
label.append("TestingFramework(s); ");
Vector<Tool> allTestingFrameworks = act.getAllTestingFrameworks();
for(int j=0; j<allTestingFrameworks.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allTestingFrameworks.elementAt(j);
if(a instanceof UnitTestingFramework)
{
label.append("UnitTestingFramework(" + ((UnitTestingFramework)a).getDescription() + ")");
}
}
label.append("; ");
label.append("Proj(s); ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; ");
label.append("AssociatedDesign(s); ");
Vector<Artifact> allAssociatedDesigns = act.getAllAssociatedDesigns();
for(int j=0; j<allAssociatedDesigns.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedDesigns.elementAt(j);
if(a instanceof Design)
{
label.append("Design(" + ((Design)a).getDescription() + ")");
}
}
label.append("; ");
label.append("ReleasePlan(s); ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
JPanel tempPane = new JPanel(new BorderLayout());
JCheckBox tempCheckBox = new JCheckBox(label.toString());
tempPane.add(tempCheckBox, BorderLayout.WEST);
checkBoxes.add(tempCheckBox);
middlePane.add(tempPane);
}
}
}
else if(tempAct instanceof LearnCodingStandardAction)
{
for(int i=0; i<actions.size(); i++)
{
LearnCodingStandardAction act = (LearnCodingStandardAction)actions.elementAt(i);
if(act.getAllParticipants().contains(emp))
{
StringBuffer label = new StringBuffer();
label.append("Developer(s); ");
Vector<Employee> allDevelopers = act.getAllDevelopers();
for(int j=0; j<allDevelopers.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allDevelopers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("CodingStandard(s); ");
Vector<Tool> allCodingStandards = act.getAllCodingStandards();
for(int j=0; j<allCodingStandards.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allCodingStandards.elementAt(j);
if(a instanceof CodingStandard)
{
label.append("CodingStandard(" + ((CodingStandard)a).getDescription() + ")");
}
}
label.append("; ");
label.append("Proj(s); ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
JPanel tempPane = new JPanel(new BorderLayout());
JCheckBox tempCheckBox = new JCheckBox(label.toString());
tempPane.add(tempCheckBox, BorderLayout.WEST);
checkBoxes.add(tempCheckBox);
middlePane.add(tempPane);
}
}
}
else if(tempAct instanceof ProgramAction)
{
for(int i=0; i<actions.size(); i++)
{
ProgramAction act = (ProgramAction)actions.elementAt(i);
if(act.getAllParticipants().contains(emp))
{
StringBuffer label = new StringBuffer();
label.append("Developer(s); ");
Vector<Employee> allDevelopers = act.getAllDevelopers();
for(int j=0; j<allDevelopers.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allDevelopers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Code(s); ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; ");
label.append("CodingStandard(s); ");
Vector<Tool> allCodingStandards = act.getAllCodingStandards();
for(int j=0; j<allCodingStandards.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allCodingStandards.elementAt(j);
if(a instanceof CodingStandard)
{
label.append("CodingStandard(" + ((CodingStandard)a).getDescription() + ")");
}
}
label.append("; ");
label.append("AssociatedDesign(s); ");
Vector<Artifact> allAssociatedDesigns = act.getAllAssociatedDesigns();
for(int j=0; j<allAssociatedDesigns.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedDesigns.elementAt(j);
if(a instanceof Design)
{
label.append("Design(" + ((Design)a).getDescription() + ")");
}
}
label.append("; ");
label.append("AssociatedUnitTests(s); ");
Vector<Artifact> allAssociatedUnitTestss = act.getAllAssociatedUnitTestss();
for(int j=0; j<allAssociatedUnitTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUnitTestss.elementAt(j);
if(a instanceof UnitTests)
{
label.append("UnitTests(" + ((UnitTests)a).getDescription() + ")");
}
}
label.append("; ");
label.append("Proj(s); ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; ");
label.append("AssociatedUserStories(s); ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; ");
label.append("ReleasePlan(s); ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
JPanel tempPane = new JPanel(new BorderLayout());
JCheckBox tempCheckBox = new JCheckBox(label.toString());
tempPane.add(tempCheckBox, BorderLayout.WEST);
checkBoxes.add(tempCheckBox);
middlePane.add(tempPane);
}
}
}
else if(tempAct instanceof PairProgramRobertJoyceAction)
{
for(int i=0; i<actions.size(); i++)
{
PairProgramRobertJoyceAction act = (PairProgramRobertJoyceAction)actions.elementAt(i);
if(act.getAllParticipants().contains(emp))
{
StringBuffer label = new StringBuffer();
label.append("Robert(s); ");
Vector<Employee> allRoberts = act.getAllRoberts();
for(int j=0; j<allRoberts.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allRoberts.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Joyce(s); ");
Vector<Employee> allJoyces = act.getAllJoyces();
for(int j=0; j<allJoyces.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allJoyces.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Code(s); ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; ");
label.append("CodingStandard(s); ");
Vector<Tool> allCodingStandards = act.getAllCodingStandards();
for(int j=0; j<allCodingStandards.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allCodingStandards.elementAt(j);
if(a instanceof CodingStandard)
{
label.append("CodingStandard(" + ((CodingStandard)a).getDescription() + ")");
}
}
label.append("; ");
label.append("AssociatedDesign(s); ");
Vector<Artifact> allAssociatedDesigns = act.getAllAssociatedDesigns();
for(int j=0; j<allAssociatedDesigns.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedDesigns.elementAt(j);
if(a instanceof Design)
{
label.append("Design(" + ((Design)a).getDescription() + ")");
}
}
label.append("; ");
label.append("AssociatedUnitTests(s); ");
Vector<Artifact> allAssociatedUnitTestss = act.getAllAssociatedUnitTestss();
for(int j=0; j<allAssociatedUnitTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUnitTestss.elementAt(j);
if(a instanceof UnitTests)
{
label.append("UnitTests(" + ((UnitTests)a).getDescription() + ")");
}
}
label.append("; ");
label.append("Proj(s); ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; ");
label.append("AssociatedUserStories(s); ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; ");
label.append("ReleasePlan(s); ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
JPanel tempPane = new JPanel(new BorderLayout());
JCheckBox tempCheckBox = new JCheckBox(label.toString());
tempPane.add(tempCheckBox, BorderLayout.WEST);
checkBoxes.add(tempCheckBox);
middlePane.add(tempPane);
}
}
}
else if(tempAct instanceof PairProgramTimothyRedaAction)
{
for(int i=0; i<actions.size(); i++)
{
PairProgramTimothyRedaAction act = (PairProgramTimothyRedaAction)actions.elementAt(i);
if(act.getAllParticipants().contains(emp))
{
StringBuffer label = new StringBuffer();
label.append("Timothy(s); ");
Vector<Employee> allTimothys = act.getAllTimothys();
for(int j=0; j<allTimothys.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allTimothys.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Reda(s); ");
Vector<Employee> allRedas = act.getAllRedas();
for(int j=0; j<allRedas.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allRedas.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Code(s); ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; ");
label.append("CodingStandard(s); ");
Vector<Tool> allCodingStandards = act.getAllCodingStandards();
for(int j=0; j<allCodingStandards.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allCodingStandards.elementAt(j);
if(a instanceof CodingStandard)
{
label.append("CodingStandard(" + ((CodingStandard)a).getDescription() + ")");
}
}
label.append("; ");
label.append("AssociatedDesign(s); ");
Vector<Artifact> allAssociatedDesigns = act.getAllAssociatedDesigns();
for(int j=0; j<allAssociatedDesigns.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedDesigns.elementAt(j);
if(a instanceof Design)
{
label.append("Design(" + ((Design)a).getDescription() + ")");
}
}
label.append("; ");
label.append("AssociatedUnitTests(s); ");
Vector<Artifact> allAssociatedUnitTestss = act.getAllAssociatedUnitTestss();
for(int j=0; j<allAssociatedUnitTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUnitTestss.elementAt(j);
if(a instanceof UnitTests)
{
label.append("UnitTests(" + ((UnitTests)a).getDescription() + ")");
}
}
label.append("; ");
label.append("Proj(s); ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; ");
label.append("AssociatedUserStories(s); ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; ");
label.append("ReleasePlan(s); ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
JPanel tempPane = new JPanel(new BorderLayout());
JCheckBox tempCheckBox = new JCheckBox(label.toString());
tempPane.add(tempCheckBox, BorderLayout.WEST);
checkBoxes.add(tempCheckBox);
middlePane.add(tempPane);
}
}
}
else if(tempAct instanceof PairProgramPegSigfreidoAction)
{
for(int i=0; i<actions.size(); i++)
{
PairProgramPegSigfreidoAction act = (PairProgramPegSigfreidoAction)actions.elementAt(i);
if(act.getAllParticipants().contains(emp))
{
StringBuffer label = new StringBuffer();
label.append("Peg(s); ");
Vector<Employee> allPegs = act.getAllPegs();
for(int j=0; j<allPegs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allPegs.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Sigfreido(s); ");
Vector<Employee> allSigfreidos = act.getAllSigfreidos();
for(int j=0; j<allSigfreidos.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allSigfreidos.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Code(s); ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; ");
label.append("CodingStandard(s); ");
Vector<Tool> allCodingStandards = act.getAllCodingStandards();
for(int j=0; j<allCodingStandards.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allCodingStandards.elementAt(j);
if(a instanceof CodingStandard)
{
label.append("CodingStandard(" + ((CodingStandard)a).getDescription() + ")");
}
}
label.append("; ");
label.append("AssociatedDesign(s); ");
Vector<Artifact> allAssociatedDesigns = act.getAllAssociatedDesigns();
for(int j=0; j<allAssociatedDesigns.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedDesigns.elementAt(j);
if(a instanceof Design)
{
label.append("Design(" + ((Design)a).getDescription() + ")");
}
}
label.append("; ");
label.append("AssociatedUnitTests(s); ");
Vector<Artifact> allAssociatedUnitTestss = act.getAllAssociatedUnitTestss();
for(int j=0; j<allAssociatedUnitTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUnitTestss.elementAt(j);
if(a instanceof UnitTests)
{
label.append("UnitTests(" + ((UnitTests)a).getDescription() + ")");
}
}
label.append("; ");
label.append("Proj(s); ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; ");
label.append("AssociatedUserStories(s); ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; ");
label.append("ReleasePlan(s); ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
JPanel tempPane = new JPanel(new BorderLayout());
JCheckBox tempCheckBox = new JCheckBox(label.toString());
tempPane.add(tempCheckBox, BorderLayout.WEST);
checkBoxes.add(tempCheckBox);
middlePane.add(tempPane);
}
}
}
else if(tempAct instanceof UnitTestingAndFixingAction)
{
for(int i=0; i<actions.size(); i++)
{
UnitTestingAndFixingAction act = (UnitTestingAndFixingAction)actions.elementAt(i);
if(act.getAllParticipants().contains(emp))
{
StringBuffer label = new StringBuffer();
label.append("Emp(s); ");
Vector<Employee> allEmps = act.getAllEmps();
for(int j=0; j<allEmps.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allEmps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Code(s); ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; ");
label.append("UnitTests(s); ");
Vector<Artifact> allUnitTestss = act.getAllUnitTestss();
for(int j=0; j<allUnitTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allUnitTestss.elementAt(j);
if(a instanceof UnitTests)
{
label.append("UnitTests(" + ((UnitTests)a).getDescription() + ")");
}
}
label.append("; ");
label.append("TestingTool(s); ");
Vector<Tool> allTestingTools = act.getAllTestingTools();
for(int j=0; j<allTestingTools.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allTestingTools.elementAt(j);
if(a instanceof UnitTestingFramework)
{
label.append("UnitTestingFramework(" + ((UnitTestingFramework)a).getDescription() + ")");
}
}
label.append("; ");
label.append("Proj(s); ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; ");
label.append("AcceptanceTests(s); ");
Vector<Artifact> allAcceptanceTestss = act.getAllAcceptanceTestss();
for(int j=0; j<allAcceptanceTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAcceptanceTestss.elementAt(j);
if(a instanceof AcceptanceTests)
{
label.append("AcceptanceTests(" + ((AcceptanceTests)a).getDescription() + ")");
}
}
label.append("; ");
label.append("ReleasePlan(s); ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
JPanel tempPane = new JPanel(new BorderLayout());
JCheckBox tempCheckBox = new JCheckBox(label.toString());
tempPane.add(tempCheckBox, BorderLayout.WEST);
checkBoxes.add(tempCheckBox);
middlePane.add(tempPane);
}
}
}
else if(tempAct instanceof RefactorAction)
{
for(int i=0; i<actions.size(); i++)
{
RefactorAction act = (RefactorAction)actions.elementAt(i);
if(act.getAllParticipants().contains(emp))
{
StringBuffer label = new StringBuffer();
label.append("Emp(s); ");
Vector<Employee> allEmps = act.getAllEmps();
for(int j=0; j<allEmps.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allEmps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Code(s); ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; ");
label.append("Proj(s); ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; ");
label.append("RefactoringTool(s); ");
Vector<Tool> allRefactoringTools = act.getAllRefactoringTools();
for(int j=0; j<allRefactoringTools.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allRefactoringTools.elementAt(j);
if(a instanceof RefactoringTool)
{
label.append("RefactoringTool(" + ((RefactoringTool)a).getDescription() + ")");
}
}
label.append("; ");
label.append("ReleasePlan(s); ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
JPanel tempPane = new JPanel(new BorderLayout());
JCheckBox tempCheckBox = new JCheckBox(label.toString());
tempPane.add(tempCheckBox, BorderLayout.WEST);
checkBoxes.add(tempCheckBox);
middlePane.add(tempPane);
}
}
}
else if(tempAct instanceof IntegrateRobertJoyceAction)
{
for(int i=0; i<actions.size(); i++)
{
IntegrateRobertJoyceAction act = (IntegrateRobertJoyceAction)actions.elementAt(i);
if(act.getAllParticipants().contains(emp))
{
StringBuffer label = new StringBuffer();
label.append("Robert(s); ");
Vector<Employee> allRoberts = act.getAllRoberts();
for(int j=0; j<allRoberts.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allRoberts.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Joyce(s); ");
Vector<Employee> allJoyces = act.getAllJoyces();
for(int j=0; j<allJoyces.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allJoyces.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Code(s); ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; ");
label.append("Proj(s); ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; ");
label.append("AssociatedUserStories(s); ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; ");
label.append("ReleasePlan(s); ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
JPanel tempPane = new JPanel(new BorderLayout());
JCheckBox tempCheckBox = new JCheckBox(label.toString());
tempPane.add(tempCheckBox, BorderLayout.WEST);
checkBoxes.add(tempCheckBox);
middlePane.add(tempPane);
}
}
}
else if(tempAct instanceof IntegrateTimothyRedaAction)
{
for(int i=0; i<actions.size(); i++)
{
IntegrateTimothyRedaAction act = (IntegrateTimothyRedaAction)actions.elementAt(i);
if(act.getAllParticipants().contains(emp))
{
StringBuffer label = new StringBuffer();
label.append("Timothy(s); ");
Vector<Employee> allTimothys = act.getAllTimothys();
for(int j=0; j<allTimothys.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allTimothys.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Reda(s); ");
Vector<Employee> allRedas = act.getAllRedas();
for(int j=0; j<allRedas.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allRedas.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Code(s); ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; ");
label.append("Proj(s); ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; ");
label.append("AssociatedUserStories(s); ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; ");
label.append("ReleasePlan(s); ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
JPanel tempPane = new JPanel(new BorderLayout());
JCheckBox tempCheckBox = new JCheckBox(label.toString());
tempPane.add(tempCheckBox, BorderLayout.WEST);
checkBoxes.add(tempCheckBox);
middlePane.add(tempPane);
}
}
}
else if(tempAct instanceof IntegratePegSigfreidoAction)
{
for(int i=0; i<actions.size(); i++)
{
IntegratePegSigfreidoAction act = (IntegratePegSigfreidoAction)actions.elementAt(i);
if(act.getAllParticipants().contains(emp))
{
StringBuffer label = new StringBuffer();
label.append("Peg(s); ");
Vector<Employee> allPegs = act.getAllPegs();
for(int j=0; j<allPegs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allPegs.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Sigfreido(s); ");
Vector<Employee> allSigfreidos = act.getAllSigfreidos();
for(int j=0; j<allSigfreidos.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allSigfreidos.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Code(s); ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; ");
label.append("Proj(s); ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; ");
label.append("AssociatedUserStories(s); ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; ");
label.append("ReleasePlan(s); ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
JPanel tempPane = new JPanel(new BorderLayout());
JCheckBox tempCheckBox = new JCheckBox(label.toString());
tempPane.add(tempCheckBox, BorderLayout.WEST);
checkBoxes.add(tempCheckBox);
middlePane.add(tempPane);
}
}
}
else if(tempAct instanceof IntegrateAction)
{
for(int i=0; i<actions.size(); i++)
{
IntegrateAction act = (IntegrateAction)actions.elementAt(i);
if(act.getAllParticipants().contains(emp))
{
StringBuffer label = new StringBuffer();
label.append("Emp(s); ");
Vector<Employee> allEmps = act.getAllEmps();
for(int j=0; j<allEmps.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allEmps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Code(s); ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; ");
label.append("Proj(s); ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; ");
label.append("AssociatedUserStories(s); ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; ");
label.append("ReleasePlan(s); ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
JPanel tempPane = new JPanel(new BorderLayout());
JCheckBox tempCheckBox = new JCheckBox(label.toString());
tempPane.add(tempCheckBox, BorderLayout.WEST);
checkBoxes.add(tempCheckBox);
middlePane.add(tempPane);
}
}
}
else if(tempAct instanceof AcceptanceTestingAction)
{
for(int i=0; i<actions.size(); i++)
{
AcceptanceTestingAction act = (AcceptanceTestingAction)actions.elementAt(i);
if(act.getAllParticipants().contains(emp))
{
StringBuffer label = new StringBuffer();
label.append("Emp(s); ");
Vector<Employee> allEmps = act.getAllEmps();
for(int j=0; j<allEmps.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allEmps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; ");
label.append("Cust(s); ");
Vector<Customer> allCusts = act.getAllCusts();
for(int j=0; j<allCusts.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Customer a = allCusts.elementAt(j);
if(a instanceof CustomerRepresentative)
{
label.append("CustomerRepresentative(" + ((CustomerRepresentative)a).getName() + ")");
}
}
label.append("; ");
label.append("AcceptanceTestCases(s); ");
Vector<Artifact> allAcceptanceTestCasess = act.getAllAcceptanceTestCasess();
for(int j=0; j<allAcceptanceTestCasess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAcceptanceTestCasess.elementAt(j);
if(a instanceof AcceptanceTests)
{
label.append("AcceptanceTests(" + ((AcceptanceTests)a).getDescription() + ")");
}
}
label.append("; ");
label.append("UserStories(s); ");
Vector<Artifact> allUserStoriess = act.getAllUserStoriess();
for(int j=0; j<allUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; ");
label.append("Code(s); ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; ");
label.append("Proj(s); ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; ");
label.append("ReleasePlan(s); ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
JPanel tempPane = new JPanel(new BorderLayout());
JCheckBox tempCheckBox = new JCheckBox(label.toString());
tempPane.add(tempCheckBox, BorderLayout.WEST);
checkBoxes.add(tempCheckBox);
middlePane.add(tempPane);
}
}
}
JPanel bottomPane = new JPanel();
okButton = new JButton("OK");
okButton.addActionListener(this);
bottomPane.add(okButton);
cancelButton = new JButton("Cancel");
cancelButton.addActionListener(this);
bottomPane.add(cancelButton);
mainPane.add(topPane);
mainPane.add(middlePane);
mainPane.add(bottomPane);
setContentPane(mainPane);
validate();
pack();
repaint();
toFront();
Point ownerLoc = owner.getLocationOnScreen();
Point thisLoc = new Point();
thisLoc.setLocation((ownerLoc.getX() + (owner.getWidth() / 2) - (this.getWidth() / 2)), (ownerLoc.getY() + (owner.getHeight() / 2) - (this.getHeight() / 2)));
setLocation(thisLoc);
setVisible(true);
}
public void actionPerformed(ActionEvent evt)
{
Object source = evt.getSource();
if(source == cancelButton)
{
setVisible(false);
dispose();
}
else if(source == okButton)
{
int numChecked = 0;
for(int i=0; i<checkBoxes.size(); i++)
{
JCheckBox tempCBox = checkBoxes.elementAt(i);
if(tempCBox.isSelected())
{
numChecked++;
}
}
if(numChecked == 0)
{
JOptionPane.showMessageDialog(null, ("You must choose at least one action"), "Invalid Input", JOptionPane.ERROR_MESSAGE);
}
else
{
for(int i=0; i<checkBoxes.size(); i++)
{
JCheckBox cBox = checkBoxes.elementAt(i);
if(cBox.isSelected())
{
simse.adts.actions.Action tempAct = actions.elementAt(i);
if(tempAct instanceof DesignAction)
{
DesignAction designAct = (DesignAction)tempAct;
designAct.removeDeveloper(emp);
if(menuText.equals("Stop designing"))
{
emp.setOverheadText("I've stopped designing.");
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleDesign", designAct);
}
if(designAct.getAllDevelopers().size() < 1)
{
Vector<SSObject> c = designAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop designing"))
{
((Employee)d).setOverheadText("I've stopped designing.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop designing"))
{
((Customer)d).setOverheadText("I've stopped designing.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsDesignDest", designAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleDesign", designAct);
state.getActionStateRepository().getDesignActionStateRepository().remove(designAct);
}
else if(designAct.getAllCRCCardss().size() < 1)
{
Vector<SSObject> c = designAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop designing"))
{
((Employee)d).setOverheadText("I've stopped designing.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop designing"))
{
((Customer)d).setOverheadText("I've stopped designing.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsDesignDest", designAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleDesign", designAct);
state.getActionStateRepository().getDesignActionStateRepository().remove(designAct);
}
else if(designAct.getAllDesigns().size() < 1)
{
Vector<SSObject> c = designAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop designing"))
{
((Employee)d).setOverheadText("I've stopped designing.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop designing"))
{
((Customer)d).setOverheadText("I've stopped designing.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsDesignDest", designAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleDesign", designAct);
state.getActionStateRepository().getDesignActionStateRepository().remove(designAct);
}
else if(designAct.getAllProjs().size() < 1)
{
Vector<SSObject> c = designAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop designing"))
{
((Employee)d).setOverheadText("I've stopped designing.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop designing"))
{
((Customer)d).setOverheadText("I've stopped designing.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsDesignDest", designAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleDesign", designAct);
state.getActionStateRepository().getDesignActionStateRepository().remove(designAct);
}
else if(designAct.getAllAssociatedUserStoriess().size() < 1)
{
Vector<SSObject> c = designAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop designing"))
{
((Employee)d).setOverheadText("I've stopped designing.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop designing"))
{
((Customer)d).setOverheadText("I've stopped designing.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsDesignDest", designAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleDesign", designAct);
state.getActionStateRepository().getDesignActionStateRepository().remove(designAct);
}
else if(designAct.getAllReleasePlans().size() < 1)
{
Vector<SSObject> c = designAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop designing"))
{
((Employee)d).setOverheadText("I've stopped designing.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop designing"))
{
((Customer)d).setOverheadText("I've stopped designing.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsDesignDest", designAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleDesign", designAct);
state.getActionStateRepository().getDesignActionStateRepository().remove(designAct);
}
}
else if(tempAct instanceof CreateUnitTestsAction)
{
CreateUnitTestsAction createunittestsAct = (CreateUnitTestsAction)tempAct;
createunittestsAct.removeDeveloper(emp);
if(menuText.equals("Stop creating unit tests"))
{
emp.setOverheadText("I've stopped creating unit tests.");
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleCreateUT", createunittestsAct);
}
if(createunittestsAct.getAllDevelopers().size() < 1)
{
Vector<SSObject> c = createunittestsAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop creating unit tests"))
{
((Employee)d).setOverheadText("I've stopped creating unit tests.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop creating unit tests"))
{
((Customer)d).setOverheadText("I've stopped creating unit tests.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUnitTestsCreated", createunittestsAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsCreateUTDest", createunittestsAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleCreateUT", createunittestsAct);
state.getActionStateRepository().getCreateUnitTestsActionStateRepository().remove(createunittestsAct);
}
else if(createunittestsAct.getAllTestss().size() < 1)
{
Vector<SSObject> c = createunittestsAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop creating unit tests"))
{
((Employee)d).setOverheadText("I've stopped creating unit tests.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop creating unit tests"))
{
((Customer)d).setOverheadText("I've stopped creating unit tests.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUnitTestsCreated", createunittestsAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsCreateUTDest", createunittestsAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleCreateUT", createunittestsAct);
state.getActionStateRepository().getCreateUnitTestsActionStateRepository().remove(createunittestsAct);
}
else if(createunittestsAct.getAllTestingFrameworks().size() < 0)
{
Vector<SSObject> c = createunittestsAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop creating unit tests"))
{
((Employee)d).setOverheadText("I've stopped creating unit tests.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop creating unit tests"))
{
((Customer)d).setOverheadText("I've stopped creating unit tests.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUnitTestsCreated", createunittestsAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsCreateUTDest", createunittestsAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleCreateUT", createunittestsAct);
state.getActionStateRepository().getCreateUnitTestsActionStateRepository().remove(createunittestsAct);
}
else if(createunittestsAct.getAllProjs().size() < 1)
{
Vector<SSObject> c = createunittestsAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop creating unit tests"))
{
((Employee)d).setOverheadText("I've stopped creating unit tests.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop creating unit tests"))
{
((Customer)d).setOverheadText("I've stopped creating unit tests.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUnitTestsCreated", createunittestsAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsCreateUTDest", createunittestsAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleCreateUT", createunittestsAct);
state.getActionStateRepository().getCreateUnitTestsActionStateRepository().remove(createunittestsAct);
}
else if(createunittestsAct.getAllAssociatedDesigns().size() < 1)
{
Vector<SSObject> c = createunittestsAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop creating unit tests"))
{
((Employee)d).setOverheadText("I've stopped creating unit tests.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop creating unit tests"))
{
((Customer)d).setOverheadText("I've stopped creating unit tests.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUnitTestsCreated", createunittestsAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsCreateUTDest", createunittestsAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleCreateUT", createunittestsAct);
state.getActionStateRepository().getCreateUnitTestsActionStateRepository().remove(createunittestsAct);
}
else if(createunittestsAct.getAllReleasePlans().size() < 1)
{
Vector<SSObject> c = createunittestsAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop creating unit tests"))
{
((Employee)d).setOverheadText("I've stopped creating unit tests.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop creating unit tests"))
{
((Customer)d).setOverheadText("I've stopped creating unit tests.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUnitTestsCreated", createunittestsAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsCreateUTDest", createunittestsAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleCreateUT", createunittestsAct);
state.getActionStateRepository().getCreateUnitTestsActionStateRepository().remove(createunittestsAct);
}
}
else if(tempAct instanceof LearnCodingStandardAction)
{
LearnCodingStandardAction learncodingstandardAct = (LearnCodingStandardAction)tempAct;
learncodingstandardAct.removeDeveloper(emp);
if(menuText.equals("Stop learning coding standard"))
{
emp.setOverheadText("I've stopped learning the coding standard");
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleLearnStd", learncodingstandardAct);
}
if(learncodingstandardAct.getAllDevelopers().size() < 1)
{
Vector<SSObject> c = learncodingstandardAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop learning coding standard"))
{
((Employee)d).setOverheadText("I've stopped learning the coding standard");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop learning coding standard"))
{
((Customer)d).setOverheadText("I've stopped learning the coding standard");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetKnowsCodingStandard", learncodingstandardAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleLearnStd", learncodingstandardAct);
state.getActionStateRepository().getLearnCodingStandardActionStateRepository().remove(learncodingstandardAct);
}
else if(learncodingstandardAct.getAllCodingStandards().size() < 1)
{
Vector<SSObject> c = learncodingstandardAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop learning coding standard"))
{
((Employee)d).setOverheadText("I've stopped learning the coding standard");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop learning coding standard"))
{
((Customer)d).setOverheadText("I've stopped learning the coding standard");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetKnowsCodingStandard", learncodingstandardAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleLearnStd", learncodingstandardAct);
state.getActionStateRepository().getLearnCodingStandardActionStateRepository().remove(learncodingstandardAct);
}
else if(learncodingstandardAct.getAllProjs().size() < 1)
{
Vector<SSObject> c = learncodingstandardAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop learning coding standard"))
{
((Employee)d).setOverheadText("I've stopped learning the coding standard");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop learning coding standard"))
{
((Customer)d).setOverheadText("I've stopped learning the coding standard");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetKnowsCodingStandard", learncodingstandardAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleLearnStd", learncodingstandardAct);
state.getActionStateRepository().getLearnCodingStandardActionStateRepository().remove(learncodingstandardAct);
}
}
else if(tempAct instanceof ProgramAction)
{
ProgramAction programAct = (ProgramAction)tempAct;
programAct.removeDeveloper(emp);
if(menuText.equals("Stop programming"))
{
emp.setOverheadText("I've stopped programming.");
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingProgramDest", programAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleProgram", programAct);
}
if(programAct.getAllDevelopers().size() < 1)
{
Vector<SSObject> c = programAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop programming"))
{
((Employee)d).setOverheadText("I've stopped programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop programming"))
{
((Customer)d).setOverheadText("I've stopped programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingProgramDest", programAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsProgramDest", programAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleProgram", programAct);
state.getActionStateRepository().getProgramActionStateRepository().remove(programAct);
}
else if(programAct.getAllCodes().size() < 1)
{
Vector<SSObject> c = programAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop programming"))
{
((Employee)d).setOverheadText("I've stopped programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop programming"))
{
((Customer)d).setOverheadText("I've stopped programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingProgramDest", programAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsProgramDest", programAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleProgram", programAct);
state.getActionStateRepository().getProgramActionStateRepository().remove(programAct);
}
else if(programAct.getAllCodingStandards().size() < 1)
{
Vector<SSObject> c = programAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop programming"))
{
((Employee)d).setOverheadText("I've stopped programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop programming"))
{
((Customer)d).setOverheadText("I've stopped programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingProgramDest", programAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsProgramDest", programAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleProgram", programAct);
state.getActionStateRepository().getProgramActionStateRepository().remove(programAct);
}
else if(programAct.getAllAssociatedDesigns().size() < 1)
{
Vector<SSObject> c = programAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop programming"))
{
((Employee)d).setOverheadText("I've stopped programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop programming"))
{
((Customer)d).setOverheadText("I've stopped programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingProgramDest", programAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsProgramDest", programAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleProgram", programAct);
state.getActionStateRepository().getProgramActionStateRepository().remove(programAct);
}
else if(programAct.getAllAssociatedUnitTestss().size() < 1)
{
Vector<SSObject> c = programAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop programming"))
{
((Employee)d).setOverheadText("I've stopped programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop programming"))
{
((Customer)d).setOverheadText("I've stopped programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingProgramDest", programAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsProgramDest", programAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleProgram", programAct);
state.getActionStateRepository().getProgramActionStateRepository().remove(programAct);
}
else if(programAct.getAllProjs().size() < 1)
{
Vector<SSObject> c = programAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop programming"))
{
((Employee)d).setOverheadText("I've stopped programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop programming"))
{
((Customer)d).setOverheadText("I've stopped programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingProgramDest", programAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsProgramDest", programAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleProgram", programAct);
state.getActionStateRepository().getProgramActionStateRepository().remove(programAct);
}
else if(programAct.getAllAssociatedUserStoriess().size() < 1)
{
Vector<SSObject> c = programAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop programming"))
{
((Employee)d).setOverheadText("I've stopped programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop programming"))
{
((Customer)d).setOverheadText("I've stopped programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingProgramDest", programAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsProgramDest", programAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleProgram", programAct);
state.getActionStateRepository().getProgramActionStateRepository().remove(programAct);
}
else if(programAct.getAllReleasePlans().size() < 1)
{
Vector<SSObject> c = programAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop programming"))
{
((Employee)d).setOverheadText("I've stopped programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop programming"))
{
((Customer)d).setOverheadText("I've stopped programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingProgramDest", programAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsProgramDest", programAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleProgram", programAct);
state.getActionStateRepository().getProgramActionStateRepository().remove(programAct);
}
}
else if(tempAct instanceof PairProgramRobertJoyceAction)
{
PairProgramRobertJoyceAction pairprogramrobertjoyceAct = (PairProgramRobertJoyceAction)tempAct;
pairprogramrobertjoyceAct.removeRobert(emp);
pairprogramrobertjoyceAct.removeJoyce(emp);
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
emp.setOverheadText("We've stopped pair programming.");
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgRJ", pairprogramrobertjoyceAct);
}
if(pairprogramrobertjoyceAct.getAllRoberts().size() < 1)
{
Vector<SSObject> c = pairprogramrobertjoyceAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgRJ", pairprogramrobertjoyceAct);
state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().remove(pairprogramrobertjoyceAct);
}
else if(pairprogramrobertjoyceAct.getAllJoyces().size() < 1)
{
Vector<SSObject> c = pairprogramrobertjoyceAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgRJ", pairprogramrobertjoyceAct);
state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().remove(pairprogramrobertjoyceAct);
}
else if(pairprogramrobertjoyceAct.getAllCodes().size() < 1)
{
Vector<SSObject> c = pairprogramrobertjoyceAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgRJ", pairprogramrobertjoyceAct);
state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().remove(pairprogramrobertjoyceAct);
}
else if(pairprogramrobertjoyceAct.getAllCodingStandards().size() < 1)
{
Vector<SSObject> c = pairprogramrobertjoyceAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgRJ", pairprogramrobertjoyceAct);
state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().remove(pairprogramrobertjoyceAct);
}
else if(pairprogramrobertjoyceAct.getAllAssociatedDesigns().size() < 1)
{
Vector<SSObject> c = pairprogramrobertjoyceAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgRJ", pairprogramrobertjoyceAct);
state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().remove(pairprogramrobertjoyceAct);
}
else if(pairprogramrobertjoyceAct.getAllAssociatedUnitTestss().size() < 1)
{
Vector<SSObject> c = pairprogramrobertjoyceAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgRJ", pairprogramrobertjoyceAct);
state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().remove(pairprogramrobertjoyceAct);
}
else if(pairprogramrobertjoyceAct.getAllProjs().size() < 1)
{
Vector<SSObject> c = pairprogramrobertjoyceAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgRJ", pairprogramrobertjoyceAct);
state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().remove(pairprogramrobertjoyceAct);
}
else if(pairprogramrobertjoyceAct.getAllAssociatedUserStoriess().size() < 1)
{
Vector<SSObject> c = pairprogramrobertjoyceAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgRJ", pairprogramrobertjoyceAct);
state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().remove(pairprogramrobertjoyceAct);
}
else if(pairprogramrobertjoyceAct.getAllReleasePlans().size() < 1)
{
Vector<SSObject> c = pairprogramrobertjoyceAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Robert and Joyce)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgRJDest", pairprogramrobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgRJ", pairprogramrobertjoyceAct);
state.getActionStateRepository().getPairProgramRobertJoyceActionStateRepository().remove(pairprogramrobertjoyceAct);
}
}
else if(tempAct instanceof PairProgramTimothyRedaAction)
{
PairProgramTimothyRedaAction pairprogramtimothyredaAct = (PairProgramTimothyRedaAction)tempAct;
pairprogramtimothyredaAct.removeTimothy(emp);
pairprogramtimothyredaAct.removeReda(emp);
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
emp.setOverheadText("We've stopped pair programming.");
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgTR", pairprogramtimothyredaAct);
}
if(pairprogramtimothyredaAct.getAllTimothys().size() < 1)
{
Vector<SSObject> c = pairprogramtimothyredaAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgTR", pairprogramtimothyredaAct);
state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().remove(pairprogramtimothyredaAct);
}
else if(pairprogramtimothyredaAct.getAllRedas().size() < 1)
{
Vector<SSObject> c = pairprogramtimothyredaAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgTR", pairprogramtimothyredaAct);
state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().remove(pairprogramtimothyredaAct);
}
else if(pairprogramtimothyredaAct.getAllCodes().size() < 1)
{
Vector<SSObject> c = pairprogramtimothyredaAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgTR", pairprogramtimothyredaAct);
state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().remove(pairprogramtimothyredaAct);
}
else if(pairprogramtimothyredaAct.getAllCodingStandards().size() < 1)
{
Vector<SSObject> c = pairprogramtimothyredaAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgTR", pairprogramtimothyredaAct);
state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().remove(pairprogramtimothyredaAct);
}
else if(pairprogramtimothyredaAct.getAllAssociatedDesigns().size() < 1)
{
Vector<SSObject> c = pairprogramtimothyredaAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgTR", pairprogramtimothyredaAct);
state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().remove(pairprogramtimothyredaAct);
}
else if(pairprogramtimothyredaAct.getAllAssociatedUnitTestss().size() < 1)
{
Vector<SSObject> c = pairprogramtimothyredaAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgTR", pairprogramtimothyredaAct);
state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().remove(pairprogramtimothyredaAct);
}
else if(pairprogramtimothyredaAct.getAllProjs().size() < 1)
{
Vector<SSObject> c = pairprogramtimothyredaAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgTR", pairprogramtimothyredaAct);
state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().remove(pairprogramtimothyredaAct);
}
else if(pairprogramtimothyredaAct.getAllAssociatedUserStoriess().size() < 1)
{
Vector<SSObject> c = pairprogramtimothyredaAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgTR", pairprogramtimothyredaAct);
state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().remove(pairprogramtimothyredaAct);
}
else if(pairprogramtimothyredaAct.getAllReleasePlans().size() < 1)
{
Vector<SSObject> c = pairprogramtimothyredaAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Timothy and Reda)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgTRDest", pairprogramtimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgTR", pairprogramtimothyredaAct);
state.getActionStateRepository().getPairProgramTimothyRedaActionStateRepository().remove(pairprogramtimothyredaAct);
}
}
else if(tempAct instanceof PairProgramPegSigfreidoAction)
{
PairProgramPegSigfreidoAction pairprogrampegsigfreidoAct = (PairProgramPegSigfreidoAction)tempAct;
pairprogrampegsigfreidoAct.removePeg(emp);
pairprogrampegsigfreidoAct.removeSigfreido(emp);
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
emp.setOverheadText("We've stopped pair programming.");
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgPS", pairprogrampegsigfreidoAct);
}
if(pairprogrampegsigfreidoAct.getAllPegs().size() < 1)
{
Vector<SSObject> c = pairprogrampegsigfreidoAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgPS", pairprogrampegsigfreidoAct);
state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().remove(pairprogrampegsigfreidoAct);
}
else if(pairprogrampegsigfreidoAct.getAllSigfreidos().size() < 1)
{
Vector<SSObject> c = pairprogrampegsigfreidoAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgPS", pairprogrampegsigfreidoAct);
state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().remove(pairprogrampegsigfreidoAct);
}
else if(pairprogrampegsigfreidoAct.getAllCodes().size() < 1)
{
Vector<SSObject> c = pairprogrampegsigfreidoAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgPS", pairprogrampegsigfreidoAct);
state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().remove(pairprogrampegsigfreidoAct);
}
else if(pairprogrampegsigfreidoAct.getAllCodingStandards().size() < 1)
{
Vector<SSObject> c = pairprogrampegsigfreidoAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgPS", pairprogrampegsigfreidoAct);
state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().remove(pairprogrampegsigfreidoAct);
}
else if(pairprogrampegsigfreidoAct.getAllAssociatedDesigns().size() < 1)
{
Vector<SSObject> c = pairprogrampegsigfreidoAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgPS", pairprogrampegsigfreidoAct);
state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().remove(pairprogrampegsigfreidoAct);
}
else if(pairprogrampegsigfreidoAct.getAllAssociatedUnitTestss().size() < 1)
{
Vector<SSObject> c = pairprogrampegsigfreidoAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgPS", pairprogrampegsigfreidoAct);
state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().remove(pairprogrampegsigfreidoAct);
}
else if(pairprogrampegsigfreidoAct.getAllProjs().size() < 1)
{
Vector<SSObject> c = pairprogrampegsigfreidoAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgPS", pairprogrampegsigfreidoAct);
state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().remove(pairprogrampegsigfreidoAct);
}
else if(pairprogrampegsigfreidoAct.getAllAssociatedUserStoriess().size() < 1)
{
Vector<SSObject> c = pairprogrampegsigfreidoAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgPS", pairprogrampegsigfreidoAct);
state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().remove(pairprogrampegsigfreidoAct);
}
else if(pairprogrampegsigfreidoAct.getAllReleasePlans().size() < 1)
{
Vector<SSObject> c = pairprogrampegsigfreidoAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Employee)d).setOverheadText("We've stopped pair programming.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop pair programming (Peg & Sigfreido)"))
{
((Customer)d).setOverheadText("We've stopped pair programming.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotProgrammingPairProgramPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsPairProgPSDest", pairprogrampegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdlePairProgPS", pairprogrampegsigfreidoAct);
state.getActionStateRepository().getPairProgramPegSigfreidoActionStateRepository().remove(pairprogrampegsigfreidoAct);
}
}
else if(tempAct instanceof UnitTestingAndFixingAction)
{
UnitTestingAndFixingAction unittestingandfixingAct = (UnitTestingAndFixingAction)tempAct;
unittestingandfixingAct.removeEmp(emp);
if(menuText.equals("Stop unit testing and fixing"))
{
emp.setOverheadText("I've stopped unit testing and fixing");
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleUTFix", unittestingandfixingAct);
}
if(unittestingandfixingAct.getAllEmps().size() < 1)
{
Vector<SSObject> c = unittestingandfixingAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop unit testing and fixing"))
{
((Employee)d).setOverheadText("I've stopped unit testing and fixing");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop unit testing and fixing"))
{
((Customer)d).setOverheadText("I've stopped unit testing and fixing");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsUTDest", unittestingandfixingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleUTFix", unittestingandfixingAct);
state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().remove(unittestingandfixingAct);
}
else if(unittestingandfixingAct.getAllCodes().size() < 1)
{
Vector<SSObject> c = unittestingandfixingAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop unit testing and fixing"))
{
((Employee)d).setOverheadText("I've stopped unit testing and fixing");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop unit testing and fixing"))
{
((Customer)d).setOverheadText("I've stopped unit testing and fixing");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsUTDest", unittestingandfixingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleUTFix", unittestingandfixingAct);
state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().remove(unittestingandfixingAct);
}
else if(unittestingandfixingAct.getAllUnitTestss().size() < 1)
{
Vector<SSObject> c = unittestingandfixingAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop unit testing and fixing"))
{
((Employee)d).setOverheadText("I've stopped unit testing and fixing");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop unit testing and fixing"))
{
((Customer)d).setOverheadText("I've stopped unit testing and fixing");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsUTDest", unittestingandfixingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleUTFix", unittestingandfixingAct);
state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().remove(unittestingandfixingAct);
}
else if(unittestingandfixingAct.getAllTestingTools().size() < 0)
{
Vector<SSObject> c = unittestingandfixingAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop unit testing and fixing"))
{
((Employee)d).setOverheadText("I've stopped unit testing and fixing");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop unit testing and fixing"))
{
((Customer)d).setOverheadText("I've stopped unit testing and fixing");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsUTDest", unittestingandfixingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleUTFix", unittestingandfixingAct);
state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().remove(unittestingandfixingAct);
}
else if(unittestingandfixingAct.getAllProjs().size() < 1)
{
Vector<SSObject> c = unittestingandfixingAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop unit testing and fixing"))
{
((Employee)d).setOverheadText("I've stopped unit testing and fixing");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop unit testing and fixing"))
{
((Customer)d).setOverheadText("I've stopped unit testing and fixing");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsUTDest", unittestingandfixingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleUTFix", unittestingandfixingAct);
state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().remove(unittestingandfixingAct);
}
else if(unittestingandfixingAct.getAllAcceptanceTestss().size() < 1)
{
Vector<SSObject> c = unittestingandfixingAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop unit testing and fixing"))
{
((Employee)d).setOverheadText("I've stopped unit testing and fixing");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop unit testing and fixing"))
{
((Customer)d).setOverheadText("I've stopped unit testing and fixing");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsUTDest", unittestingandfixingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleUTFix", unittestingandfixingAct);
state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().remove(unittestingandfixingAct);
}
else if(unittestingandfixingAct.getAllReleasePlans().size() < 1)
{
Vector<SSObject> c = unittestingandfixingAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop unit testing and fixing"))
{
((Employee)d).setOverheadText("I've stopped unit testing and fixing");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop unit testing and fixing"))
{
((Customer)d).setOverheadText("I've stopped unit testing and fixing");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsUTDest", unittestingandfixingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleUTFix", unittestingandfixingAct);
state.getActionStateRepository().getUnitTestingAndFixingActionStateRepository().remove(unittestingandfixingAct);
}
}
else if(tempAct instanceof RefactorAction)
{
RefactorAction refactorAct = (RefactorAction)tempAct;
refactorAct.removeEmp(emp);
if(menuText.equals("Stop refactoring"))
{
emp.setOverheadText("I've stopped refactoring the code");
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleRefactor", refactorAct);
}
if(refactorAct.getAllEmps().size() < 1)
{
Vector<SSObject> c = refactorAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop refactoring"))
{
((Employee)d).setOverheadText("I've stopped refactoring the code");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop refactoring"))
{
((Customer)d).setOverheadText("I've stopped refactoring the code");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsRefactorDest", refactorAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleRefactor", refactorAct);
state.getActionStateRepository().getRefactorActionStateRepository().remove(refactorAct);
}
else if(refactorAct.getAllCodes().size() < 1)
{
Vector<SSObject> c = refactorAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop refactoring"))
{
((Employee)d).setOverheadText("I've stopped refactoring the code");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop refactoring"))
{
((Customer)d).setOverheadText("I've stopped refactoring the code");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsRefactorDest", refactorAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleRefactor", refactorAct);
state.getActionStateRepository().getRefactorActionStateRepository().remove(refactorAct);
}
else if(refactorAct.getAllProjs().size() < 1)
{
Vector<SSObject> c = refactorAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop refactoring"))
{
((Employee)d).setOverheadText("I've stopped refactoring the code");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop refactoring"))
{
((Customer)d).setOverheadText("I've stopped refactoring the code");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsRefactorDest", refactorAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleRefactor", refactorAct);
state.getActionStateRepository().getRefactorActionStateRepository().remove(refactorAct);
}
else if(refactorAct.getAllRefactoringTools().size() < 0)
{
Vector<SSObject> c = refactorAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop refactoring"))
{
((Employee)d).setOverheadText("I've stopped refactoring the code");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop refactoring"))
{
((Customer)d).setOverheadText("I've stopped refactoring the code");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsRefactorDest", refactorAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleRefactor", refactorAct);
state.getActionStateRepository().getRefactorActionStateRepository().remove(refactorAct);
}
else if(refactorAct.getAllReleasePlans().size() < 1)
{
Vector<SSObject> c = refactorAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop refactoring"))
{
((Employee)d).setOverheadText("I've stopped refactoring the code");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop refactoring"))
{
((Customer)d).setOverheadText("I've stopped refactoring the code");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsRefactorDest", refactorAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleRefactor", refactorAct);
state.getActionStateRepository().getRefactorActionStateRepository().remove(refactorAct);
}
}
else if(tempAct instanceof IntegrateRobertJoyceAction)
{
IntegrateRobertJoyceAction integraterobertjoyceAct = (IntegrateRobertJoyceAction)tempAct;
integraterobertjoyceAct.removeRobert(emp);
integraterobertjoyceAct.removeJoyce(emp);
if(menuText.equals("Stop integrating - Robert and Joyce"))
{
emp.setOverheadText("We've stopped integrating.");
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingRJ", integraterobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntRJ", integraterobertjoyceAct);
}
if(integraterobertjoyceAct.getAllRoberts().size() < 1)
{
Vector<SSObject> c = integraterobertjoyceAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Robert and Joyce"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Robert and Joyce"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingRJ", integraterobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateRJDest", integraterobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntRJ", integraterobertjoyceAct);
state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().remove(integraterobertjoyceAct);
}
else if(integraterobertjoyceAct.getAllJoyces().size() < 1)
{
Vector<SSObject> c = integraterobertjoyceAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Robert and Joyce"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Robert and Joyce"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingRJ", integraterobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateRJDest", integraterobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntRJ", integraterobertjoyceAct);
state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().remove(integraterobertjoyceAct);
}
else if(integraterobertjoyceAct.getAllCodes().size() < 1)
{
Vector<SSObject> c = integraterobertjoyceAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Robert and Joyce"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Robert and Joyce"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingRJ", integraterobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateRJDest", integraterobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntRJ", integraterobertjoyceAct);
state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().remove(integraterobertjoyceAct);
}
else if(integraterobertjoyceAct.getAllProjs().size() < 1)
{
Vector<SSObject> c = integraterobertjoyceAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Robert and Joyce"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Robert and Joyce"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingRJ", integraterobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateRJDest", integraterobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntRJ", integraterobertjoyceAct);
state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().remove(integraterobertjoyceAct);
}
else if(integraterobertjoyceAct.getAllAssociatedUserStoriess().size() < 1)
{
Vector<SSObject> c = integraterobertjoyceAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Robert and Joyce"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Robert and Joyce"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingRJ", integraterobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateRJDest", integraterobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntRJ", integraterobertjoyceAct);
state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().remove(integraterobertjoyceAct);
}
else if(integraterobertjoyceAct.getAllReleasePlans().size() < 1)
{
Vector<SSObject> c = integraterobertjoyceAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Robert and Joyce"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Robert and Joyce"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingRJ", integraterobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateRJDest", integraterobertjoyceAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntRJ", integraterobertjoyceAct);
state.getActionStateRepository().getIntegrateRobertJoyceActionStateRepository().remove(integraterobertjoyceAct);
}
}
else if(tempAct instanceof IntegrateTimothyRedaAction)
{
IntegrateTimothyRedaAction integratetimothyredaAct = (IntegrateTimothyRedaAction)tempAct;
integratetimothyredaAct.removeTimothy(emp);
integratetimothyredaAct.removeReda(emp);
if(menuText.equals("Stop integrating - Timothy and Reda"))
{
emp.setOverheadText("We've stopped integrating.");
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingTR", integratetimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntTR", integratetimothyredaAct);
}
if(integratetimothyredaAct.getAllTimothys().size() < 1)
{
Vector<SSObject> c = integratetimothyredaAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Timothy and Reda"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Timothy and Reda"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingTR", integratetimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateTRDest", integratetimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntTR", integratetimothyredaAct);
state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().remove(integratetimothyredaAct);
}
else if(integratetimothyredaAct.getAllRedas().size() < 1)
{
Vector<SSObject> c = integratetimothyredaAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Timothy and Reda"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Timothy and Reda"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingTR", integratetimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateTRDest", integratetimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntTR", integratetimothyredaAct);
state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().remove(integratetimothyredaAct);
}
else if(integratetimothyredaAct.getAllCodes().size() < 1)
{
Vector<SSObject> c = integratetimothyredaAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Timothy and Reda"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Timothy and Reda"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingTR", integratetimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateTRDest", integratetimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntTR", integratetimothyredaAct);
state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().remove(integratetimothyredaAct);
}
else if(integratetimothyredaAct.getAllProjs().size() < 1)
{
Vector<SSObject> c = integratetimothyredaAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Timothy and Reda"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Timothy and Reda"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingTR", integratetimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateTRDest", integratetimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntTR", integratetimothyredaAct);
state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().remove(integratetimothyredaAct);
}
else if(integratetimothyredaAct.getAllAssociatedUserStoriess().size() < 1)
{
Vector<SSObject> c = integratetimothyredaAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Timothy and Reda"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Timothy and Reda"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingTR", integratetimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateTRDest", integratetimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntTR", integratetimothyredaAct);
state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().remove(integratetimothyredaAct);
}
else if(integratetimothyredaAct.getAllReleasePlans().size() < 1)
{
Vector<SSObject> c = integratetimothyredaAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Timothy and Reda"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Timothy and Reda"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingTR", integratetimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateTRDest", integratetimothyredaAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntTR", integratetimothyredaAct);
state.getActionStateRepository().getIntegrateTimothyRedaActionStateRepository().remove(integratetimothyredaAct);
}
}
else if(tempAct instanceof IntegratePegSigfreidoAction)
{
IntegratePegSigfreidoAction integratepegsigfreidoAct = (IntegratePegSigfreidoAction)tempAct;
integratepegsigfreidoAct.removePeg(emp);
integratepegsigfreidoAct.removeSigfreido(emp);
if(menuText.equals("Stop integrating - Peg and Sigfreido"))
{
emp.setOverheadText("We've stopped integrating.");
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingPS", integratepegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntPS", integratepegsigfreidoAct);
}
if(integratepegsigfreidoAct.getAllPegs().size() < 1)
{
Vector<SSObject> c = integratepegsigfreidoAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Peg and Sigfreido"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Peg and Sigfreido"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingPS", integratepegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegratePSDest", integratepegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntPS", integratepegsigfreidoAct);
state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().remove(integratepegsigfreidoAct);
}
else if(integratepegsigfreidoAct.getAllSigfreidos().size() < 1)
{
Vector<SSObject> c = integratepegsigfreidoAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Peg and Sigfreido"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Peg and Sigfreido"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingPS", integratepegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegratePSDest", integratepegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntPS", integratepegsigfreidoAct);
state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().remove(integratepegsigfreidoAct);
}
else if(integratepegsigfreidoAct.getAllCodes().size() < 1)
{
Vector<SSObject> c = integratepegsigfreidoAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Peg and Sigfreido"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Peg and Sigfreido"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingPS", integratepegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegratePSDest", integratepegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntPS", integratepegsigfreidoAct);
state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().remove(integratepegsigfreidoAct);
}
else if(integratepegsigfreidoAct.getAllProjs().size() < 1)
{
Vector<SSObject> c = integratepegsigfreidoAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Peg and Sigfreido"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Peg and Sigfreido"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingPS", integratepegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegratePSDest", integratepegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntPS", integratepegsigfreidoAct);
state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().remove(integratepegsigfreidoAct);
}
else if(integratepegsigfreidoAct.getAllAssociatedUserStoriess().size() < 1)
{
Vector<SSObject> c = integratepegsigfreidoAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Peg and Sigfreido"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Peg and Sigfreido"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingPS", integratepegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegratePSDest", integratepegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntPS", integratepegsigfreidoAct);
state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().remove(integratepegsigfreidoAct);
}
else if(integratepegsigfreidoAct.getAllReleasePlans().size() < 1)
{
Vector<SSObject> c = integratepegsigfreidoAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating - Peg and Sigfreido"))
{
((Employee)d).setOverheadText("We've stopped integrating.");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating - Peg and Sigfreido"))
{
((Customer)d).setOverheadText("We've stopped integrating.");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegratingPS", integratepegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegratePSDest", integratepegsigfreidoAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntPS", integratepegsigfreidoAct);
state.getActionStateRepository().getIntegratePegSigfreidoActionStateRepository().remove(integratepegsigfreidoAct);
}
}
else if(tempAct instanceof IntegrateAction)
{
IntegrateAction integrateAct = (IntegrateAction)tempAct;
integrateAct.removeEmp(emp);
if(menuText.equals("Stop integrating"))
{
emp.setOverheadText("I've stopped integrating");
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegrating", integrateAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntegrate", integrateAct);
}
if(integrateAct.getAllEmps().size() < 1)
{
Vector<SSObject> c = integrateAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating"))
{
((Employee)d).setOverheadText("I've stopped integrating");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating"))
{
((Customer)d).setOverheadText("I've stopped integrating");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegrating", integrateAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateDest", integrateAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntegrate", integrateAct);
state.getActionStateRepository().getIntegrateActionStateRepository().remove(integrateAct);
}
else if(integrateAct.getAllCodes().size() < 1)
{
Vector<SSObject> c = integrateAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating"))
{
((Employee)d).setOverheadText("I've stopped integrating");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating"))
{
((Customer)d).setOverheadText("I've stopped integrating");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegrating", integrateAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateDest", integrateAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntegrate", integrateAct);
state.getActionStateRepository().getIntegrateActionStateRepository().remove(integrateAct);
}
else if(integrateAct.getAllProjs().size() < 1)
{
Vector<SSObject> c = integrateAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating"))
{
((Employee)d).setOverheadText("I've stopped integrating");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating"))
{
((Customer)d).setOverheadText("I've stopped integrating");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegrating", integrateAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateDest", integrateAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntegrate", integrateAct);
state.getActionStateRepository().getIntegrateActionStateRepository().remove(integrateAct);
}
else if(integrateAct.getAllAssociatedUserStoriess().size() < 1)
{
Vector<SSObject> c = integrateAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating"))
{
((Employee)d).setOverheadText("I've stopped integrating");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating"))
{
((Customer)d).setOverheadText("I've stopped integrating");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegrating", integrateAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateDest", integrateAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntegrate", integrateAct);
state.getActionStateRepository().getIntegrateActionStateRepository().remove(integrateAct);
}
else if(integrateAct.getAllReleasePlans().size() < 1)
{
Vector<SSObject> c = integrateAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop integrating"))
{
((Employee)d).setOverheadText("I've stopped integrating");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop integrating"))
{
((Customer)d).setOverheadText("I've stopped integrating");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIntegrating", integrateAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "UpdateNumActsIntegrateDest", integrateAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleIntegrate", integrateAct);
state.getActionStateRepository().getIntegrateActionStateRepository().remove(integrateAct);
}
}
else if(tempAct instanceof AcceptanceTestingAction)
{
AcceptanceTestingAction acceptancetestingAct = (AcceptanceTestingAction)tempAct;
acceptancetestingAct.removeEmp(emp);
if(menuText.equals("Stop acceptance testing"))
{
emp.setOverheadText("We've halted acceptance testing");
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleAccTest", acceptancetestingAct);
}
if(acceptancetestingAct.getAllEmps().size() < 1)
{
Vector<SSObject> c = acceptancetestingAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop acceptance testing"))
{
((Employee)d).setOverheadText("We've halted acceptance testing");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop acceptance testing"))
{
((Customer)d).setOverheadText("We've halted acceptance testing");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotAcceptanceTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNumFailedTests", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCodePcntErroneousAccTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUSPcntErroneousAccTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCustomerInvolvedAccTestDest", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleAccTest", acceptancetestingAct);
state.getActionStateRepository().getAcceptanceTestingActionStateRepository().remove(acceptancetestingAct);
}
else if(acceptancetestingAct.getAllCusts().size() < 1)
{
Vector<SSObject> c = acceptancetestingAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop acceptance testing"))
{
((Employee)d).setOverheadText("We've halted acceptance testing");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop acceptance testing"))
{
((Customer)d).setOverheadText("We've halted acceptance testing");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotAcceptanceTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNumFailedTests", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCodePcntErroneousAccTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUSPcntErroneousAccTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCustomerInvolvedAccTestDest", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleAccTest", acceptancetestingAct);
state.getActionStateRepository().getAcceptanceTestingActionStateRepository().remove(acceptancetestingAct);
}
else if(acceptancetestingAct.getAllAcceptanceTestCasess().size() < 1)
{
Vector<SSObject> c = acceptancetestingAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop acceptance testing"))
{
((Employee)d).setOverheadText("We've halted acceptance testing");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop acceptance testing"))
{
((Customer)d).setOverheadText("We've halted acceptance testing");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotAcceptanceTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNumFailedTests", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCodePcntErroneousAccTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUSPcntErroneousAccTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCustomerInvolvedAccTestDest", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleAccTest", acceptancetestingAct);
state.getActionStateRepository().getAcceptanceTestingActionStateRepository().remove(acceptancetestingAct);
}
else if(acceptancetestingAct.getAllUserStoriess().size() < 1)
{
Vector<SSObject> c = acceptancetestingAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop acceptance testing"))
{
((Employee)d).setOverheadText("We've halted acceptance testing");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop acceptance testing"))
{
((Customer)d).setOverheadText("We've halted acceptance testing");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotAcceptanceTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNumFailedTests", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCodePcntErroneousAccTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUSPcntErroneousAccTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCustomerInvolvedAccTestDest", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleAccTest", acceptancetestingAct);
state.getActionStateRepository().getAcceptanceTestingActionStateRepository().remove(acceptancetestingAct);
}
else if(acceptancetestingAct.getAllCodes().size() < 1)
{
Vector<SSObject> c = acceptancetestingAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop acceptance testing"))
{
((Employee)d).setOverheadText("We've halted acceptance testing");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop acceptance testing"))
{
((Customer)d).setOverheadText("We've halted acceptance testing");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotAcceptanceTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNumFailedTests", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCodePcntErroneousAccTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUSPcntErroneousAccTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCustomerInvolvedAccTestDest", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleAccTest", acceptancetestingAct);
state.getActionStateRepository().getAcceptanceTestingActionStateRepository().remove(acceptancetestingAct);
}
else if(acceptancetestingAct.getAllProjs().size() < 1)
{
Vector<SSObject> c = acceptancetestingAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop acceptance testing"))
{
((Employee)d).setOverheadText("We've halted acceptance testing");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop acceptance testing"))
{
((Customer)d).setOverheadText("We've halted acceptance testing");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotAcceptanceTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNumFailedTests", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCodePcntErroneousAccTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUSPcntErroneousAccTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCustomerInvolvedAccTestDest", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleAccTest", acceptancetestingAct);
state.getActionStateRepository().getAcceptanceTestingActionStateRepository().remove(acceptancetestingAct);
}
else if(acceptancetestingAct.getAllReleasePlans().size() < 1)
{
Vector<SSObject> c = acceptancetestingAct.getAllParticipants();
for(int j=0; j<c.size(); j++)
{
SSObject d = c.elementAt(j);
if(d instanceof Employee)
{
if(menuText.equals("Stop acceptance testing"))
{
((Employee)d).setOverheadText("We've halted acceptance testing");
}
}
else if(d instanceof Customer)
{
if(menuText.equals("Stop acceptance testing"))
{
((Customer)d).setOverheadText("We've halted acceptance testing");
}
}
}
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotAcceptanceTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNumFailedTests", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCodePcntErroneousAccTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetUSPcntErroneousAccTesting", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetCustomerInvolvedAccTestDest", acceptancetestingAct);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIdleAccTest", acceptancetestingAct);
state.getActionStateRepository().getAcceptanceTestingActionStateRepository().remove(acceptancetestingAct);
}
}
}
}
setVisible(false);
dispose();
}
}
}
}
