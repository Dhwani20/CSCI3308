/* File generated by: simse.codegenerator.logicgenerator.dialoggenerator.ChooseActionToJoinDialogGenerator */
package simse.logic.dialogs;
import simse.state.*;
import simse.logic.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import java.util.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import javax.swing.border.*;
import javax.swing.event.*;
public class ChooseActionToJoinDialog extends JDialog implements ActionListener
{
private JFrame gui;
private Vector<? extends simse.adts.actions.Action> actions;
private State state;
private Employee emp;
private Vector<JRadioButton> radioButtons;
private ButtonGroup radioButtonGroup;
private JButton okButton;
private JButton cancelButton;
private String menuText;
private RuleExecutor ruleExec;
public ChooseActionToJoinDialog(JFrame owner, Vector<? extends simse.adts.actions.Action> acts, Employee e, State s, String menText, RuleExecutor re)
{
super(owner, true);
gui = owner;
actions = acts;
emp = e;
state = s;
menuText = menText;
ruleExec = re;
radioButtons = new Vector<JRadioButton>();
radioButtonGroup = new ButtonGroup();
setTitle("Join Action");
Box mainPane = Box.createVerticalBox();
JPanel topPane = new JPanel();
String actionName = new String();
simse.adts.actions.Action tempAct = actions.elementAt(0);
if(tempAct instanceof CreateUserStoriesAction)
{
actionName = "CreateUserStories";
}
else if(tempAct instanceof ReleasePlanningMeetingAction)
{
actionName = "ReleasePlanningMeeting";
}
else if(tempAct instanceof StartIterationAction)
{
actionName = "StartIteration";
}
else if(tempAct instanceof IterationPlanningMeetingAction)
{
actionName = "IterationPlanningMeeting";
}
else if(tempAct instanceof CreateAcceptanceTestsAction)
{
actionName = "CreateAcceptanceTests";
}
else if(tempAct instanceof DesignAction)
{
actionName = "Design";
}
else if(tempAct instanceof CreateUnitTestsAction)
{
actionName = "CreateUnitTests";
}
else if(tempAct instanceof LearnCodingStandardAction)
{
actionName = "LearnCodingStandard";
}
else if(tempAct instanceof ProgramAction)
{
actionName = "Program";
}
else if(tempAct instanceof PairProgramRobertJoyceAction)
{
actionName = "PairProgramRobertJoyce";
}
else if(tempAct instanceof PairProgramTimothyRedaAction)
{
actionName = "PairProgramTimothyReda";
}
else if(tempAct instanceof PairProgramPegSigfreidoAction)
{
actionName = "PairProgramPegSigfreido";
}
else if(tempAct instanceof UnitTestingAndFixingAction)
{
actionName = "UnitTestingAndFixing";
}
else if(tempAct instanceof RefactorAction)
{
actionName = "Refactor";
}
else if(tempAct instanceof IntegrateRobertJoyceAction)
{
actionName = "IntegrateRobertJoyce";
}
else if(tempAct instanceof IntegrateTimothyRedaAction)
{
actionName = "IntegrateTimothyReda";
}
else if(tempAct instanceof IntegratePegSigfreidoAction)
{
actionName = "IntegratePegSigfreido";
}
else if(tempAct instanceof IntegrateAction)
{
actionName = "Integrate";
}
else if(tempAct instanceof AcceptanceTestingAction)
{
actionName = "AcceptanceTesting";
}
else if(tempAct instanceof ReleaseCodeAndEndIterationAction)
{
actionName = "ReleaseCodeAndEndIteration";
}
else if(tempAct instanceof DeliverFinalProductToCustomerAction)
{
actionName = "DeliverFinalProductToCustomer";
}
topPane.add(new JLabel("Choose which " + actionName + " Action to join:"));
JPanel middlePane = new JPanel(new GridLayout(0, 1));
if(tempAct instanceof CreateUserStoriesAction)
{
for(int i=0; i<actions.size(); i++)
{
CreateUserStoriesAction act = (CreateUserStoriesAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Developer(s): ");
Vector<Employee> allDevelopers = act.getAllDevelopers();
for(int j=0; j<allDevelopers.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allDevelopers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("CustomerRep(s): ");
Vector<Employee> allCustomerReps = act.getAllCustomerReps();
for(int j=0; j<allCustomerReps.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allCustomerReps.elementAt(j);
if(a instanceof CustomerRep)
{
label.append("CustomerRep(" + ((CustomerRep)a).getName() + ")");
}
}
label.append("; <br>");
label.append("UserStories(s): ");
Vector<Artifact> allUserStoriess = act.getAllUserStoriess();
for(int j=0; j<allUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof ReleasePlanningMeetingAction)
{
for(int i=0; i<actions.size(); i++)
{
ReleasePlanningMeetingAction act = (ReleasePlanningMeetingAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Developer(s): ");
Vector<Employee> allDevelopers = act.getAllDevelopers();
for(int j=0; j<allDevelopers.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allDevelopers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Manager(s): ");
Vector<Employee> allManagers = act.getAllManagers();
for(int j=0; j<allManagers.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allManagers.elementAt(j);
if(a instanceof Manager)
{
label.append("Manager(" + ((Manager)a).getName() + ")");
}
}
label.append("; <br>");
label.append("CustomerRep(s): ");
Vector<Employee> allCustomerReps = act.getAllCustomerReps();
for(int j=0; j<allCustomerReps.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allCustomerReps.elementAt(j);
if(a instanceof CustomerRep)
{
label.append("CustomerRep(" + ((CustomerRep)a).getName() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("; <br>");
label.append("UserStories(s): ");
Vector<Artifact> allUserStoriess = act.getAllUserStoriess();
for(int j=0; j<allUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof StartIterationAction)
{
for(int i=0; i<actions.size(); i++)
{
StartIterationAction act = (StartIterationAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Emp(s): ");
Vector<Employee> allEmps = act.getAllEmps();
for(int j=0; j<allEmps.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allEmps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("; <br>");
label.append("UserStories(s): ");
Vector<Artifact> allUserStoriess = act.getAllUserStoriess();
for(int j=0; j<allUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; <br>");
label.append("IterationPlan(s): ");
Vector<Artifact> allIterationPlans = act.getAllIterationPlans();
for(int j=0; j<allIterationPlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allIterationPlans.elementAt(j);
if(a instanceof CurrentIterationPlan)
{
label.append("CurrentIterationPlan(" + ((CurrentIterationPlan)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Design(s): ");
Vector<Artifact> allDesigns = act.getAllDesigns();
for(int j=0; j<allDesigns.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allDesigns.elementAt(j);
if(a instanceof Design)
{
label.append("Design(" + ((Design)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("UnitTests(s): ");
Vector<Artifact> allUnitTestss = act.getAllUnitTestss();
for(int j=0; j<allUnitTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allUnitTestss.elementAt(j);
if(a instanceof UnitTests)
{
label.append("UnitTests(" + ((UnitTests)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("AcceptanceTests(s): ");
Vector<Artifact> allAcceptanceTestss = act.getAllAcceptanceTestss();
for(int j=0; j<allAcceptanceTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAcceptanceTestss.elementAt(j);
if(a instanceof AcceptanceTests)
{
label.append("AcceptanceTests(" + ((AcceptanceTests)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Code(s): ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("CustomerRep(s): ");
Vector<Employee> allCustomerReps = act.getAllCustomerReps();
for(int j=0; j<allCustomerReps.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allCustomerReps.elementAt(j);
if(a instanceof CustomerRep)
{
label.append("CustomerRep(" + ((CustomerRep)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof IterationPlanningMeetingAction)
{
for(int i=0; i<actions.size(); i++)
{
IterationPlanningMeetingAction act = (IterationPlanningMeetingAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Developer(s): ");
Vector<Employee> allDevelopers = act.getAllDevelopers();
for(int j=0; j<allDevelopers.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allDevelopers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("CustomerRep(s): ");
Vector<Employee> allCustomerReps = act.getAllCustomerReps();
for(int j=0; j<allCustomerReps.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allCustomerReps.elementAt(j);
if(a instanceof CustomerRep)
{
label.append("CustomerRep(" + ((CustomerRep)a).getName() + ")");
}
}
label.append("; <br>");
label.append("IterationPlan(s): ");
Vector<Artifact> allIterationPlans = act.getAllIterationPlans();
for(int j=0; j<allIterationPlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allIterationPlans.elementAt(j);
if(a instanceof CurrentIterationPlan)
{
label.append("CurrentIterationPlan(" + ((CurrentIterationPlan)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof CreateAcceptanceTestsAction)
{
for(int i=0; i<actions.size(); i++)
{
CreateAcceptanceTestsAction act = (CreateAcceptanceTestsAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Developer(s): ");
Vector<Employee> allDevelopers = act.getAllDevelopers();
for(int j=0; j<allDevelopers.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allDevelopers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("CustRep(s): ");
Vector<Employee> allCustReps = act.getAllCustReps();
for(int j=0; j<allCustReps.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allCustReps.elementAt(j);
if(a instanceof CustomerRep)
{
label.append("CustomerRep(" + ((CustomerRep)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Tests(s): ");
Vector<Artifact> allTestss = act.getAllTestss();
for(int j=0; j<allTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allTestss.elementAt(j);
if(a instanceof AcceptanceTests)
{
label.append("AcceptanceTests(" + ((AcceptanceTests)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof DesignAction)
{
for(int i=0; i<actions.size(); i++)
{
DesignAction act = (DesignAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Developer(s): ");
Vector<Employee> allDevelopers = act.getAllDevelopers();
for(int j=0; j<allDevelopers.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allDevelopers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("CRCCards(s): ");
Vector<Tool> allCRCCardss = act.getAllCRCCardss();
for(int j=0; j<allCRCCardss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allCRCCardss.elementAt(j);
if(a instanceof CRCCards)
{
label.append("CRCCards(" + ((CRCCards)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Design(s): ");
Vector<Artifact> allDesigns = act.getAllDesigns();
for(int j=0; j<allDesigns.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allDesigns.elementAt(j);
if(a instanceof Design)
{
label.append("Design(" + ((Design)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("AssociatedUserStories(s): ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof CreateUnitTestsAction)
{
for(int i=0; i<actions.size(); i++)
{
CreateUnitTestsAction act = (CreateUnitTestsAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Developer(s): ");
Vector<Employee> allDevelopers = act.getAllDevelopers();
for(int j=0; j<allDevelopers.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allDevelopers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Tests(s): ");
Vector<Artifact> allTestss = act.getAllTestss();
for(int j=0; j<allTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allTestss.elementAt(j);
if(a instanceof UnitTests)
{
label.append("UnitTests(" + ((UnitTests)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("TestingFramework(s): ");
Vector<Tool> allTestingFrameworks = act.getAllTestingFrameworks();
for(int j=0; j<allTestingFrameworks.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allTestingFrameworks.elementAt(j);
if(a instanceof UnitTestingFramework)
{
label.append("UnitTestingFramework(" + ((UnitTestingFramework)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("AssociatedDesign(s): ");
Vector<Artifact> allAssociatedDesigns = act.getAllAssociatedDesigns();
for(int j=0; j<allAssociatedDesigns.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedDesigns.elementAt(j);
if(a instanceof Design)
{
label.append("Design(" + ((Design)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof LearnCodingStandardAction)
{
for(int i=0; i<actions.size(); i++)
{
LearnCodingStandardAction act = (LearnCodingStandardAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Developer(s): ");
Vector<Employee> allDevelopers = act.getAllDevelopers();
for(int j=0; j<allDevelopers.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allDevelopers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("CodingStandard(s): ");
Vector<Tool> allCodingStandards = act.getAllCodingStandards();
for(int j=0; j<allCodingStandards.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allCodingStandards.elementAt(j);
if(a instanceof CodingStandard)
{
label.append("CodingStandard(" + ((CodingStandard)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof ProgramAction)
{
for(int i=0; i<actions.size(); i++)
{
ProgramAction act = (ProgramAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Developer(s): ");
Vector<Employee> allDevelopers = act.getAllDevelopers();
for(int j=0; j<allDevelopers.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allDevelopers.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Code(s): ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("CodingStandard(s): ");
Vector<Tool> allCodingStandards = act.getAllCodingStandards();
for(int j=0; j<allCodingStandards.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allCodingStandards.elementAt(j);
if(a instanceof CodingStandard)
{
label.append("CodingStandard(" + ((CodingStandard)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("AssociatedDesign(s): ");
Vector<Artifact> allAssociatedDesigns = act.getAllAssociatedDesigns();
for(int j=0; j<allAssociatedDesigns.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedDesigns.elementAt(j);
if(a instanceof Design)
{
label.append("Design(" + ((Design)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("AssociatedUnitTests(s): ");
Vector<Artifact> allAssociatedUnitTestss = act.getAllAssociatedUnitTestss();
for(int j=0; j<allAssociatedUnitTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUnitTestss.elementAt(j);
if(a instanceof UnitTests)
{
label.append("UnitTests(" + ((UnitTests)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("AssociatedUserStories(s): ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof PairProgramRobertJoyceAction)
{
for(int i=0; i<actions.size(); i++)
{
PairProgramRobertJoyceAction act = (PairProgramRobertJoyceAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Robert(s): ");
Vector<Employee> allRoberts = act.getAllRoberts();
for(int j=0; j<allRoberts.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allRoberts.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Joyce(s): ");
Vector<Employee> allJoyces = act.getAllJoyces();
for(int j=0; j<allJoyces.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allJoyces.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Code(s): ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("CodingStandard(s): ");
Vector<Tool> allCodingStandards = act.getAllCodingStandards();
for(int j=0; j<allCodingStandards.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allCodingStandards.elementAt(j);
if(a instanceof CodingStandard)
{
label.append("CodingStandard(" + ((CodingStandard)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("AssociatedDesign(s): ");
Vector<Artifact> allAssociatedDesigns = act.getAllAssociatedDesigns();
for(int j=0; j<allAssociatedDesigns.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedDesigns.elementAt(j);
if(a instanceof Design)
{
label.append("Design(" + ((Design)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("AssociatedUnitTests(s): ");
Vector<Artifact> allAssociatedUnitTestss = act.getAllAssociatedUnitTestss();
for(int j=0; j<allAssociatedUnitTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUnitTestss.elementAt(j);
if(a instanceof UnitTests)
{
label.append("UnitTests(" + ((UnitTests)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("AssociatedUserStories(s): ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof PairProgramTimothyRedaAction)
{
for(int i=0; i<actions.size(); i++)
{
PairProgramTimothyRedaAction act = (PairProgramTimothyRedaAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Timothy(s): ");
Vector<Employee> allTimothys = act.getAllTimothys();
for(int j=0; j<allTimothys.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allTimothys.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Reda(s): ");
Vector<Employee> allRedas = act.getAllRedas();
for(int j=0; j<allRedas.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allRedas.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Code(s): ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("CodingStandard(s): ");
Vector<Tool> allCodingStandards = act.getAllCodingStandards();
for(int j=0; j<allCodingStandards.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allCodingStandards.elementAt(j);
if(a instanceof CodingStandard)
{
label.append("CodingStandard(" + ((CodingStandard)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("AssociatedDesign(s): ");
Vector<Artifact> allAssociatedDesigns = act.getAllAssociatedDesigns();
for(int j=0; j<allAssociatedDesigns.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedDesigns.elementAt(j);
if(a instanceof Design)
{
label.append("Design(" + ((Design)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("AssociatedUnitTests(s): ");
Vector<Artifact> allAssociatedUnitTestss = act.getAllAssociatedUnitTestss();
for(int j=0; j<allAssociatedUnitTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUnitTestss.elementAt(j);
if(a instanceof UnitTests)
{
label.append("UnitTests(" + ((UnitTests)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("AssociatedUserStories(s): ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof PairProgramPegSigfreidoAction)
{
for(int i=0; i<actions.size(); i++)
{
PairProgramPegSigfreidoAction act = (PairProgramPegSigfreidoAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Peg(s): ");
Vector<Employee> allPegs = act.getAllPegs();
for(int j=0; j<allPegs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allPegs.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Sigfreido(s): ");
Vector<Employee> allSigfreidos = act.getAllSigfreidos();
for(int j=0; j<allSigfreidos.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allSigfreidos.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Code(s): ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("CodingStandard(s): ");
Vector<Tool> allCodingStandards = act.getAllCodingStandards();
for(int j=0; j<allCodingStandards.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allCodingStandards.elementAt(j);
if(a instanceof CodingStandard)
{
label.append("CodingStandard(" + ((CodingStandard)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("AssociatedDesign(s): ");
Vector<Artifact> allAssociatedDesigns = act.getAllAssociatedDesigns();
for(int j=0; j<allAssociatedDesigns.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedDesigns.elementAt(j);
if(a instanceof Design)
{
label.append("Design(" + ((Design)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("AssociatedUnitTests(s): ");
Vector<Artifact> allAssociatedUnitTestss = act.getAllAssociatedUnitTestss();
for(int j=0; j<allAssociatedUnitTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUnitTestss.elementAt(j);
if(a instanceof UnitTests)
{
label.append("UnitTests(" + ((UnitTests)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("AssociatedUserStories(s): ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof UnitTestingAndFixingAction)
{
for(int i=0; i<actions.size(); i++)
{
UnitTestingAndFixingAction act = (UnitTestingAndFixingAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Emp(s): ");
Vector<Employee> allEmps = act.getAllEmps();
for(int j=0; j<allEmps.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allEmps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Code(s): ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("UnitTests(s): ");
Vector<Artifact> allUnitTestss = act.getAllUnitTestss();
for(int j=0; j<allUnitTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allUnitTestss.elementAt(j);
if(a instanceof UnitTests)
{
label.append("UnitTests(" + ((UnitTests)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("TestingTool(s): ");
Vector<Tool> allTestingTools = act.getAllTestingTools();
for(int j=0; j<allTestingTools.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allTestingTools.elementAt(j);
if(a instanceof UnitTestingFramework)
{
label.append("UnitTestingFramework(" + ((UnitTestingFramework)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("AcceptanceTests(s): ");
Vector<Artifact> allAcceptanceTestss = act.getAllAcceptanceTestss();
for(int j=0; j<allAcceptanceTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAcceptanceTestss.elementAt(j);
if(a instanceof AcceptanceTests)
{
label.append("AcceptanceTests(" + ((AcceptanceTests)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof RefactorAction)
{
for(int i=0; i<actions.size(); i++)
{
RefactorAction act = (RefactorAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Emp(s): ");
Vector<Employee> allEmps = act.getAllEmps();
for(int j=0; j<allEmps.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allEmps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Code(s): ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("RefactoringTool(s): ");
Vector<Tool> allRefactoringTools = act.getAllRefactoringTools();
for(int j=0; j<allRefactoringTools.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Tool a = allRefactoringTools.elementAt(j);
if(a instanceof RefactoringTool)
{
label.append("RefactoringTool(" + ((RefactoringTool)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof IntegrateRobertJoyceAction)
{
for(int i=0; i<actions.size(); i++)
{
IntegrateRobertJoyceAction act = (IntegrateRobertJoyceAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Robert(s): ");
Vector<Employee> allRoberts = act.getAllRoberts();
for(int j=0; j<allRoberts.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allRoberts.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Joyce(s): ");
Vector<Employee> allJoyces = act.getAllJoyces();
for(int j=0; j<allJoyces.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allJoyces.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Code(s): ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("AssociatedUserStories(s): ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof IntegrateTimothyRedaAction)
{
for(int i=0; i<actions.size(); i++)
{
IntegrateTimothyRedaAction act = (IntegrateTimothyRedaAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Timothy(s): ");
Vector<Employee> allTimothys = act.getAllTimothys();
for(int j=0; j<allTimothys.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allTimothys.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Reda(s): ");
Vector<Employee> allRedas = act.getAllRedas();
for(int j=0; j<allRedas.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allRedas.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Code(s): ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("AssociatedUserStories(s): ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof IntegratePegSigfreidoAction)
{
for(int i=0; i<actions.size(); i++)
{
IntegratePegSigfreidoAction act = (IntegratePegSigfreidoAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Peg(s): ");
Vector<Employee> allPegs = act.getAllPegs();
for(int j=0; j<allPegs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allPegs.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Sigfreido(s): ");
Vector<Employee> allSigfreidos = act.getAllSigfreidos();
for(int j=0; j<allSigfreidos.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allSigfreidos.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Code(s): ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("AssociatedUserStories(s): ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof IntegrateAction)
{
for(int i=0; i<actions.size(); i++)
{
IntegrateAction act = (IntegrateAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Emp(s): ");
Vector<Employee> allEmps = act.getAllEmps();
for(int j=0; j<allEmps.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allEmps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Code(s): ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("AssociatedUserStories(s): ");
Vector<Artifact> allAssociatedUserStoriess = act.getAllAssociatedUserStoriess();
for(int j=0; j<allAssociatedUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAssociatedUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof AcceptanceTestingAction)
{
for(int i=0; i<actions.size(); i++)
{
AcceptanceTestingAction act = (AcceptanceTestingAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Emp(s): ");
Vector<Employee> allEmps = act.getAllEmps();
for(int j=0; j<allEmps.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allEmps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Cust(s): ");
Vector<Customer> allCusts = act.getAllCusts();
for(int j=0; j<allCusts.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Customer a = allCusts.elementAt(j);
if(a instanceof CustomerRepresentative)
{
label.append("CustomerRepresentative(" + ((CustomerRepresentative)a).getName() + ")");
}
}
label.append("; <br>");
label.append("AcceptanceTestCases(s): ");
Vector<Artifact> allAcceptanceTestCasess = act.getAllAcceptanceTestCasess();
for(int j=0; j<allAcceptanceTestCasess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAcceptanceTestCasess.elementAt(j);
if(a instanceof AcceptanceTests)
{
label.append("AcceptanceTests(" + ((AcceptanceTests)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("UserStories(s): ");
Vector<Artifact> allUserStoriess = act.getAllUserStoriess();
for(int j=0; j<allUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Code(s): ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof ReleaseCodeAndEndIterationAction)
{
for(int i=0; i<actions.size(); i++)
{
ReleaseCodeAndEndIterationAction act = (ReleaseCodeAndEndIterationAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Emp(s): ");
Vector<Employee> allEmps = act.getAllEmps();
for(int j=0; j<allEmps.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allEmps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Code(s): ");
Vector<Artifact> allCodes = act.getAllCodes();
for(int j=0; j<allCodes.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allCodes.elementAt(j);
if(a instanceof Code)
{
label.append("Code(" + ((Code)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("AcceptanceTests(s): ");
Vector<Artifact> allAcceptanceTestss = act.getAllAcceptanceTestss();
for(int j=0; j<allAcceptanceTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAcceptanceTestss.elementAt(j);
if(a instanceof AcceptanceTests)
{
label.append("AcceptanceTests(" + ((AcceptanceTests)a).getDescription() + ")");
}
}
label.append("; <br>");
label.append("ReleasePlan(s): ");
Vector<Artifact> allReleasePlans = act.getAllReleasePlans();
for(int j=0; j<allReleasePlans.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allReleasePlans.elementAt(j);
if(a instanceof ReleasePlan)
{
label.append("ReleasePlan(" + ((ReleasePlan)a).getName() + ")");
}
}
label.append("; <br>");
label.append("UserStories(s): ");
Vector<Artifact> allUserStoriess = act.getAllUserStoriess();
for(int j=0; j<allUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
else if(tempAct instanceof DeliverFinalProductToCustomerAction)
{
for(int i=0; i<actions.size(); i++)
{
DeliverFinalProductToCustomerAction act = (DeliverFinalProductToCustomerAction)actions.elementAt(i);
StringBuffer label = new StringBuffer("<html>");
label.append("Emp(s): ");
Vector<Employee> allEmps = act.getAllEmps();
for(int j=0; j<allEmps.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Employee a = allEmps.elementAt(j);
if(a instanceof SoftwareDeveloper)
{
label.append("SoftwareDeveloper(" + ((SoftwareDeveloper)a).getName() + ")");
}
else if(a instanceof Manager)
{
label.append("Manager(" + ((Manager)a).getName() + ")");
}
else if(a instanceof CustomerRep)
{
label.append("CustomerRep(" + ((CustomerRep)a).getName() + ")");
}
}
label.append("; <br>");
label.append("Proj(s): ");
Vector<Project> allProjs = act.getAllProjs();
for(int j=0; j<allProjs.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Project a = allProjs.elementAt(j);
if(a instanceof TheProject)
{
label.append("TheProject(" + ((TheProject)a).getName() + ")");
}
}
label.append("; <br>");
label.append("UserStories(s): ");
Vector<Artifact> allUserStoriess = act.getAllUserStoriess();
for(int j=0; j<allUserStoriess.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allUserStoriess.elementAt(j);
if(a instanceof UserStories)
{
label.append("UserStories(" + ((UserStories)a).getName() + ")");
}
}
label.append("; <br>");
label.append("AcceptanceTests(s): ");
Vector<Artifact> allAcceptanceTestss = act.getAllAcceptanceTestss();
for(int j=0; j<allAcceptanceTestss.size(); j++)
{
if(j > 0)
{
label.append(", ");
}
Artifact a = allAcceptanceTestss.elementAt(j);
if(a instanceof AcceptanceTests)
{
label.append("AcceptanceTests(" + ((AcceptanceTests)a).getDescription() + ")");
}
}
label.append("</HTML>");
JPanel tempPane = new JPanel(new BorderLayout());
JRadioButton tempRadioButton = new JRadioButton(label.toString());
radioButtonGroup.add(tempRadioButton);
tempPane.add(tempRadioButton, BorderLayout.WEST);
radioButtons.add(tempRadioButton);
middlePane.add(tempPane);
}
}
JPanel bottomPane = new JPanel();
okButton = new JButton("OK");
okButton.addActionListener(this);
bottomPane.add(okButton);
cancelButton = new JButton("Cancel");
cancelButton.addActionListener(this);
bottomPane.add(cancelButton);
mainPane.add(topPane);
mainPane.add(middlePane);
mainPane.add(bottomPane);
setContentPane(mainPane);
validate();
pack();
repaint();
toFront();
Point ownerLoc = owner.getLocationOnScreen();
Point thisLoc = new Point();
thisLoc.setLocation((ownerLoc.getX() + (owner.getWidth() / 2) - (this.getWidth() / 2)), (ownerLoc.getY() + (owner.getHeight() / 2) - (this.getHeight() / 2)));
setLocation(thisLoc);
if(radioButtons.size() == 1)
{
onlyOneChoice(owner);
}
else
{
setVisible(true);
}
}
public void actionPerformed(ActionEvent evt)
{
Object source = evt.getSource();
if(source == cancelButton)
{
setVisible(false);
dispose();
}
else if(source == okButton)
{
boolean anySelected = false;
for(int i=0; i<radioButtons.size(); i++)
{
JRadioButton tempRButt = radioButtons.elementAt(i);
if(tempRButt.isSelected())
{
anySelected = true;
break;
}
}
if(!anySelected)
{
JOptionPane.showMessageDialog(null, ("You must choose at least one action"), "Invalid Input", JOptionPane.ERROR_MESSAGE);
}
else
{
for(int i=0; i<radioButtons.size(); i++)
{
JRadioButton rButt  = radioButtons.elementAt(i);
if(rButt.isSelected())
{
simse.adts.actions.Action tempAct = actions.elementAt(i);
Vector<String> participantNames = new Vector<String>();
if(tempAct instanceof CreateUserStoriesAction)
{
Vector allDevelopers = ((CreateUserStoriesAction)tempAct).getAllDevelopers();
if((allDevelopers.contains(emp) == false) && (allDevelopers.size() < 999999))
{
if(menuText.equals("Create user stories"))
{
if((emp instanceof SoftwareDeveloper))
{
participantNames.add("Developer");
}
}
}
Vector allCustomerReps = ((CreateUserStoriesAction)tempAct).getAllCustomerReps();
if((allCustomerReps.contains(emp) == false) && (allCustomerReps.size() < 999999))
{
if(menuText.equals("Create user stories"))
{
if((emp instanceof CustomerRep))
{
participantNames.add("CustomerRep");
}
}
}
}
else if(tempAct instanceof ReleasePlanningMeetingAction)
{
Vector allDevelopers = ((ReleasePlanningMeetingAction)tempAct).getAllDevelopers();
if((allDevelopers.contains(emp) == false) && (allDevelopers.size() < 999999))
{
if(menuText.equals("Hold release planning meeting"))
{
if((emp instanceof SoftwareDeveloper))
{
participantNames.add("Developer");
}
}
}
Vector allManagers = ((ReleasePlanningMeetingAction)tempAct).getAllManagers();
if((allManagers.contains(emp) == false) && (allManagers.size() < 999999))
{
if(menuText.equals("Hold release planning meeting"))
{
if((emp instanceof Manager))
{
participantNames.add("Manager");
}
}
}
Vector allCustomerReps = ((ReleasePlanningMeetingAction)tempAct).getAllCustomerReps();
if((allCustomerReps.contains(emp) == false) && (allCustomerReps.size() < 999999))
{
if(menuText.equals("Hold release planning meeting"))
{
if((emp instanceof CustomerRep))
{
participantNames.add("CustomerRep");
}
}
}
}
else if(tempAct instanceof StartIterationAction)
{
Vector allEmps = ((StartIterationAction)tempAct).getAllEmps();
if((allEmps.contains(emp) == false) && (allEmps.size() < 6))
{
if(menuText.equals("Start iteration"))
{
if((emp instanceof SoftwareDeveloper))
{
participantNames.add("Emp");
}
}
}
Vector allCustomerReps = ((StartIterationAction)tempAct).getAllCustomerReps();
if((allCustomerReps.contains(emp) == false) && (allCustomerReps.size() < 1))
{
if(menuText.equals("Start iteration"))
{
if((emp instanceof CustomerRep))
{
participantNames.add("CustomerRep");
}
}
}
}
else if(tempAct instanceof IterationPlanningMeetingAction)
{
Vector allDevelopers = ((IterationPlanningMeetingAction)tempAct).getAllDevelopers();
if((allDevelopers.contains(emp) == false) && (allDevelopers.size() < 999999))
{
if(menuText.equals("Hold iteration planning meeting"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == false))
{
participantNames.add("Developer");
}
}
}
Vector allCustomerReps = ((IterationPlanningMeetingAction)tempAct).getAllCustomerReps();
if((allCustomerReps.contains(emp) == false) && (allCustomerReps.size() < 1))
{
if(menuText.equals("Hold iteration planning meeting"))
{
if((emp instanceof CustomerRep) && (((CustomerRep)emp).getInIterationPlanningMeeting() == false))
{
participantNames.add("CustomerRep");
}
}
}
}
else if(tempAct instanceof CreateAcceptanceTestsAction)
{
Vector allDevelopers = ((CreateAcceptanceTestsAction)tempAct).getAllDevelopers();
if((allDevelopers.contains(emp) == false) && (allDevelopers.size() < 999999))
{
if(menuText.equals("Create acceptance tests"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true))
{
participantNames.add("Developer");
}
}
}
Vector allCustReps = ((CreateAcceptanceTestsAction)tempAct).getAllCustReps();
if((allCustReps.contains(emp) == false) && (allCustReps.size() < 999999))
{
if(menuText.equals("Create acceptance tests"))
{
if((emp instanceof CustomerRep) && (((CustomerRep)emp).getInIterationPlanningMeeting() == true))
{
participantNames.add("CustRep");
}
}
}
}
else if(tempAct instanceof DesignAction)
{
Vector allDevelopers = ((DesignAction)tempAct).getAllDevelopers();
if((allDevelopers.contains(emp) == false) && (allDevelopers.size() < 999999))
{
if(menuText.equals("Design"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true))
{
participantNames.add("Developer");
}
}
}
}
else if(tempAct instanceof CreateUnitTestsAction)
{
Vector allDevelopers = ((CreateUnitTestsAction)tempAct).getAllDevelopers();
if((allDevelopers.contains(emp) == false) && (allDevelopers.size() < 999999))
{
if(menuText.equals("Create unit tests"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true))
{
participantNames.add("Developer");
}
}
}
}
else if(tempAct instanceof LearnCodingStandardAction)
{
Vector allDevelopers = ((LearnCodingStandardAction)tempAct).getAllDevelopers();
if((allDevelopers.contains(emp) == false) && (allDevelopers.size() < 999999))
{
if(menuText.equals("Learn coding standard"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getKnowsCodingStandard() == false) && (((SoftwareDeveloper)emp).getKnowsCodingStandardNumerical() < 1.0))
{
participantNames.add("Developer");
}
}
}
}
else if(tempAct instanceof ProgramAction)
{
Vector allDevelopers = ((ProgramAction)tempAct).getAllDevelopers();
if((allDevelopers.contains(emp) == false) && (allDevelopers.size() < 999999))
{
if(menuText.equals("Program"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getProgramming() == false))
{
participantNames.add("Developer");
}
}
}
}
else if(tempAct instanceof PairProgramRobertJoyceAction)
{
Vector allRoberts = ((PairProgramRobertJoyceAction)tempAct).getAllRoberts();
if((allRoberts.contains(emp) == false) && (allRoberts.size() < 1))
{
if(menuText.equals("Pair program (Robert and Joyce)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Robert")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getProgramming() == false))
{
participantNames.add("Robert");
}
}
}
Vector allJoyces = ((PairProgramRobertJoyceAction)tempAct).getAllJoyces();
if((allJoyces.contains(emp) == false) && (allJoyces.size() < 1))
{
if(menuText.equals("Pair program (Robert and Joyce)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Joyce")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getProgramming() == false))
{
participantNames.add("Joyce");
}
}
}
}
else if(tempAct instanceof PairProgramTimothyRedaAction)
{
Vector allTimothys = ((PairProgramTimothyRedaAction)tempAct).getAllTimothys();
if((allTimothys.contains(emp) == false) && (allTimothys.size() < 1))
{
if(menuText.equals("Pair Program (Timothy and Reda)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Timothy")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getProgramming() == false))
{
participantNames.add("Timothy");
}
}
}
Vector allRedas = ((PairProgramTimothyRedaAction)tempAct).getAllRedas();
if((allRedas.contains(emp) == false) && (allRedas.size() < 1))
{
if(menuText.equals("Pair Program (Timothy and Reda)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Reda")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getProgramming() == false))
{
participantNames.add("Reda");
}
}
}
}
else if(tempAct instanceof PairProgramPegSigfreidoAction)
{
Vector allPegs = ((PairProgramPegSigfreidoAction)tempAct).getAllPegs();
if((allPegs.contains(emp) == false) && (allPegs.size() < 1))
{
if(menuText.equals("Pair program (Peg and Sigfreido)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Peg")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getProgramming() == false))
{
participantNames.add("Peg");
}
}
}
Vector allSigfreidos = ((PairProgramPegSigfreidoAction)tempAct).getAllSigfreidos();
if((allSigfreidos.contains(emp) == false) && (allSigfreidos.size() < 1))
{
if(menuText.equals("Pair program (Peg and Sigfreido)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Sigfreido")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getProgramming() == false))
{
participantNames.add("Sigfreido");
}
}
}
}
else if(tempAct instanceof UnitTestingAndFixingAction)
{
Vector allEmps = ((UnitTestingAndFixingAction)tempAct).getAllEmps();
if((allEmps.contains(emp) == false) && (allEmps.size() < 999999))
{
if(menuText.equals("Unit test and fix"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true))
{
participantNames.add("Emp");
}
}
}
}
else if(tempAct instanceof RefactorAction)
{
Vector allEmps = ((RefactorAction)tempAct).getAllEmps();
if((allEmps.contains(emp) == false) && (allEmps.size() < 999999))
{
if(menuText.equals("Refactor code"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true))
{
participantNames.add("Emp");
}
}
}
}
else if(tempAct instanceof IntegrateRobertJoyceAction)
{
Vector allRoberts = ((IntegrateRobertJoyceAction)tempAct).getAllRoberts();
if((allRoberts.contains(emp) == false) && (allRoberts.size() < 1))
{
if(menuText.equals("Pair integrate (Robert and Joyce)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Robert")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getIntegrating() == false))
{
participantNames.add("Robert");
}
}
}
Vector allJoyces = ((IntegrateRobertJoyceAction)tempAct).getAllJoyces();
if((allJoyces.contains(emp) == false) && (allJoyces.size() < 1))
{
if(menuText.equals("Pair integrate (Robert and Joyce)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Joyce")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getIntegrating() == false))
{
participantNames.add("Joyce");
}
}
}
}
else if(tempAct instanceof IntegrateTimothyRedaAction)
{
Vector allTimothys = ((IntegrateTimothyRedaAction)tempAct).getAllTimothys();
if((allTimothys.contains(emp) == false) && (allTimothys.size() < 1))
{
if(menuText.equals("Pair integrate (Timothy and Reda)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Timothy")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getIntegrating() == false))
{
participantNames.add("Timothy");
}
}
}
Vector allRedas = ((IntegrateTimothyRedaAction)tempAct).getAllRedas();
if((allRedas.contains(emp) == false) && (allRedas.size() < 1))
{
if(menuText.equals("Pair integrate (Timothy and Reda)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Reda")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getIntegrating() == false))
{
participantNames.add("Reda");
}
}
}
}
else if(tempAct instanceof IntegratePegSigfreidoAction)
{
Vector allPegs = ((IntegratePegSigfreidoAction)tempAct).getAllPegs();
if((allPegs.contains(emp) == false) && (allPegs.size() < 1))
{
if(menuText.equals("Pair integrate (Peg and Sigfreido)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Peg")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getIntegrating() == false))
{
participantNames.add("Peg");
}
}
}
Vector allSigfreidos = ((IntegratePegSigfreidoAction)tempAct).getAllSigfreidos();
if((allSigfreidos.contains(emp) == false) && (allSigfreidos.size() < 1))
{
if(menuText.equals("Pair integrate (Peg and Sigfreido)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Sigfreido")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getIntegrating() == false))
{
participantNames.add("Sigfreido");
}
}
}
}
else if(tempAct instanceof IntegrateAction)
{
Vector allEmps = ((IntegrateAction)tempAct).getAllEmps();
if((allEmps.contains(emp) == false) && (allEmps.size() < 999999))
{
if(menuText.equals("Integrate"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getIntegrating() == false))
{
participantNames.add("Emp");
}
}
}
}
else if(tempAct instanceof AcceptanceTestingAction)
{
Vector allEmps = ((AcceptanceTestingAction)tempAct).getAllEmps();
if((allEmps.contains(emp) == false) && (allEmps.size() < 999999))
{
if(menuText.equals("Acceptance testing"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true))
{
participantNames.add("Emp");
}
}
}
}
else if(tempAct instanceof ReleaseCodeAndEndIterationAction)
{
Vector allEmps = ((ReleaseCodeAndEndIterationAction)tempAct).getAllEmps();
if((allEmps.contains(emp) == false) && (allEmps.size() < 1))
{
if(menuText.equals("Release code and end iteration"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true))
{
participantNames.add("Emp");
}
}
}
}
else if(tempAct instanceof DeliverFinalProductToCustomerAction)
{
Vector allEmps = ((DeliverFinalProductToCustomerAction)tempAct).getAllEmps();
if((allEmps.contains(emp) == false) && (allEmps.size() < 1))
{
if(menuText.equals("Deliver final product to customer"))
{
if((emp instanceof SoftwareDeveloper))
{
participantNames.add("Emp");
}
else if((emp instanceof Manager))
{
participantNames.add("Emp");
}
else if((emp instanceof CustomerRep))
{
participantNames.add("Emp");
}
}
}
}
new ChooseRoleToPlayDialog(gui, participantNames, emp, tempAct, menuText, ruleExec);
setVisible(false);
dispose();
break;
}
}
}
}
}
private void onlyOneChoice(JFrame owner)
{
for(int i=0; i<radioButtons.size(); i++)
{
JRadioButton rButt = radioButtons.elementAt(i);
simse.adts.actions.Action tempAct = actions.elementAt(i);
Vector<String> participantNames = new Vector<String>();
if(tempAct instanceof CreateUserStoriesAction)
{
Vector allDevelopers = ((CreateUserStoriesAction)tempAct).getAllDevelopers();
if((allDevelopers.contains(emp) == false) && (allDevelopers.size() < 999999))
{
if(menuText.equals("Create user stories"))
{
if((emp instanceof SoftwareDeveloper))
{
participantNames.add("Developer");
}
}
}
Vector allCustomerReps = ((CreateUserStoriesAction)tempAct).getAllCustomerReps();
if((allCustomerReps.contains(emp) == false) && (allCustomerReps.size() < 999999))
{
if(menuText.equals("Create user stories"))
{
if((emp instanceof CustomerRep))
{
participantNames.add("CustomerRep");
}
}
}
}
else if(tempAct instanceof ReleasePlanningMeetingAction)
{
Vector allDevelopers = ((ReleasePlanningMeetingAction)tempAct).getAllDevelopers();
if((allDevelopers.contains(emp) == false) && (allDevelopers.size() < 999999))
{
if(menuText.equals("Hold release planning meeting"))
{
if((emp instanceof SoftwareDeveloper))
{
participantNames.add("Developer");
}
}
}
Vector allManagers = ((ReleasePlanningMeetingAction)tempAct).getAllManagers();
if((allManagers.contains(emp) == false) && (allManagers.size() < 999999))
{
if(menuText.equals("Hold release planning meeting"))
{
if((emp instanceof Manager))
{
participantNames.add("Manager");
}
}
}
Vector allCustomerReps = ((ReleasePlanningMeetingAction)tempAct).getAllCustomerReps();
if((allCustomerReps.contains(emp) == false) && (allCustomerReps.size() < 999999))
{
if(menuText.equals("Hold release planning meeting"))
{
if((emp instanceof CustomerRep))
{
participantNames.add("CustomerRep");
}
}
}
}
else if(tempAct instanceof StartIterationAction)
{
Vector allEmps = ((StartIterationAction)tempAct).getAllEmps();
if((allEmps.contains(emp) == false) && (allEmps.size() < 6))
{
if(menuText.equals("Start iteration"))
{
if((emp instanceof SoftwareDeveloper))
{
participantNames.add("Emp");
}
}
}
Vector allCustomerReps = ((StartIterationAction)tempAct).getAllCustomerReps();
if((allCustomerReps.contains(emp) == false) && (allCustomerReps.size() < 1))
{
if(menuText.equals("Start iteration"))
{
if((emp instanceof CustomerRep))
{
participantNames.add("CustomerRep");
}
}
}
}
else if(tempAct instanceof IterationPlanningMeetingAction)
{
Vector allDevelopers = ((IterationPlanningMeetingAction)tempAct).getAllDevelopers();
if((allDevelopers.contains(emp) == false) && (allDevelopers.size() < 999999))
{
if(menuText.equals("Hold iteration planning meeting"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == false))
{
participantNames.add("Developer");
}
}
}
Vector allCustomerReps = ((IterationPlanningMeetingAction)tempAct).getAllCustomerReps();
if((allCustomerReps.contains(emp) == false) && (allCustomerReps.size() < 1))
{
if(menuText.equals("Hold iteration planning meeting"))
{
if((emp instanceof CustomerRep) && (((CustomerRep)emp).getInIterationPlanningMeeting() == false))
{
participantNames.add("CustomerRep");
}
}
}
}
else if(tempAct instanceof CreateAcceptanceTestsAction)
{
Vector allDevelopers = ((CreateAcceptanceTestsAction)tempAct).getAllDevelopers();
if((allDevelopers.contains(emp) == false) && (allDevelopers.size() < 999999))
{
if(menuText.equals("Create acceptance tests"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true))
{
participantNames.add("Developer");
}
}
}
Vector allCustReps = ((CreateAcceptanceTestsAction)tempAct).getAllCustReps();
if((allCustReps.contains(emp) == false) && (allCustReps.size() < 999999))
{
if(menuText.equals("Create acceptance tests"))
{
if((emp instanceof CustomerRep) && (((CustomerRep)emp).getInIterationPlanningMeeting() == true))
{
participantNames.add("CustRep");
}
}
}
}
else if(tempAct instanceof DesignAction)
{
Vector allDevelopers = ((DesignAction)tempAct).getAllDevelopers();
if((allDevelopers.contains(emp) == false) && (allDevelopers.size() < 999999))
{
if(menuText.equals("Design"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true))
{
participantNames.add("Developer");
}
}
}
}
else if(tempAct instanceof CreateUnitTestsAction)
{
Vector allDevelopers = ((CreateUnitTestsAction)tempAct).getAllDevelopers();
if((allDevelopers.contains(emp) == false) && (allDevelopers.size() < 999999))
{
if(menuText.equals("Create unit tests"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true))
{
participantNames.add("Developer");
}
}
}
}
else if(tempAct instanceof LearnCodingStandardAction)
{
Vector allDevelopers = ((LearnCodingStandardAction)tempAct).getAllDevelopers();
if((allDevelopers.contains(emp) == false) && (allDevelopers.size() < 999999))
{
if(menuText.equals("Learn coding standard"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getKnowsCodingStandard() == false) && (((SoftwareDeveloper)emp).getKnowsCodingStandardNumerical() < 1.0))
{
participantNames.add("Developer");
}
}
}
}
else if(tempAct instanceof ProgramAction)
{
Vector allDevelopers = ((ProgramAction)tempAct).getAllDevelopers();
if((allDevelopers.contains(emp) == false) && (allDevelopers.size() < 999999))
{
if(menuText.equals("Program"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getProgramming() == false))
{
participantNames.add("Developer");
}
}
}
}
else if(tempAct instanceof PairProgramRobertJoyceAction)
{
Vector allRoberts = ((PairProgramRobertJoyceAction)tempAct).getAllRoberts();
if((allRoberts.contains(emp) == false) && (allRoberts.size() < 1))
{
if(menuText.equals("Pair program (Robert and Joyce)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Robert")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getProgramming() == false))
{
participantNames.add("Robert");
}
}
}
Vector allJoyces = ((PairProgramRobertJoyceAction)tempAct).getAllJoyces();
if((allJoyces.contains(emp) == false) && (allJoyces.size() < 1))
{
if(menuText.equals("Pair program (Robert and Joyce)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Joyce")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getProgramming() == false))
{
participantNames.add("Joyce");
}
}
}
}
else if(tempAct instanceof PairProgramTimothyRedaAction)
{
Vector allTimothys = ((PairProgramTimothyRedaAction)tempAct).getAllTimothys();
if((allTimothys.contains(emp) == false) && (allTimothys.size() < 1))
{
if(menuText.equals("Pair Program (Timothy and Reda)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Timothy")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getProgramming() == false))
{
participantNames.add("Timothy");
}
}
}
Vector allRedas = ((PairProgramTimothyRedaAction)tempAct).getAllRedas();
if((allRedas.contains(emp) == false) && (allRedas.size() < 1))
{
if(menuText.equals("Pair Program (Timothy and Reda)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Reda")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getProgramming() == false))
{
participantNames.add("Reda");
}
}
}
}
else if(tempAct instanceof PairProgramPegSigfreidoAction)
{
Vector allPegs = ((PairProgramPegSigfreidoAction)tempAct).getAllPegs();
if((allPegs.contains(emp) == false) && (allPegs.size() < 1))
{
if(menuText.equals("Pair program (Peg and Sigfreido)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Peg")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getProgramming() == false))
{
participantNames.add("Peg");
}
}
}
Vector allSigfreidos = ((PairProgramPegSigfreidoAction)tempAct).getAllSigfreidos();
if((allSigfreidos.contains(emp) == false) && (allSigfreidos.size() < 1))
{
if(menuText.equals("Pair program (Peg and Sigfreido)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Sigfreido")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getProgramming() == false))
{
participantNames.add("Sigfreido");
}
}
}
}
else if(tempAct instanceof UnitTestingAndFixingAction)
{
Vector allEmps = ((UnitTestingAndFixingAction)tempAct).getAllEmps();
if((allEmps.contains(emp) == false) && (allEmps.size() < 999999))
{
if(menuText.equals("Unit test and fix"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true))
{
participantNames.add("Emp");
}
}
}
}
else if(tempAct instanceof RefactorAction)
{
Vector allEmps = ((RefactorAction)tempAct).getAllEmps();
if((allEmps.contains(emp) == false) && (allEmps.size() < 999999))
{
if(menuText.equals("Refactor code"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true))
{
participantNames.add("Emp");
}
}
}
}
else if(tempAct instanceof IntegrateRobertJoyceAction)
{
Vector allRoberts = ((IntegrateRobertJoyceAction)tempAct).getAllRoberts();
if((allRoberts.contains(emp) == false) && (allRoberts.size() < 1))
{
if(menuText.equals("Pair integrate (Robert and Joyce)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Robert")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getIntegrating() == false))
{
participantNames.add("Robert");
}
}
}
Vector allJoyces = ((IntegrateRobertJoyceAction)tempAct).getAllJoyces();
if((allJoyces.contains(emp) == false) && (allJoyces.size() < 1))
{
if(menuText.equals("Pair integrate (Robert and Joyce)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Joyce")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getIntegrating() == false))
{
participantNames.add("Joyce");
}
}
}
}
else if(tempAct instanceof IntegrateTimothyRedaAction)
{
Vector allTimothys = ((IntegrateTimothyRedaAction)tempAct).getAllTimothys();
if((allTimothys.contains(emp) == false) && (allTimothys.size() < 1))
{
if(menuText.equals("Pair integrate (Timothy and Reda)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Timothy")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getIntegrating() == false))
{
participantNames.add("Timothy");
}
}
}
Vector allRedas = ((IntegrateTimothyRedaAction)tempAct).getAllRedas();
if((allRedas.contains(emp) == false) && (allRedas.size() < 1))
{
if(menuText.equals("Pair integrate (Timothy and Reda)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Reda")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getIntegrating() == false))
{
participantNames.add("Reda");
}
}
}
}
else if(tempAct instanceof IntegratePegSigfreidoAction)
{
Vector allPegs = ((IntegratePegSigfreidoAction)tempAct).getAllPegs();
if((allPegs.contains(emp) == false) && (allPegs.size() < 1))
{
if(menuText.equals("Pair integrate (Peg and Sigfreido)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Peg")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getIntegrating() == false))
{
participantNames.add("Peg");
}
}
}
Vector allSigfreidos = ((IntegratePegSigfreidoAction)tempAct).getAllSigfreidos();
if((allSigfreidos.contains(emp) == false) && (allSigfreidos.size() < 1))
{
if(menuText.equals("Pair integrate (Peg and Sigfreido)"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getName() .equals("Sigfreido")) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getIntegrating() == false))
{
participantNames.add("Sigfreido");
}
}
}
}
else if(tempAct instanceof IntegrateAction)
{
Vector allEmps = ((IntegrateAction)tempAct).getAllEmps();
if((allEmps.contains(emp) == false) && (allEmps.size() < 999999))
{
if(menuText.equals("Integrate"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true) && (((SoftwareDeveloper)emp).getIntegrating() == false))
{
participantNames.add("Emp");
}
}
}
}
else if(tempAct instanceof AcceptanceTestingAction)
{
Vector allEmps = ((AcceptanceTestingAction)tempAct).getAllEmps();
if((allEmps.contains(emp) == false) && (allEmps.size() < 999999))
{
if(menuText.equals("Acceptance testing"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true))
{
participantNames.add("Emp");
}
}
}
}
else if(tempAct instanceof ReleaseCodeAndEndIterationAction)
{
Vector allEmps = ((ReleaseCodeAndEndIterationAction)tempAct).getAllEmps();
if((allEmps.contains(emp) == false) && (allEmps.size() < 1))
{
if(menuText.equals("Release code and end iteration"))
{
if((emp instanceof SoftwareDeveloper) && (((SoftwareDeveloper)emp).getInIterationPlanningMeeting() == true))
{
participantNames.add("Emp");
}
}
}
}
else if(tempAct instanceof DeliverFinalProductToCustomerAction)
{
Vector allEmps = ((DeliverFinalProductToCustomerAction)tempAct).getAllEmps();
if((allEmps.contains(emp) == false) && (allEmps.size() < 1))
{
if(menuText.equals("Deliver final product to customer"))
{
if((emp instanceof SoftwareDeveloper))
{
participantNames.add("Emp");
}
else if((emp instanceof Manager))
{
participantNames.add("Emp");
}
else if((emp instanceof CustomerRep))
{
participantNames.add("Emp");
}
}
}
}
new ChooseRoleToPlayDialog(owner, participantNames, emp, tempAct, menuText, ruleExec);
dispose();
break;
}
}
}
