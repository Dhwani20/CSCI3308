/* File generated by: simse.codegenerator.logicgenerator.dialoggenerator.ChooseRoleToPlayDialogGenerator */
package simse.logic.dialogs;
import simse.state.*;
import simse.logic.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import java.util.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import javax.swing.border.*;
import javax.swing.event.*;
public class ChooseRoleToPlayDialog extends JDialog implements ActionListener
{
private JFrame gui;
private Employee emp;
private simse.adts.actions.Action action;
private String menuText;
private RuleExecutor ruleExec;
private JComboBox partNameList;
private JButton okButton;
private JButton cancelButton;
public ChooseRoleToPlayDialog(JFrame owner, Vector<String> partNames, Employee e, simse.adts.actions.Action act, String menText, RuleExecutor re)
{
super(owner, true);
gui = owner;
emp = e;
action = act;
menuText = menText;
ruleExec = re;
setTitle("Choose Action Role");
Box mainPane = Box.createVerticalBox();
JPanel topPane = new JPanel();
topPane.add(new JLabel("Choose role to play:"));
JPanel middlePane = new JPanel();
partNameList = new JComboBox(partNames);
middlePane.add(partNameList);
JPanel bottomPane = new JPanel();
okButton = new JButton("OK");
okButton.addActionListener(this);
bottomPane.add(okButton);
cancelButton = new JButton("Cancel");
cancelButton.addActionListener(this);
bottomPane.add(cancelButton);
mainPane.add(topPane);
mainPane.add(middlePane);
mainPane.add(bottomPane);
setContentPane(mainPane);
validate();
pack();
repaint();
toFront();
Point ownerLoc = owner.getLocationOnScreen();
Point thisLoc = new Point();
thisLoc.setLocation((ownerLoc.getX() + (owner.getWidth() / 2) - (this.getWidth() / 2)), (ownerLoc.getY() + (owner.getHeight() / 2) - (this.getHeight() / 2)));
setLocation(thisLoc);
if(partNames.size() == 1)
{
onlyOneRole();
}
else
{
setVisible(true);
}
}
public void actionPerformed(ActionEvent evt)
{
Object source = evt.getSource();
if(source == cancelButton)
{
setVisible(false);
dispose();
}
else if(source == okButton)
{
String partName = (String)(partNameList.getSelectedItem());
if(action instanceof CreateUserStoriesAction)
{
if(menuText.equals("Create user stories"))
{
emp.setOverheadText("We are about to create user stories--short descriptions of what the system should do. Monitor the user stories artifact to track our progress.");
}
if(partName.equals("Developer"))
{
((CreateUserStoriesAction)action).addDeveloper(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleCreateUST", action);
}
else if(partName.equals("CustomerRep"))
{
((CreateUserStoriesAction)action).addCustomerRep(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleCreateUST", action);
}
}
if(action instanceof ReleasePlanningMeetingAction)
{
if(menuText.equals("Hold release planning meeting"))
{
emp.setOverheadText("We are starting the release planning meeting, in which we prioritize user stories and determine how long each one will take to develop. View the release plan artifact to track our progress.");
}
if(partName.equals("Developer"))
{
((ReleasePlanningMeetingAction)action).addDeveloper(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleReleaseMtgT", action);
}
else if(partName.equals("Manager"))
{
((ReleasePlanningMeetingAction)action).addManager(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleReleaseMtgT", action);
}
else if(partName.equals("CustomerRep"))
{
((ReleasePlanningMeetingAction)action).addCustomerRep(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleReleaseMtgT", action);
}
}
if(action instanceof StartIterationAction)
{
if(menuText.equals("Start iteration"))
{
emp.setOverheadText("We have started a new iteration. What would you like us to do now??");
}
if(partName.equals("Emp"))
{
((StartIterationAction)action).addEmp(emp);
}
else if(partName.equals("CustomerRep"))
{
((StartIterationAction)action).addCustomerRep(emp);
}
}
if(action instanceof IterationPlanningMeetingAction)
{
if(menuText.equals("Hold iteration planning meeting"))
{
emp.setOverheadText("We're beginning the iteration planning meeting. Monitor the current iteration plan artifact to view our progress.");
}
if(partName.equals("Developer"))
{
((IterationPlanningMeetingAction)action).addDeveloper(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIterationMtgT", action);
}
else if(partName.equals("CustomerRep"))
{
((IterationPlanningMeetingAction)action).addCustomerRep(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIterationMtgT", action);
}
}
if(action instanceof CreateAcceptanceTestsAction)
{
if(menuText.equals("Create acceptance tests"))
{
emp.setOverheadText("We are creating the acceptance tests now. Monitor the acceptance tests artifact to see our progress.");
}
if(partName.equals("Developer"))
{
((CreateAcceptanceTestsAction)action).addDeveloper(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleCreateAccTestsT", action);
}
else if(partName.equals("CustRep"))
{
((CreateAcceptanceTestsAction)action).addCustRep(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleCreateAccTestsT", action);
}
}
if(action instanceof DesignAction)
{
if(menuText.equals("Design"))
{
emp.setOverheadText("We are designing the user stories for this iteration. Monitor the design artifact to see how we're progressing.");
}
if(partName.equals("Developer"))
{
((DesignAction)action).addDeveloper(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleDesignT", action);
}
}
if(action instanceof CreateUnitTestsAction)
{
if(menuText.equals("Create unit tests"))
{
emp.setOverheadText("We're creating unit tests for each class we designed. You can track our progress by viewing the unit tests artifact.");
}
if(partName.equals("Developer"))
{
((CreateUnitTestsAction)action).addDeveloper(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleCreateUTT", action);
}
}
if(action instanceof LearnCodingStandardAction)
{
if(menuText.equals("Learn coding standard"))
{
emp.setOverheadText("I'm off to familiarize myself with the coding standard now.");
}
if(partName.equals("Developer"))
{
((LearnCodingStandardAction)action).addDeveloper(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleLearnStdT", action);
}
}
if(action instanceof ProgramAction)
{
if(menuText.equals("Program"))
{
emp.setOverheadText("I'm starting to program my parts of the user stories for this iteration now. Monitor the code artifact to track our progress.");
}
if(partName.equals("Developer"))
{
((ProgramAction)action).addDeveloper(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetProgrammingProgramTrig", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleProgramT", action);
}
}
if(action instanceof PairProgramRobertJoyceAction)
{
if(menuText.equals("Pair program (Robert and Joyce)"))
{
emp.setOverheadText("We're pair programming now. Monitor the code artifact to track our progress.");
}
if(partName.equals("Robert"))
{
((PairProgramRobertJoyceAction)action).addRobert(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetProgrammingPairProgramRJTrig", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdlePairProgRJT", action);
}
else if(partName.equals("Joyce"))
{
((PairProgramRobertJoyceAction)action).addJoyce(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetProgrammingPairProgramRJTrig", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdlePairProgRJT", action);
}
}
if(action instanceof PairProgramTimothyRedaAction)
{
if(menuText.equals("Pair Program (Timothy and Reda)"))
{
emp.setOverheadText("We're pair programming now. Monitor the code artifact to track our progress.");
}
if(partName.equals("Timothy"))
{
((PairProgramTimothyRedaAction)action).addTimothy(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetProgrammingPairProgramTRTrig", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdlePairProgTRT", action);
}
else if(partName.equals("Reda"))
{
((PairProgramTimothyRedaAction)action).addReda(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetProgrammingPairProgramTRTrig", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdlePairProgTRT", action);
}
}
if(action instanceof PairProgramPegSigfreidoAction)
{
if(menuText.equals("Pair program (Peg and Sigfreido)"))
{
emp.setOverheadText("We're pair programming now. Monitor the code artifact to track our progress.");
}
if(partName.equals("Peg"))
{
((PairProgramPegSigfreidoAction)action).addPeg(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetProgrammingPairProgramPSTrig", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdlePairProgPST", action);
}
else if(partName.equals("Sigfreido"))
{
((PairProgramPegSigfreidoAction)action).addSigfreido(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetProgrammingPairProgramPSTrig", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdlePairProgPST", action);
}
}
if(action instanceof UnitTestingAndFixingAction)
{
if(menuText.equals("Unit test and fix"))
{
emp.setOverheadText("I'm going to run unit tests now, and fix any bugs I find. You can see how the quality of the code is improving by monitoring the code artifact.");
}
if(partName.equals("Emp"))
{
((UnitTestingAndFixingAction)action).addEmp(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleUTFixT", action);
}
}
if(action instanceof RefactorAction)
{
if(menuText.equals("Refactor code"))
{
emp.setOverheadText("I am refactoring the code now to improve its structure, consistency, and clarity. You can view our progress in this by monitoring the code artifact.");
}
if(partName.equals("Emp"))
{
((RefactorAction)action).addEmp(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleRefactorT", action);
}
}
if(action instanceof IntegrateRobertJoyceAction)
{
if(menuText.equals("Pair integrate (Robert and Joyce)"))
{
emp.setOverheadText("We are integrating our code with the rest of the system now. You can monitor our progress by viewing the code artifact.");
}
if(partName.equals("Robert"))
{
((IntegrateRobertJoyceAction)action).addRobert(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIntegratingTrigRJ", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIntRJT", action);
}
else if(partName.equals("Joyce"))
{
((IntegrateRobertJoyceAction)action).addJoyce(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIntegratingTrigRJ", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIntRJT", action);
}
}
if(action instanceof IntegrateTimothyRedaAction)
{
if(menuText.equals("Pair integrate (Timothy and Reda)"))
{
emp.setOverheadText("We are integrating our code with the rest of the system now. You can monitor our progress by viewing the code artifact.");
}
if(partName.equals("Timothy"))
{
((IntegrateTimothyRedaAction)action).addTimothy(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIntegratingTrigTR", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIntTRT", action);
}
else if(partName.equals("Reda"))
{
((IntegrateTimothyRedaAction)action).addReda(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIntegratingTrigTR", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIntTRT", action);
}
}
if(action instanceof IntegratePegSigfreidoAction)
{
if(menuText.equals("Pair integrate (Peg and Sigfreido)"))
{
emp.setOverheadText("We are integrating our code with the rest of the system now. You can monitor our progress by viewing the code artifact.");
}
if(partName.equals("Peg"))
{
((IntegratePegSigfreidoAction)action).addPeg(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIntegratingTrigPS", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIntPST", action);
}
else if(partName.equals("Sigfreido"))
{
((IntegratePegSigfreidoAction)action).addSigfreido(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIntegratingTrigPS", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIntPST", action);
}
}
if(action instanceof IntegrateAction)
{
if(menuText.equals("Integrate"))
{
emp.setOverheadText("I'm integrating code now.  You can monitor our progress by viewing the code artifact.");
}
if(partName.equals("Emp"))
{
((IntegrateAction)action).addEmp(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIntegratingTrig", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIntegrateT", action);
}
}
if(action instanceof AcceptanceTestingAction)
{
if(menuText.equals("Acceptance testing"))
{
emp.setOverheadText("I'm running the acceptance tests with the customer now, to see if this release meets their expectations. You can monitor the progress of these tests by looking at the acceptance tests artifact.");
}
if(partName.equals("Emp"))
{
((AcceptanceTestingAction)action).addEmp(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleAccTestT", action);
}
}
if(action instanceof ReleaseCodeAndEndIterationAction)
{
if(menuText.equals("Release code and end iteration"))
{
emp.setOverheadText("We have released the current system and ended this iteration. What next???");
}
if(partName.equals("Emp"))
{
((ReleaseCodeAndEndIterationAction)action).addEmp(emp);
}
}
if(action instanceof DeliverFinalProductToCustomerAction)
{
if(partName.equals("Emp"))
{
((DeliverFinalProductToCustomerAction)action).addEmp(emp);
}
}
setVisible(false);
dispose();
}
}
private void onlyOneRole()
{
String partName = (String)(partNameList.getItemAt(0));
if(action instanceof CreateUserStoriesAction)
{
if(menuText.equals("Create user stories"))
{
emp.setOverheadText("We are about to create user stories--short descriptions of what the system should do. Monitor the user stories artifact to track our progress.");
}
if(partName.equals("Developer"))
{
((CreateUserStoriesAction)action).addDeveloper(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleCreateUST", action);
}
else if(partName.equals("CustomerRep"))
{
((CreateUserStoriesAction)action).addCustomerRep(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleCreateUST", action);
}
}
else if(action instanceof ReleasePlanningMeetingAction)
{
if(menuText.equals("Hold release planning meeting"))
{
emp.setOverheadText("We are starting the release planning meeting, in which we prioritize user stories and determine how long each one will take to develop. View the release plan artifact to track our progress.");
}
if(partName.equals("Developer"))
{
((ReleasePlanningMeetingAction)action).addDeveloper(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleReleaseMtgT", action);
}
else if(partName.equals("Manager"))
{
((ReleasePlanningMeetingAction)action).addManager(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleReleaseMtgT", action);
}
else if(partName.equals("CustomerRep"))
{
((ReleasePlanningMeetingAction)action).addCustomerRep(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleReleaseMtgT", action);
}
}
else if(action instanceof StartIterationAction)
{
if(menuText.equals("Start iteration"))
{
emp.setOverheadText("We have started a new iteration. What would you like us to do now??");
}
if(partName.equals("Emp"))
{
((StartIterationAction)action).addEmp(emp);
}
else if(partName.equals("CustomerRep"))
{
((StartIterationAction)action).addCustomerRep(emp);
}
}
else if(action instanceof IterationPlanningMeetingAction)
{
if(menuText.equals("Hold iteration planning meeting"))
{
emp.setOverheadText("We're beginning the iteration planning meeting. Monitor the current iteration plan artifact to view our progress.");
}
if(partName.equals("Developer"))
{
((IterationPlanningMeetingAction)action).addDeveloper(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIterationMtgT", action);
}
else if(partName.equals("CustomerRep"))
{
((IterationPlanningMeetingAction)action).addCustomerRep(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIterationMtgT", action);
}
}
else if(action instanceof CreateAcceptanceTestsAction)
{
if(menuText.equals("Create acceptance tests"))
{
emp.setOverheadText("We are creating the acceptance tests now. Monitor the acceptance tests artifact to see our progress.");
}
if(partName.equals("Developer"))
{
((CreateAcceptanceTestsAction)action).addDeveloper(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleCreateAccTestsT", action);
}
else if(partName.equals("CustRep"))
{
((CreateAcceptanceTestsAction)action).addCustRep(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleCreateAccTestsT", action);
}
}
else if(action instanceof DesignAction)
{
if(menuText.equals("Design"))
{
emp.setOverheadText("We are designing the user stories for this iteration. Monitor the design artifact to see how we're progressing.");
}
if(partName.equals("Developer"))
{
((DesignAction)action).addDeveloper(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleDesignT", action);
}
}
else if(action instanceof CreateUnitTestsAction)
{
if(menuText.equals("Create unit tests"))
{
emp.setOverheadText("We're creating unit tests for each class we designed. You can track our progress by viewing the unit tests artifact.");
}
if(partName.equals("Developer"))
{
((CreateUnitTestsAction)action).addDeveloper(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleCreateUTT", action);
}
}
else if(action instanceof LearnCodingStandardAction)
{
if(menuText.equals("Learn coding standard"))
{
emp.setOverheadText("I'm off to familiarize myself with the coding standard now.");
}
if(partName.equals("Developer"))
{
((LearnCodingStandardAction)action).addDeveloper(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleLearnStdT", action);
}
}
else if(action instanceof ProgramAction)
{
if(menuText.equals("Program"))
{
emp.setOverheadText("I'm starting to program my parts of the user stories for this iteration now. Monitor the code artifact to track our progress.");
}
if(partName.equals("Developer"))
{
((ProgramAction)action).addDeveloper(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetProgrammingProgramTrig", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleProgramT", action);
}
}
else if(action instanceof PairProgramRobertJoyceAction)
{
if(menuText.equals("Pair program (Robert and Joyce)"))
{
emp.setOverheadText("We're pair programming now. Monitor the code artifact to track our progress.");
}
if(partName.equals("Robert"))
{
((PairProgramRobertJoyceAction)action).addRobert(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetProgrammingPairProgramRJTrig", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdlePairProgRJT", action);
}
else if(partName.equals("Joyce"))
{
((PairProgramRobertJoyceAction)action).addJoyce(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetProgrammingPairProgramRJTrig", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdlePairProgRJT", action);
}
}
else if(action instanceof PairProgramTimothyRedaAction)
{
if(menuText.equals("Pair Program (Timothy and Reda)"))
{
emp.setOverheadText("We're pair programming now. Monitor the code artifact to track our progress.");
}
if(partName.equals("Timothy"))
{
((PairProgramTimothyRedaAction)action).addTimothy(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetProgrammingPairProgramTRTrig", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdlePairProgTRT", action);
}
else if(partName.equals("Reda"))
{
((PairProgramTimothyRedaAction)action).addReda(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetProgrammingPairProgramTRTrig", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdlePairProgTRT", action);
}
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
if(menuText.equals("Pair program (Peg and Sigfreido)"))
{
emp.setOverheadText("We're pair programming now. Monitor the code artifact to track our progress.");
}
if(partName.equals("Peg"))
{
((PairProgramPegSigfreidoAction)action).addPeg(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetProgrammingPairProgramPSTrig", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdlePairProgPST", action);
}
else if(partName.equals("Sigfreido"))
{
((PairProgramPegSigfreidoAction)action).addSigfreido(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetProgrammingPairProgramPSTrig", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdlePairProgPST", action);
}
}
else if(action instanceof UnitTestingAndFixingAction)
{
if(menuText.equals("Unit test and fix"))
{
emp.setOverheadText("I'm going to run unit tests now, and fix any bugs I find. You can see how the quality of the code is improving by monitoring the code artifact.");
}
if(partName.equals("Emp"))
{
((UnitTestingAndFixingAction)action).addEmp(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleUTFixT", action);
}
}
else if(action instanceof RefactorAction)
{
if(menuText.equals("Refactor code"))
{
emp.setOverheadText("I am refactoring the code now to improve its structure, consistency, and clarity. You can view our progress in this by monitoring the code artifact.");
}
if(partName.equals("Emp"))
{
((RefactorAction)action).addEmp(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleRefactorT", action);
}
}
else if(action instanceof IntegrateRobertJoyceAction)
{
if(menuText.equals("Pair integrate (Robert and Joyce)"))
{
emp.setOverheadText("We are integrating our code with the rest of the system now. You can monitor our progress by viewing the code artifact.");
}
if(partName.equals("Robert"))
{
((IntegrateRobertJoyceAction)action).addRobert(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIntegratingTrigRJ", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIntRJT", action);
}
else if(partName.equals("Joyce"))
{
((IntegrateRobertJoyceAction)action).addJoyce(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIntegratingTrigRJ", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIntRJT", action);
}
}
else if(action instanceof IntegrateTimothyRedaAction)
{
if(menuText.equals("Pair integrate (Timothy and Reda)"))
{
emp.setOverheadText("We are integrating our code with the rest of the system now. You can monitor our progress by viewing the code artifact.");
}
if(partName.equals("Timothy"))
{
((IntegrateTimothyRedaAction)action).addTimothy(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIntegratingTrigTR", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIntTRT", action);
}
else if(partName.equals("Reda"))
{
((IntegrateTimothyRedaAction)action).addReda(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIntegratingTrigTR", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIntTRT", action);
}
}
else if(action instanceof IntegratePegSigfreidoAction)
{
if(menuText.equals("Pair integrate (Peg and Sigfreido)"))
{
emp.setOverheadText("We are integrating our code with the rest of the system now. You can monitor our progress by viewing the code artifact.");
}
if(partName.equals("Peg"))
{
((IntegratePegSigfreidoAction)action).addPeg(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIntegratingTrigPS", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIntPST", action);
}
else if(partName.equals("Sigfreido"))
{
((IntegratePegSigfreidoAction)action).addSigfreido(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIntegratingTrigPS", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIntPST", action);
}
}
else if(action instanceof IntegrateAction)
{
if(menuText.equals("Integrate"))
{
emp.setOverheadText("I'm integrating code now.  You can monitor our progress by viewing the code artifact.");
}
if(partName.equals("Emp"))
{
((IntegrateAction)action).addEmp(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetIntegratingTrig", action);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleIntegrateT", action);
}
}
else if(action instanceof AcceptanceTestingAction)
{
if(menuText.equals("Acceptance testing"))
{
emp.setOverheadText("I'm running the acceptance tests with the customer now, to see if this release meets their expectations. You can monitor the progress of these tests by looking at the acceptance tests artifact.");
}
if(partName.equals("Emp"))
{
((AcceptanceTestingAction)action).addEmp(emp);
ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "SetNotIdleAccTestT", action);
}
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
if(menuText.equals("Release code and end iteration"))
{
emp.setOverheadText("We have released the current system and ended this iteration. What next???");
}
if(partName.equals("Emp"))
{
((ReleaseCodeAndEndIterationAction)action).addEmp(emp);
}
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
if(partName.equals("Emp"))
{
((DeliverFinalProductToCustomerAction)action).addEmp(emp);
}
}
setVisible(false);
dispose();
}
}
