/* File generated by: simse.codegenerator.logicgenerator.dialoggenerator.NonEmployeeParticipantSelectionDialogGenerator */
package simse.logic.dialogs;
import simse.gui.ImageLoader;
import simse.gui.TabPanel;
import simse.state.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import java.util.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import javax.swing.border.*;
import javax.swing.event.*;
public class NonEmployeeParticipantSelectionDialog extends JDialog implements ActionListener
{
private String partName;
private Vector<SSObject> participants;
private simse.adts.actions.Action action;
private State state;
private int minNumParts;
private int maxNumParts;
private Vector<JCheckBox> checkBoxes;
private JButton checkAllButton;
private JButton clearAllButton;
private JButton okButton;
private JButton cancelButton;
private boolean actionCancelled;
public NonEmployeeParticipantSelectionDialog(JFrame owner, String pName, Vector<SSObject> parts, simse.adts.actions.Action act, State s)
{
super(owner, true);
partName = pName;
participants = parts;
action = act;
state = s;
actionCancelled = false;
setMinAndMax();
if((minNumParts == 0) || (participants.size() > 1))
{
checkBoxes = new Vector<JCheckBox>();
setTitle("Participant Selection");
Box mainPane = Box.createVerticalBox();
JPanel topPane = new JPanel();
String title = "Choose ";
title = title.concat(partName + " participant(s) (");
if(minNumParts == maxNumParts)
{
title = title.concat("exactly " + minNumParts);
}
else
{
title = title.concat("at least " + minNumParts);
if(maxNumParts < 999999) // not boundless
{
title = title.concat(", at most " + maxNumParts);
}
}
title = title.concat("):");
topPane.add(new JLabel(title));
JPanel middlePane = new JPanel(new GridLayout(0, 1));
for(int i=0; i<participants.size(); i++)
{
SSObject tempObj = participants.elementAt(i);
String label = new String();
if(tempObj instanceof SoftwareDeveloper)
{
label = ("SoftwareDeveloper (" + ((SoftwareDeveloper)tempObj).getName() + ")");
}
else if(tempObj instanceof Manager)
{
label = ("Manager (" + ((Manager)tempObj).getName() + ")");
}
else if(tempObj instanceof CustomerRepresentative)
{
label = ("CustomerRepresentative (" + ((CustomerRepresentative)tempObj).getName() + ")");
}
else if(tempObj instanceof UserStories)
{
label = ("UserStories (" + ((UserStories)tempObj).getName() + ")");
}
else if(tempObj instanceof CustomerRep)
{
label = ("CustomerRep (" + ((CustomerRep)tempObj).getName() + ")");
}
else if(tempObj instanceof ReleasePlan)
{
label = ("ReleasePlan (" + ((ReleasePlan)tempObj).getName() + ")");
}
else if(tempObj instanceof TheProject)
{
label = ("TheProject (" + ((TheProject)tempObj).getName() + ")");
}
else if(tempObj instanceof CurrentIterationPlan)
{
label = ("CurrentIterationPlan (" + ((CurrentIterationPlan)tempObj).getName() + ")");
}
else if(tempObj instanceof AcceptanceTests)
{
label = ("AcceptanceTests (" + ((AcceptanceTests)tempObj).getDescription() + ")");
}
else if(tempObj instanceof CRCCards)
{
label = ("CRCCards (" + ((CRCCards)tempObj).getDescription() + ")");
}
else if(tempObj instanceof Design)
{
label = ("Design (" + ((Design)tempObj).getDescription() + ")");
}
else if(tempObj instanceof UnitTestingFramework)
{
label = ("UnitTestingFramework (" + ((UnitTestingFramework)tempObj).getDescription() + ")");
}
else if(tempObj instanceof UnitTests)
{
label = ("UnitTests (" + ((UnitTests)tempObj).getDescription() + ")");
}
else if(tempObj instanceof Code)
{
label = ("Code (" + ((Code)tempObj).getDescription() + ")");
}
else if(tempObj instanceof CodingStandard)
{
label = ("CodingStandard (" + ((CodingStandard)tempObj).getDescription() + ")");
}
else if(tempObj instanceof RefactoringTool)
{
label = ("RefactoringTool (" + ((RefactoringTool)tempObj).getDescription() + ")");
}
JPanel tempPane = new JPanel(new BorderLayout());
JCheckBox tempCheckBox = new JCheckBox(label);
tempPane.add(tempCheckBox, BorderLayout.WEST);
checkBoxes.add(tempCheckBox);
ImageIcon icon =  new ImageIcon(ImageLoader.getImageFromURL(TabPanel.getImage(tempObj)).getScaledInstance(30, 30, Image.SCALE_AREA_AVERAGING));
tempPane.add(new JLabel(icon), BorderLayout.EAST);
middlePane.add(tempPane);
}
JPanel checkPane = new JPanel();
checkAllButton = new JButton("Check All");
checkAllButton.addActionListener(this);
checkPane.add(checkAllButton);
clearAllButton = new JButton("Clear All");
clearAllButton.addActionListener(this);
checkPane.add(clearAllButton);
JPanel bottomPane = new JPanel();
okButton = new JButton("OK");
okButton.addActionListener(this);
bottomPane.add(okButton);
cancelButton = new JButton("Cancel");
cancelButton.addActionListener(this);
bottomPane.add(cancelButton);
mainPane.add(topPane);
mainPane.add(middlePane);
JSeparator separator1 = new JSeparator();
separator1.setMaximumSize(new Dimension(900, 1));
mainPane.add(separator1);
mainPane.add(checkPane);
JSeparator separator2 = new JSeparator();
separator2.setMaximumSize(new Dimension(900, 1));
mainPane.add(separator2);
mainPane.add(bottomPane);
addWindowListener(new ExitListener());
setContentPane(mainPane);
validate();
pack();
repaint();
toFront();
Point ownerLoc = owner.getLocationOnScreen();
Point thisLoc = new Point();
thisLoc.setLocation((ownerLoc.getX() + (owner.getWidth() / 2) - (this.getWidth() / 2)), (ownerLoc.getY() + (owner.getHeight() / 2) - (this.getHeight() / 2)));
setLocation(thisLoc);
setVisible(true);
}
else
{
if(action instanceof CreateUserStoriesAction)
{
if(partName.equals("UserStories"))
{
((CreateUserStoriesAction)action).addUserStories((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((CreateUserStoriesAction)action).addProj((Project)participants.elementAt(0));
}
}
else if(action instanceof ReleasePlanningMeetingAction)
{
if(partName.equals("ReleasePlan"))
{
((ReleasePlanningMeetingAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
else if(partName.equals("UserStories"))
{
((ReleasePlanningMeetingAction)action).addUserStories((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((ReleasePlanningMeetingAction)action).addProj((Project)participants.elementAt(0));
}
}
else if(action instanceof StartIterationAction)
{
if(partName.equals("Proj"))
{
((StartIterationAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((StartIterationAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
else if(partName.equals("UserStories"))
{
((StartIterationAction)action).addUserStories((Artifact)participants.elementAt(0));
}
else if(partName.equals("IterationPlan"))
{
((StartIterationAction)action).addIterationPlan((Artifact)participants.elementAt(0));
}
else if(partName.equals("Design"))
{
((StartIterationAction)action).addDesign((Artifact)participants.elementAt(0));
}
else if(partName.equals("UnitTests"))
{
((StartIterationAction)action).addUnitTests((Artifact)participants.elementAt(0));
}
else if(partName.equals("AcceptanceTests"))
{
((StartIterationAction)action).addAcceptanceTests((Artifact)participants.elementAt(0));
}
else if(partName.equals("Code"))
{
((StartIterationAction)action).addCode((Artifact)participants.elementAt(0));
}
}
else if(action instanceof IterationPlanningMeetingAction)
{
if(partName.equals("IterationPlan"))
{
((IterationPlanningMeetingAction)action).addIterationPlan((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((IterationPlanningMeetingAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((IterationPlanningMeetingAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof ChooseUserStoriesForIterationAction)
{
if(partName.equals("Proj"))
{
((ChooseUserStoriesForIterationAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("IterationPlan"))
{
((ChooseUserStoriesForIterationAction)action).addIterationPlan((Artifact)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((ChooseUserStoriesForIterationAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof CreateProgrammingTasksAction)
{
if(partName.equals("IterationPlan"))
{
((CreateProgrammingTasksAction)action).addIterationPlan((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((CreateProgrammingTasksAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((CreateProgrammingTasksAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof CreateAcceptanceTestsAction)
{
if(partName.equals("Tests"))
{
((CreateAcceptanceTestsAction)action).addTests((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((CreateAcceptanceTestsAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((CreateAcceptanceTestsAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof DesignAction)
{
if(partName.equals("CRCCards"))
{
((DesignAction)action).addCRCCards((Tool)participants.elementAt(0));
}
else if(partName.equals("Design"))
{
((DesignAction)action).addDesign((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((DesignAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("AssociatedUserStories"))
{
((DesignAction)action).addAssociatedUserStories((Artifact)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((DesignAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof CreateUnitTestsAction)
{
if(partName.equals("Tests"))
{
((CreateUnitTestsAction)action).addTests((Artifact)participants.elementAt(0));
}
else if(partName.equals("TestingFramework"))
{
((CreateUnitTestsAction)action).addTestingFramework((Tool)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((CreateUnitTestsAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("AssociatedDesign"))
{
((CreateUnitTestsAction)action).addAssociatedDesign((Artifact)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((CreateUnitTestsAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof LearnCodingStandardAction)
{
if(partName.equals("CodingStandard"))
{
((LearnCodingStandardAction)action).addCodingStandard((Tool)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((LearnCodingStandardAction)action).addProj((Project)participants.elementAt(0));
}
}
else if(action instanceof ProgramAction)
{
if(partName.equals("Code"))
{
((ProgramAction)action).addCode((Artifact)participants.elementAt(0));
}
else if(partName.equals("CodingStandard"))
{
((ProgramAction)action).addCodingStandard((Tool)participants.elementAt(0));
}
else if(partName.equals("AssociatedDesign"))
{
((ProgramAction)action).addAssociatedDesign((Artifact)participants.elementAt(0));
}
else if(partName.equals("AssociatedUnitTests"))
{
((ProgramAction)action).addAssociatedUnitTests((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((ProgramAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("AssociatedUserStories"))
{
((ProgramAction)action).addAssociatedUserStories((Artifact)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((ProgramAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof PairProgramRobertJoyceAction)
{
if(partName.equals("Code"))
{
((PairProgramRobertJoyceAction)action).addCode((Artifact)participants.elementAt(0));
}
else if(partName.equals("CodingStandard"))
{
((PairProgramRobertJoyceAction)action).addCodingStandard((Tool)participants.elementAt(0));
}
else if(partName.equals("AssociatedDesign"))
{
((PairProgramRobertJoyceAction)action).addAssociatedDesign((Artifact)participants.elementAt(0));
}
else if(partName.equals("AssociatedUnitTests"))
{
((PairProgramRobertJoyceAction)action).addAssociatedUnitTests((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((PairProgramRobertJoyceAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("AssociatedUserStories"))
{
((PairProgramRobertJoyceAction)action).addAssociatedUserStories((Artifact)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((PairProgramRobertJoyceAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof PairProgramTimothyRedaAction)
{
if(partName.equals("Code"))
{
((PairProgramTimothyRedaAction)action).addCode((Artifact)participants.elementAt(0));
}
else if(partName.equals("CodingStandard"))
{
((PairProgramTimothyRedaAction)action).addCodingStandard((Tool)participants.elementAt(0));
}
else if(partName.equals("AssociatedDesign"))
{
((PairProgramTimothyRedaAction)action).addAssociatedDesign((Artifact)participants.elementAt(0));
}
else if(partName.equals("AssociatedUnitTests"))
{
((PairProgramTimothyRedaAction)action).addAssociatedUnitTests((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((PairProgramTimothyRedaAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("AssociatedUserStories"))
{
((PairProgramTimothyRedaAction)action).addAssociatedUserStories((Artifact)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((PairProgramTimothyRedaAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
if(partName.equals("Code"))
{
((PairProgramPegSigfreidoAction)action).addCode((Artifact)participants.elementAt(0));
}
else if(partName.equals("CodingStandard"))
{
((PairProgramPegSigfreidoAction)action).addCodingStandard((Tool)participants.elementAt(0));
}
else if(partName.equals("AssociatedDesign"))
{
((PairProgramPegSigfreidoAction)action).addAssociatedDesign((Artifact)participants.elementAt(0));
}
else if(partName.equals("AssociatedUnitTests"))
{
((PairProgramPegSigfreidoAction)action).addAssociatedUnitTests((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((PairProgramPegSigfreidoAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("AssociatedUserStories"))
{
((PairProgramPegSigfreidoAction)action).addAssociatedUserStories((Artifact)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((PairProgramPegSigfreidoAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof UnitTestingAndFixingAction)
{
if(partName.equals("Code"))
{
((UnitTestingAndFixingAction)action).addCode((Artifact)participants.elementAt(0));
}
else if(partName.equals("UnitTests"))
{
((UnitTestingAndFixingAction)action).addUnitTests((Artifact)participants.elementAt(0));
}
else if(partName.equals("TestingTool"))
{
((UnitTestingAndFixingAction)action).addTestingTool((Tool)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((UnitTestingAndFixingAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("AcceptanceTests"))
{
((UnitTestingAndFixingAction)action).addAcceptanceTests((Artifact)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((UnitTestingAndFixingAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof RefactorAction)
{
if(partName.equals("Code"))
{
((RefactorAction)action).addCode((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((RefactorAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("RefactoringTool"))
{
((RefactorAction)action).addRefactoringTool((Tool)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((RefactorAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof IntegrateRobertJoyceAction)
{
if(partName.equals("Code"))
{
((IntegrateRobertJoyceAction)action).addCode((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((IntegrateRobertJoyceAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("AssociatedUserStories"))
{
((IntegrateRobertJoyceAction)action).addAssociatedUserStories((Artifact)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((IntegrateRobertJoyceAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof IntegrateTimothyRedaAction)
{
if(partName.equals("Code"))
{
((IntegrateTimothyRedaAction)action).addCode((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((IntegrateTimothyRedaAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("AssociatedUserStories"))
{
((IntegrateTimothyRedaAction)action).addAssociatedUserStories((Artifact)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((IntegrateTimothyRedaAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof IntegratePegSigfreidoAction)
{
if(partName.equals("Code"))
{
((IntegratePegSigfreidoAction)action).addCode((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((IntegratePegSigfreidoAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("AssociatedUserStories"))
{
((IntegratePegSigfreidoAction)action).addAssociatedUserStories((Artifact)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((IntegratePegSigfreidoAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof IntegrateAction)
{
if(partName.equals("Code"))
{
((IntegrateAction)action).addCode((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((IntegrateAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("AssociatedUserStories"))
{
((IntegrateAction)action).addAssociatedUserStories((Artifact)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((IntegrateAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof AcceptanceTestingAction)
{
if(partName.equals("Cust"))
{
((AcceptanceTestingAction)action).addCust((Customer)participants.elementAt(0));
}
else if(partName.equals("AcceptanceTestCases"))
{
((AcceptanceTestingAction)action).addAcceptanceTestCases((Artifact)participants.elementAt(0));
}
else if(partName.equals("UserStories"))
{
((AcceptanceTestingAction)action).addUserStories((Artifact)participants.elementAt(0));
}
else if(partName.equals("Code"))
{
((AcceptanceTestingAction)action).addCode((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((AcceptanceTestingAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((AcceptanceTestingAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
if(partName.equals("Code"))
{
((ReleaseCodeAndEndIterationAction)action).addCode((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((ReleaseCodeAndEndIterationAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("AcceptanceTests"))
{
((ReleaseCodeAndEndIterationAction)action).addAcceptanceTests((Artifact)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((ReleaseCodeAndEndIterationAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
else if(partName.equals("UserStories"))
{
((ReleaseCodeAndEndIterationAction)action).addUserStories((Artifact)participants.elementAt(0));
}
}
else if(action instanceof UpdateUserStoriesAttributesAction)
{
if(partName.equals("UserStories"))
{
((UpdateUserStoriesAttributesAction)action).addUserStories((Artifact)participants.elementAt(0));
}
else if(partName.equals("Proj"))
{
((UpdateUserStoriesAttributesAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("Code"))
{
((UpdateUserStoriesAttributesAction)action).addCode((Artifact)participants.elementAt(0));
}
}
else if(action instanceof SetEmployeeProductivitiesAction)
{
if(partName.equals("Proj"))
{
((SetEmployeeProductivitiesAction)action).addProj((Project)participants.elementAt(0));
}
}
else if(action instanceof UpdateProjectAttributesAction)
{
if(partName.equals("Proj"))
{
((UpdateProjectAttributesAction)action).addProj((Project)participants.elementAt(0));
}
}
else if(action instanceof RequireReleasePlanDoOverAction)
{
if(partName.equals("Proj"))
{
((RequireReleasePlanDoOverAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("ReleasePlan"))
{
((RequireReleasePlanDoOverAction)action).addReleasePlan((Artifact)participants.elementAt(0));
}
}
else if(action instanceof CustomerComplainsAction)
{
if(partName.equals("Proj"))
{
((CustomerComplainsAction)action).addProj((Project)participants.elementAt(0));
}
}
else if(action instanceof AllEmployeesIdleAction)
{
if(partName.equals("Proj"))
{
((AllEmployeesIdleAction)action).addProj((Project)participants.elementAt(0));
}
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
if(partName.equals("Proj"))
{
((DeliverFinalProductToCustomerAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("UserStories"))
{
((DeliverFinalProductToCustomerAction)action).addUserStories((Artifact)participants.elementAt(0));
}
else if(partName.equals("AcceptanceTests"))
{
((DeliverFinalProductToCustomerAction)action).addAcceptanceTests((Artifact)participants.elementAt(0));
}
}
else if(action instanceof WarnOfImpendingDeadlineAction)
{
if(partName.equals("Proj"))
{
((WarnOfImpendingDeadlineAction)action).addProj((Project)participants.elementAt(0));
}
}
else if(action instanceof GameOverAction)
{
if(partName.equals("Proj"))
{
((GameOverAction)action).addProj((Project)participants.elementAt(0));
}
else if(partName.equals("UserStories"))
{
((GameOverAction)action).addUserStories((Artifact)participants.elementAt(0));
}
}
}
}

public void actionPerformed(ActionEvent evt)
{
Object source = evt.getSource();
if(source == cancelButton)
{
actionCancelled = true;
setVisible(false);
dispose();
}
else if(source == okButton)
{
Vector<JCheckBox> checkedBoxes = new Vector<JCheckBox>();
for(int i=0; i<checkBoxes.size(); i++)
{
JCheckBox tempCBox = checkBoxes.elementAt(i);
if(tempCBox.isSelected())
{
checkedBoxes.add(tempCBox);
}
}
if(checkedBoxes.size() < minNumParts)
{
JOptionPane.showMessageDialog(null, ("You must choose at least " + minNumParts + " participants"), "Invalid Input", JOptionPane.ERROR_MESSAGE);
}
else if(checkedBoxes.size() > maxNumParts)
{
JOptionPane.showMessageDialog(null, ("You may only choose at most " + maxNumParts + " participants"), "Invalid Input", JOptionPane.ERROR_MESSAGE);
}
else
{
for(int i=0; i<checkedBoxes.size(); i++)
{
JCheckBox checkedBox = checkedBoxes.elementAt(i);
String cBoxText = checkedBox.getText();
String objTypeName = cBoxText.substring(0, (cBoxText.indexOf('(') - 1));
String keyValStr = cBoxText.substring((cBoxText.indexOf('(') + 1), cBoxText.lastIndexOf(')'));

addParticipant(objTypeName, keyValStr);
}
setVisible(false);
dispose();
}
}
else if (source == checkAllButton) {
for (int i = 0; i < checkBoxes.size(); i++) {
checkBoxes.elementAt(i).setSelected(true);
}
}
else if (source == clearAllButton) {
for (int i = 0; i < checkBoxes.size(); i++) {
checkBoxes.elementAt(i).setSelected(false);}
}
}

private void addParticipant(String objTypeName, String keyValStr)
{
if(objTypeName.equals("SoftwareDeveloper"))
{
SoftwareDeveloper a = state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().get(keyValStr);
if(a != null)
{
if(action instanceof CreateUserStoriesAction)
{
if(partName.equals("Developer"))
{
((CreateUserStoriesAction)action).addDeveloper((Employee)a);
}
}
else if(action instanceof ReleasePlanningMeetingAction)
{
if(partName.equals("Developer"))
{
((ReleasePlanningMeetingAction)action).addDeveloper((Employee)a);
}
}
else if(action instanceof StartIterationAction)
{
if(partName.equals("Emp"))
{
((StartIterationAction)action).addEmp((Employee)a);
}
}
else if(action instanceof IterationPlanningMeetingAction)
{
if(partName.equals("Developer"))
{
((IterationPlanningMeetingAction)action).addDeveloper((Employee)a);
}
}
else if(action instanceof CreateAcceptanceTestsAction)
{
if(partName.equals("Developer"))
{
((CreateAcceptanceTestsAction)action).addDeveloper((Employee)a);
}
}
else if(action instanceof DesignAction)
{
if(partName.equals("Developer"))
{
((DesignAction)action).addDeveloper((Employee)a);
}
}
else if(action instanceof CreateUnitTestsAction)
{
if(partName.equals("Developer"))
{
((CreateUnitTestsAction)action).addDeveloper((Employee)a);
}
}
else if(action instanceof LearnCodingStandardAction)
{
if(partName.equals("Developer"))
{
((LearnCodingStandardAction)action).addDeveloper((Employee)a);
}
}
else if(action instanceof ProgramAction)
{
if(partName.equals("Developer"))
{
((ProgramAction)action).addDeveloper((Employee)a);
}
}
else if(action instanceof PairProgramRobertJoyceAction)
{
if(partName.equals("Robert"))
{
((PairProgramRobertJoyceAction)action).addRobert((Employee)a);
}
else if(partName.equals("Joyce"))
{
((PairProgramRobertJoyceAction)action).addJoyce((Employee)a);
}
}
else if(action instanceof PairProgramTimothyRedaAction)
{
if(partName.equals("Timothy"))
{
((PairProgramTimothyRedaAction)action).addTimothy((Employee)a);
}
else if(partName.equals("Reda"))
{
((PairProgramTimothyRedaAction)action).addReda((Employee)a);
}
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
if(partName.equals("Peg"))
{
((PairProgramPegSigfreidoAction)action).addPeg((Employee)a);
}
else if(partName.equals("Sigfreido"))
{
((PairProgramPegSigfreidoAction)action).addSigfreido((Employee)a);
}
}
else if(action instanceof UnitTestingAndFixingAction)
{
if(partName.equals("Emp"))
{
((UnitTestingAndFixingAction)action).addEmp((Employee)a);
}
}
else if(action instanceof RefactorAction)
{
if(partName.equals("Emp"))
{
((RefactorAction)action).addEmp((Employee)a);
}
}
else if(action instanceof IntegrateRobertJoyceAction)
{
if(partName.equals("Robert"))
{
((IntegrateRobertJoyceAction)action).addRobert((Employee)a);
}
else if(partName.equals("Joyce"))
{
((IntegrateRobertJoyceAction)action).addJoyce((Employee)a);
}
}
else if(action instanceof IntegrateTimothyRedaAction)
{
if(partName.equals("Timothy"))
{
((IntegrateTimothyRedaAction)action).addTimothy((Employee)a);
}
else if(partName.equals("Reda"))
{
((IntegrateTimothyRedaAction)action).addReda((Employee)a);
}
}
else if(action instanceof IntegratePegSigfreidoAction)
{
if(partName.equals("Peg"))
{
((IntegratePegSigfreidoAction)action).addPeg((Employee)a);
}
else if(partName.equals("Sigfreido"))
{
((IntegratePegSigfreidoAction)action).addSigfreido((Employee)a);
}
}
else if(action instanceof IntegrateAction)
{
if(partName.equals("Emp"))
{
((IntegrateAction)action).addEmp((Employee)a);
}
}
else if(action instanceof AcceptanceTestingAction)
{
if(partName.equals("Emp"))
{
((AcceptanceTestingAction)action).addEmp((Employee)a);
}
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
if(partName.equals("Emp"))
{
((ReleaseCodeAndEndIterationAction)action).addEmp((Employee)a);
}
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
if(partName.equals("Emp"))
{
((DeliverFinalProductToCustomerAction)action).addEmp((Employee)a);
}
}
}
}
else if(objTypeName.equals("Manager"))
{
Manager a = state.getEmployeeStateRepository().getManagerStateRepository().get(keyValStr);
if(a != null)
{
if(action instanceof CreateUserStoriesAction)
{
}
else if(action instanceof ReleasePlanningMeetingAction)
{
if(partName.equals("Manager"))
{
((ReleasePlanningMeetingAction)action).addManager((Employee)a);
}
}
else if(action instanceof StartIterationAction)
{
}
else if(action instanceof IterationPlanningMeetingAction)
{
}
else if(action instanceof CreateAcceptanceTestsAction)
{
}
else if(action instanceof DesignAction)
{
}
else if(action instanceof CreateUnitTestsAction)
{
}
else if(action instanceof LearnCodingStandardAction)
{
}
else if(action instanceof ProgramAction)
{
}
else if(action instanceof PairProgramRobertJoyceAction)
{
}
else if(action instanceof PairProgramTimothyRedaAction)
{
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
}
else if(action instanceof UnitTestingAndFixingAction)
{
}
else if(action instanceof RefactorAction)
{
}
else if(action instanceof IntegrateRobertJoyceAction)
{
}
else if(action instanceof IntegrateTimothyRedaAction)
{
}
else if(action instanceof IntegratePegSigfreidoAction)
{
}
else if(action instanceof IntegrateAction)
{
}
else if(action instanceof AcceptanceTestingAction)
{
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
if(partName.equals("Emp"))
{
((DeliverFinalProductToCustomerAction)action).addEmp((Employee)a);
}
}
}
}
else if(objTypeName.equals("CustomerRepresentative"))
{
CustomerRepresentative a = state.getCustomerStateRepository().getCustomerRepresentativeStateRepository().get(keyValStr);
if(a != null)
{
if(action instanceof CreateUserStoriesAction)
{
}
else if(action instanceof ReleasePlanningMeetingAction)
{
}
else if(action instanceof StartIterationAction)
{
}
else if(action instanceof IterationPlanningMeetingAction)
{
}
else if(action instanceof CreateAcceptanceTestsAction)
{
}
else if(action instanceof DesignAction)
{
}
else if(action instanceof CreateUnitTestsAction)
{
}
else if(action instanceof LearnCodingStandardAction)
{
}
else if(action instanceof ProgramAction)
{
}
else if(action instanceof PairProgramRobertJoyceAction)
{
}
else if(action instanceof PairProgramTimothyRedaAction)
{
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
}
else if(action instanceof UnitTestingAndFixingAction)
{
}
else if(action instanceof RefactorAction)
{
}
else if(action instanceof IntegrateRobertJoyceAction)
{
}
else if(action instanceof IntegrateTimothyRedaAction)
{
}
else if(action instanceof IntegratePegSigfreidoAction)
{
}
else if(action instanceof IntegrateAction)
{
}
else if(action instanceof AcceptanceTestingAction)
{
if(partName.equals("Cust"))
{
((AcceptanceTestingAction)action).addCust((Customer)a);
}
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
}
}
}
else if(objTypeName.equals("UserStories"))
{
UserStories a = state.getArtifactStateRepository().getUserStoriesStateRepository().get(keyValStr);
if(a != null)
{
if(action instanceof CreateUserStoriesAction)
{
if(partName.equals("UserStories"))
{
((CreateUserStoriesAction)action).addUserStories((Artifact)a);
}
}
else if(action instanceof ReleasePlanningMeetingAction)
{
if(partName.equals("UserStories"))
{
((ReleasePlanningMeetingAction)action).addUserStories((Artifact)a);
}
}
else if(action instanceof StartIterationAction)
{
if(partName.equals("UserStories"))
{
((StartIterationAction)action).addUserStories((Artifact)a);
}
}
else if(action instanceof IterationPlanningMeetingAction)
{
}
else if(action instanceof CreateAcceptanceTestsAction)
{
}
else if(action instanceof DesignAction)
{
if(partName.equals("AssociatedUserStories"))
{
((DesignAction)action).addAssociatedUserStories((Artifact)a);
}
}
else if(action instanceof CreateUnitTestsAction)
{
}
else if(action instanceof LearnCodingStandardAction)
{
}
else if(action instanceof ProgramAction)
{
if(partName.equals("AssociatedUserStories"))
{
((ProgramAction)action).addAssociatedUserStories((Artifact)a);
}
}
else if(action instanceof PairProgramRobertJoyceAction)
{
if(partName.equals("AssociatedUserStories"))
{
((PairProgramRobertJoyceAction)action).addAssociatedUserStories((Artifact)a);
}
}
else if(action instanceof PairProgramTimothyRedaAction)
{
if(partName.equals("AssociatedUserStories"))
{
((PairProgramTimothyRedaAction)action).addAssociatedUserStories((Artifact)a);
}
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
if(partName.equals("AssociatedUserStories"))
{
((PairProgramPegSigfreidoAction)action).addAssociatedUserStories((Artifact)a);
}
}
else if(action instanceof UnitTestingAndFixingAction)
{
}
else if(action instanceof RefactorAction)
{
}
else if(action instanceof IntegrateRobertJoyceAction)
{
if(partName.equals("AssociatedUserStories"))
{
((IntegrateRobertJoyceAction)action).addAssociatedUserStories((Artifact)a);
}
}
else if(action instanceof IntegrateTimothyRedaAction)
{
if(partName.equals("AssociatedUserStories"))
{
((IntegrateTimothyRedaAction)action).addAssociatedUserStories((Artifact)a);
}
}
else if(action instanceof IntegratePegSigfreidoAction)
{
if(partName.equals("AssociatedUserStories"))
{
((IntegratePegSigfreidoAction)action).addAssociatedUserStories((Artifact)a);
}
}
else if(action instanceof IntegrateAction)
{
if(partName.equals("AssociatedUserStories"))
{
((IntegrateAction)action).addAssociatedUserStories((Artifact)a);
}
}
else if(action instanceof AcceptanceTestingAction)
{
if(partName.equals("UserStories"))
{
((AcceptanceTestingAction)action).addUserStories((Artifact)a);
}
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
if(partName.equals("UserStories"))
{
((ReleaseCodeAndEndIterationAction)action).addUserStories((Artifact)a);
}
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
if(partName.equals("UserStories"))
{
((DeliverFinalProductToCustomerAction)action).addUserStories((Artifact)a);
}
}
}
}
else if(objTypeName.equals("CustomerRep"))
{
CustomerRep a = state.getEmployeeStateRepository().getCustomerRepStateRepository().get(keyValStr);
if(a != null)
{
if(action instanceof CreateUserStoriesAction)
{
if(partName.equals("CustomerRep"))
{
((CreateUserStoriesAction)action).addCustomerRep((Employee)a);
}
}
else if(action instanceof ReleasePlanningMeetingAction)
{
if(partName.equals("CustomerRep"))
{
((ReleasePlanningMeetingAction)action).addCustomerRep((Employee)a);
}
}
else if(action instanceof StartIterationAction)
{
if(partName.equals("CustomerRep"))
{
((StartIterationAction)action).addCustomerRep((Employee)a);
}
}
else if(action instanceof IterationPlanningMeetingAction)
{
if(partName.equals("CustomerRep"))
{
((IterationPlanningMeetingAction)action).addCustomerRep((Employee)a);
}
}
else if(action instanceof CreateAcceptanceTestsAction)
{
if(partName.equals("CustRep"))
{
((CreateAcceptanceTestsAction)action).addCustRep((Employee)a);
}
}
else if(action instanceof DesignAction)
{
}
else if(action instanceof CreateUnitTestsAction)
{
}
else if(action instanceof LearnCodingStandardAction)
{
}
else if(action instanceof ProgramAction)
{
}
else if(action instanceof PairProgramRobertJoyceAction)
{
}
else if(action instanceof PairProgramTimothyRedaAction)
{
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
}
else if(action instanceof UnitTestingAndFixingAction)
{
}
else if(action instanceof RefactorAction)
{
}
else if(action instanceof IntegrateRobertJoyceAction)
{
}
else if(action instanceof IntegrateTimothyRedaAction)
{
}
else if(action instanceof IntegratePegSigfreidoAction)
{
}
else if(action instanceof IntegrateAction)
{
}
else if(action instanceof AcceptanceTestingAction)
{
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
if(partName.equals("Emp"))
{
((DeliverFinalProductToCustomerAction)action).addEmp((Employee)a);
}
}
}
}
else if(objTypeName.equals("ReleasePlan"))
{
ReleasePlan a = state.getArtifactStateRepository().getReleasePlanStateRepository().get(keyValStr);
if(a != null)
{
if(action instanceof CreateUserStoriesAction)
{
}
else if(action instanceof ReleasePlanningMeetingAction)
{
if(partName.equals("ReleasePlan"))
{
((ReleasePlanningMeetingAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof StartIterationAction)
{
if(partName.equals("ReleasePlan"))
{
((StartIterationAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof IterationPlanningMeetingAction)
{
if(partName.equals("ReleasePlan"))
{
((IterationPlanningMeetingAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof CreateAcceptanceTestsAction)
{
if(partName.equals("ReleasePlan"))
{
((CreateAcceptanceTestsAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof DesignAction)
{
if(partName.equals("ReleasePlan"))
{
((DesignAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof CreateUnitTestsAction)
{
if(partName.equals("ReleasePlan"))
{
((CreateUnitTestsAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof LearnCodingStandardAction)
{
}
else if(action instanceof ProgramAction)
{
if(partName.equals("ReleasePlan"))
{
((ProgramAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof PairProgramRobertJoyceAction)
{
if(partName.equals("ReleasePlan"))
{
((PairProgramRobertJoyceAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof PairProgramTimothyRedaAction)
{
if(partName.equals("ReleasePlan"))
{
((PairProgramTimothyRedaAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
if(partName.equals("ReleasePlan"))
{
((PairProgramPegSigfreidoAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof UnitTestingAndFixingAction)
{
if(partName.equals("ReleasePlan"))
{
((UnitTestingAndFixingAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof RefactorAction)
{
if(partName.equals("ReleasePlan"))
{
((RefactorAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof IntegrateRobertJoyceAction)
{
if(partName.equals("ReleasePlan"))
{
((IntegrateRobertJoyceAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof IntegrateTimothyRedaAction)
{
if(partName.equals("ReleasePlan"))
{
((IntegrateTimothyRedaAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof IntegratePegSigfreidoAction)
{
if(partName.equals("ReleasePlan"))
{
((IntegratePegSigfreidoAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof IntegrateAction)
{
if(partName.equals("ReleasePlan"))
{
((IntegrateAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof AcceptanceTestingAction)
{
if(partName.equals("ReleasePlan"))
{
((AcceptanceTestingAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
if(partName.equals("ReleasePlan"))
{
((ReleaseCodeAndEndIterationAction)action).addReleasePlan((Artifact)a);
}
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
}
}
}
else if(objTypeName.equals("TheProject"))
{
TheProject a = state.getProjectStateRepository().getTheProjectStateRepository().get(keyValStr);
if(a != null)
{
if(action instanceof CreateUserStoriesAction)
{
if(partName.equals("Proj"))
{
((CreateUserStoriesAction)action).addProj((Project)a);
}
}
else if(action instanceof ReleasePlanningMeetingAction)
{
if(partName.equals("Proj"))
{
((ReleasePlanningMeetingAction)action).addProj((Project)a);
}
}
else if(action instanceof StartIterationAction)
{
if(partName.equals("Proj"))
{
((StartIterationAction)action).addProj((Project)a);
}
}
else if(action instanceof IterationPlanningMeetingAction)
{
if(partName.equals("Proj"))
{
((IterationPlanningMeetingAction)action).addProj((Project)a);
}
}
else if(action instanceof CreateAcceptanceTestsAction)
{
if(partName.equals("Proj"))
{
((CreateAcceptanceTestsAction)action).addProj((Project)a);
}
}
else if(action instanceof DesignAction)
{
if(partName.equals("Proj"))
{
((DesignAction)action).addProj((Project)a);
}
}
else if(action instanceof CreateUnitTestsAction)
{
if(partName.equals("Proj"))
{
((CreateUnitTestsAction)action).addProj((Project)a);
}
}
else if(action instanceof LearnCodingStandardAction)
{
if(partName.equals("Proj"))
{
((LearnCodingStandardAction)action).addProj((Project)a);
}
}
else if(action instanceof ProgramAction)
{
if(partName.equals("Proj"))
{
((ProgramAction)action).addProj((Project)a);
}
}
else if(action instanceof PairProgramRobertJoyceAction)
{
if(partName.equals("Proj"))
{
((PairProgramRobertJoyceAction)action).addProj((Project)a);
}
}
else if(action instanceof PairProgramTimothyRedaAction)
{
if(partName.equals("Proj"))
{
((PairProgramTimothyRedaAction)action).addProj((Project)a);
}
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
if(partName.equals("Proj"))
{
((PairProgramPegSigfreidoAction)action).addProj((Project)a);
}
}
else if(action instanceof UnitTestingAndFixingAction)
{
if(partName.equals("Proj"))
{
((UnitTestingAndFixingAction)action).addProj((Project)a);
}
}
else if(action instanceof RefactorAction)
{
if(partName.equals("Proj"))
{
((RefactorAction)action).addProj((Project)a);
}
}
else if(action instanceof IntegrateRobertJoyceAction)
{
if(partName.equals("Proj"))
{
((IntegrateRobertJoyceAction)action).addProj((Project)a);
}
}
else if(action instanceof IntegrateTimothyRedaAction)
{
if(partName.equals("Proj"))
{
((IntegrateTimothyRedaAction)action).addProj((Project)a);
}
}
else if(action instanceof IntegratePegSigfreidoAction)
{
if(partName.equals("Proj"))
{
((IntegratePegSigfreidoAction)action).addProj((Project)a);
}
}
else if(action instanceof IntegrateAction)
{
if(partName.equals("Proj"))
{
((IntegrateAction)action).addProj((Project)a);
}
}
else if(action instanceof AcceptanceTestingAction)
{
if(partName.equals("Proj"))
{
((AcceptanceTestingAction)action).addProj((Project)a);
}
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
if(partName.equals("Proj"))
{
((ReleaseCodeAndEndIterationAction)action).addProj((Project)a);
}
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
if(partName.equals("Proj"))
{
((DeliverFinalProductToCustomerAction)action).addProj((Project)a);
}
}
}
}
else if(objTypeName.equals("CurrentIterationPlan"))
{
CurrentIterationPlan a = state.getArtifactStateRepository().getCurrentIterationPlanStateRepository().get(keyValStr);
if(a != null)
{
if(action instanceof CreateUserStoriesAction)
{
}
else if(action instanceof ReleasePlanningMeetingAction)
{
}
else if(action instanceof StartIterationAction)
{
if(partName.equals("IterationPlan"))
{
((StartIterationAction)action).addIterationPlan((Artifact)a);
}
}
else if(action instanceof IterationPlanningMeetingAction)
{
if(partName.equals("IterationPlan"))
{
((IterationPlanningMeetingAction)action).addIterationPlan((Artifact)a);
}
}
else if(action instanceof CreateAcceptanceTestsAction)
{
}
else if(action instanceof DesignAction)
{
}
else if(action instanceof CreateUnitTestsAction)
{
}
else if(action instanceof LearnCodingStandardAction)
{
}
else if(action instanceof ProgramAction)
{
}
else if(action instanceof PairProgramRobertJoyceAction)
{
}
else if(action instanceof PairProgramTimothyRedaAction)
{
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
}
else if(action instanceof UnitTestingAndFixingAction)
{
}
else if(action instanceof RefactorAction)
{
}
else if(action instanceof IntegrateRobertJoyceAction)
{
}
else if(action instanceof IntegrateTimothyRedaAction)
{
}
else if(action instanceof IntegratePegSigfreidoAction)
{
}
else if(action instanceof IntegrateAction)
{
}
else if(action instanceof AcceptanceTestingAction)
{
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
}
}
}
else if(objTypeName.equals("AcceptanceTests"))
{
AcceptanceTests a = state.getArtifactStateRepository().getAcceptanceTestsStateRepository().get(keyValStr);
if(a != null)
{
if(action instanceof CreateUserStoriesAction)
{
}
else if(action instanceof ReleasePlanningMeetingAction)
{
}
else if(action instanceof StartIterationAction)
{
if(partName.equals("AcceptanceTests"))
{
((StartIterationAction)action).addAcceptanceTests((Artifact)a);
}
}
else if(action instanceof IterationPlanningMeetingAction)
{
}
else if(action instanceof CreateAcceptanceTestsAction)
{
if(partName.equals("Tests"))
{
((CreateAcceptanceTestsAction)action).addTests((Artifact)a);
}
}
else if(action instanceof DesignAction)
{
}
else if(action instanceof CreateUnitTestsAction)
{
}
else if(action instanceof LearnCodingStandardAction)
{
}
else if(action instanceof ProgramAction)
{
}
else if(action instanceof PairProgramRobertJoyceAction)
{
}
else if(action instanceof PairProgramTimothyRedaAction)
{
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
}
else if(action instanceof UnitTestingAndFixingAction)
{
if(partName.equals("AcceptanceTests"))
{
((UnitTestingAndFixingAction)action).addAcceptanceTests((Artifact)a);
}
}
else if(action instanceof RefactorAction)
{
}
else if(action instanceof IntegrateRobertJoyceAction)
{
}
else if(action instanceof IntegrateTimothyRedaAction)
{
}
else if(action instanceof IntegratePegSigfreidoAction)
{
}
else if(action instanceof IntegrateAction)
{
}
else if(action instanceof AcceptanceTestingAction)
{
if(partName.equals("AcceptanceTestCases"))
{
((AcceptanceTestingAction)action).addAcceptanceTestCases((Artifact)a);
}
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
if(partName.equals("AcceptanceTests"))
{
((ReleaseCodeAndEndIterationAction)action).addAcceptanceTests((Artifact)a);
}
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
if(partName.equals("AcceptanceTests"))
{
((DeliverFinalProductToCustomerAction)action).addAcceptanceTests((Artifact)a);
}
}
}
}
else if(objTypeName.equals("CRCCards"))
{
CRCCards a = state.getToolStateRepository().getCRCCardsStateRepository().get(keyValStr);
if(a != null)
{
if(action instanceof CreateUserStoriesAction)
{
}
else if(action instanceof ReleasePlanningMeetingAction)
{
}
else if(action instanceof StartIterationAction)
{
}
else if(action instanceof IterationPlanningMeetingAction)
{
}
else if(action instanceof CreateAcceptanceTestsAction)
{
}
else if(action instanceof DesignAction)
{
if(partName.equals("CRCCards"))
{
((DesignAction)action).addCRCCards((Tool)a);
}
}
else if(action instanceof CreateUnitTestsAction)
{
}
else if(action instanceof LearnCodingStandardAction)
{
}
else if(action instanceof ProgramAction)
{
}
else if(action instanceof PairProgramRobertJoyceAction)
{
}
else if(action instanceof PairProgramTimothyRedaAction)
{
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
}
else if(action instanceof UnitTestingAndFixingAction)
{
}
else if(action instanceof RefactorAction)
{
}
else if(action instanceof IntegrateRobertJoyceAction)
{
}
else if(action instanceof IntegrateTimothyRedaAction)
{
}
else if(action instanceof IntegratePegSigfreidoAction)
{
}
else if(action instanceof IntegrateAction)
{
}
else if(action instanceof AcceptanceTestingAction)
{
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
}
}
}
else if(objTypeName.equals("Design"))
{
Design a = state.getArtifactStateRepository().getDesignStateRepository().get(keyValStr);
if(a != null)
{
if(action instanceof CreateUserStoriesAction)
{
}
else if(action instanceof ReleasePlanningMeetingAction)
{
}
else if(action instanceof StartIterationAction)
{
if(partName.equals("Design"))
{
((StartIterationAction)action).addDesign((Artifact)a);
}
}
else if(action instanceof IterationPlanningMeetingAction)
{
}
else if(action instanceof CreateAcceptanceTestsAction)
{
}
else if(action instanceof DesignAction)
{
if(partName.equals("Design"))
{
((DesignAction)action).addDesign((Artifact)a);
}
}
else if(action instanceof CreateUnitTestsAction)
{
if(partName.equals("AssociatedDesign"))
{
((CreateUnitTestsAction)action).addAssociatedDesign((Artifact)a);
}
}
else if(action instanceof LearnCodingStandardAction)
{
}
else if(action instanceof ProgramAction)
{
if(partName.equals("AssociatedDesign"))
{
((ProgramAction)action).addAssociatedDesign((Artifact)a);
}
}
else if(action instanceof PairProgramRobertJoyceAction)
{
if(partName.equals("AssociatedDesign"))
{
((PairProgramRobertJoyceAction)action).addAssociatedDesign((Artifact)a);
}
}
else if(action instanceof PairProgramTimothyRedaAction)
{
if(partName.equals("AssociatedDesign"))
{
((PairProgramTimothyRedaAction)action).addAssociatedDesign((Artifact)a);
}
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
if(partName.equals("AssociatedDesign"))
{
((PairProgramPegSigfreidoAction)action).addAssociatedDesign((Artifact)a);
}
}
else if(action instanceof UnitTestingAndFixingAction)
{
}
else if(action instanceof RefactorAction)
{
}
else if(action instanceof IntegrateRobertJoyceAction)
{
}
else if(action instanceof IntegrateTimothyRedaAction)
{
}
else if(action instanceof IntegratePegSigfreidoAction)
{
}
else if(action instanceof IntegrateAction)
{
}
else if(action instanceof AcceptanceTestingAction)
{
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
}
}
}
else if(objTypeName.equals("UnitTestingFramework"))
{
UnitTestingFramework a = state.getToolStateRepository().getUnitTestingFrameworkStateRepository().get(keyValStr);
if(a != null)
{
if(action instanceof CreateUserStoriesAction)
{
}
else if(action instanceof ReleasePlanningMeetingAction)
{
}
else if(action instanceof StartIterationAction)
{
}
else if(action instanceof IterationPlanningMeetingAction)
{
}
else if(action instanceof CreateAcceptanceTestsAction)
{
}
else if(action instanceof DesignAction)
{
}
else if(action instanceof CreateUnitTestsAction)
{
if(partName.equals("TestingFramework"))
{
((CreateUnitTestsAction)action).addTestingFramework((Tool)a);
}
}
else if(action instanceof LearnCodingStandardAction)
{
}
else if(action instanceof ProgramAction)
{
}
else if(action instanceof PairProgramRobertJoyceAction)
{
}
else if(action instanceof PairProgramTimothyRedaAction)
{
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
}
else if(action instanceof UnitTestingAndFixingAction)
{
if(partName.equals("TestingTool"))
{
((UnitTestingAndFixingAction)action).addTestingTool((Tool)a);
}
}
else if(action instanceof RefactorAction)
{
}
else if(action instanceof IntegrateRobertJoyceAction)
{
}
else if(action instanceof IntegrateTimothyRedaAction)
{
}
else if(action instanceof IntegratePegSigfreidoAction)
{
}
else if(action instanceof IntegrateAction)
{
}
else if(action instanceof AcceptanceTestingAction)
{
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
}
}
}
else if(objTypeName.equals("UnitTests"))
{
UnitTests a = state.getArtifactStateRepository().getUnitTestsStateRepository().get(keyValStr);
if(a != null)
{
if(action instanceof CreateUserStoriesAction)
{
}
else if(action instanceof ReleasePlanningMeetingAction)
{
}
else if(action instanceof StartIterationAction)
{
if(partName.equals("UnitTests"))
{
((StartIterationAction)action).addUnitTests((Artifact)a);
}
}
else if(action instanceof IterationPlanningMeetingAction)
{
}
else if(action instanceof CreateAcceptanceTestsAction)
{
}
else if(action instanceof DesignAction)
{
}
else if(action instanceof CreateUnitTestsAction)
{
if(partName.equals("Tests"))
{
((CreateUnitTestsAction)action).addTests((Artifact)a);
}
}
else if(action instanceof LearnCodingStandardAction)
{
}
else if(action instanceof ProgramAction)
{
if(partName.equals("AssociatedUnitTests"))
{
((ProgramAction)action).addAssociatedUnitTests((Artifact)a);
}
}
else if(action instanceof PairProgramRobertJoyceAction)
{
if(partName.equals("AssociatedUnitTests"))
{
((PairProgramRobertJoyceAction)action).addAssociatedUnitTests((Artifact)a);
}
}
else if(action instanceof PairProgramTimothyRedaAction)
{
if(partName.equals("AssociatedUnitTests"))
{
((PairProgramTimothyRedaAction)action).addAssociatedUnitTests((Artifact)a);
}
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
if(partName.equals("AssociatedUnitTests"))
{
((PairProgramPegSigfreidoAction)action).addAssociatedUnitTests((Artifact)a);
}
}
else if(action instanceof UnitTestingAndFixingAction)
{
if(partName.equals("UnitTests"))
{
((UnitTestingAndFixingAction)action).addUnitTests((Artifact)a);
}
}
else if(action instanceof RefactorAction)
{
}
else if(action instanceof IntegrateRobertJoyceAction)
{
}
else if(action instanceof IntegrateTimothyRedaAction)
{
}
else if(action instanceof IntegratePegSigfreidoAction)
{
}
else if(action instanceof IntegrateAction)
{
}
else if(action instanceof AcceptanceTestingAction)
{
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
}
}
}
else if(objTypeName.equals("Code"))
{
Code a = state.getArtifactStateRepository().getCodeStateRepository().get(keyValStr);
if(a != null)
{
if(action instanceof CreateUserStoriesAction)
{
}
else if(action instanceof ReleasePlanningMeetingAction)
{
}
else if(action instanceof StartIterationAction)
{
if(partName.equals("Code"))
{
((StartIterationAction)action).addCode((Artifact)a);
}
}
else if(action instanceof IterationPlanningMeetingAction)
{
}
else if(action instanceof CreateAcceptanceTestsAction)
{
}
else if(action instanceof DesignAction)
{
}
else if(action instanceof CreateUnitTestsAction)
{
}
else if(action instanceof LearnCodingStandardAction)
{
}
else if(action instanceof ProgramAction)
{
if(partName.equals("Code"))
{
((ProgramAction)action).addCode((Artifact)a);
}
}
else if(action instanceof PairProgramRobertJoyceAction)
{
if(partName.equals("Code"))
{
((PairProgramRobertJoyceAction)action).addCode((Artifact)a);
}
}
else if(action instanceof PairProgramTimothyRedaAction)
{
if(partName.equals("Code"))
{
((PairProgramTimothyRedaAction)action).addCode((Artifact)a);
}
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
if(partName.equals("Code"))
{
((PairProgramPegSigfreidoAction)action).addCode((Artifact)a);
}
}
else if(action instanceof UnitTestingAndFixingAction)
{
if(partName.equals("Code"))
{
((UnitTestingAndFixingAction)action).addCode((Artifact)a);
}
}
else if(action instanceof RefactorAction)
{
if(partName.equals("Code"))
{
((RefactorAction)action).addCode((Artifact)a);
}
}
else if(action instanceof IntegrateRobertJoyceAction)
{
if(partName.equals("Code"))
{
((IntegrateRobertJoyceAction)action).addCode((Artifact)a);
}
}
else if(action instanceof IntegrateTimothyRedaAction)
{
if(partName.equals("Code"))
{
((IntegrateTimothyRedaAction)action).addCode((Artifact)a);
}
}
else if(action instanceof IntegratePegSigfreidoAction)
{
if(partName.equals("Code"))
{
((IntegratePegSigfreidoAction)action).addCode((Artifact)a);
}
}
else if(action instanceof IntegrateAction)
{
if(partName.equals("Code"))
{
((IntegrateAction)action).addCode((Artifact)a);
}
}
else if(action instanceof AcceptanceTestingAction)
{
if(partName.equals("Code"))
{
((AcceptanceTestingAction)action).addCode((Artifact)a);
}
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
if(partName.equals("Code"))
{
((ReleaseCodeAndEndIterationAction)action).addCode((Artifact)a);
}
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
}
}
}
else if(objTypeName.equals("CodingStandard"))
{
CodingStandard a = state.getToolStateRepository().getCodingStandardStateRepository().get(keyValStr);
if(a != null)
{
if(action instanceof CreateUserStoriesAction)
{
}
else if(action instanceof ReleasePlanningMeetingAction)
{
}
else if(action instanceof StartIterationAction)
{
}
else if(action instanceof IterationPlanningMeetingAction)
{
}
else if(action instanceof CreateAcceptanceTestsAction)
{
}
else if(action instanceof DesignAction)
{
}
else if(action instanceof CreateUnitTestsAction)
{
}
else if(action instanceof LearnCodingStandardAction)
{
if(partName.equals("CodingStandard"))
{
((LearnCodingStandardAction)action).addCodingStandard((Tool)a);
}
}
else if(action instanceof ProgramAction)
{
if(partName.equals("CodingStandard"))
{
((ProgramAction)action).addCodingStandard((Tool)a);
}
}
else if(action instanceof PairProgramRobertJoyceAction)
{
if(partName.equals("CodingStandard"))
{
((PairProgramRobertJoyceAction)action).addCodingStandard((Tool)a);
}
}
else if(action instanceof PairProgramTimothyRedaAction)
{
if(partName.equals("CodingStandard"))
{
((PairProgramTimothyRedaAction)action).addCodingStandard((Tool)a);
}
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
if(partName.equals("CodingStandard"))
{
((PairProgramPegSigfreidoAction)action).addCodingStandard((Tool)a);
}
}
else if(action instanceof UnitTestingAndFixingAction)
{
}
else if(action instanceof RefactorAction)
{
}
else if(action instanceof IntegrateRobertJoyceAction)
{
}
else if(action instanceof IntegrateTimothyRedaAction)
{
}
else if(action instanceof IntegratePegSigfreidoAction)
{
}
else if(action instanceof IntegrateAction)
{
}
else if(action instanceof AcceptanceTestingAction)
{
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
}
}
}
else if(objTypeName.equals("RefactoringTool"))
{
RefactoringTool a = state.getToolStateRepository().getRefactoringToolStateRepository().get(keyValStr);
if(a != null)
{
if(action instanceof CreateUserStoriesAction)
{
}
else if(action instanceof ReleasePlanningMeetingAction)
{
}
else if(action instanceof StartIterationAction)
{
}
else if(action instanceof IterationPlanningMeetingAction)
{
}
else if(action instanceof CreateAcceptanceTestsAction)
{
}
else if(action instanceof DesignAction)
{
}
else if(action instanceof CreateUnitTestsAction)
{
}
else if(action instanceof LearnCodingStandardAction)
{
}
else if(action instanceof ProgramAction)
{
}
else if(action instanceof PairProgramRobertJoyceAction)
{
}
else if(action instanceof PairProgramTimothyRedaAction)
{
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
}
else if(action instanceof UnitTestingAndFixingAction)
{
}
else if(action instanceof RefactorAction)
{
if(partName.equals("RefactoringTool"))
{
((RefactorAction)action).addRefactoringTool((Tool)a);
}
}
else if(action instanceof IntegrateRobertJoyceAction)
{
}
else if(action instanceof IntegrateTimothyRedaAction)
{
}
else if(action instanceof IntegratePegSigfreidoAction)
{
}
else if(action instanceof IntegrateAction)
{
}
else if(action instanceof AcceptanceTestingAction)
{
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
}
}
}
}

private void setMinAndMax()
{
if(action instanceof CreateUserStoriesAction)
{
if(partName.equals("Developer"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("CustomerRep"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("UserStories"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof ReleasePlanningMeetingAction)
{
if(partName.equals("Developer"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("Manager"))
{
minNumParts = 0;
maxNumParts = 999999;
}
else if(partName.equals("CustomerRep"))
{
minNumParts = 0;
maxNumParts = 999999;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("UserStories"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof StartIterationAction)
{
if(partName.equals("Emp"))
{
minNumParts = 6;
maxNumParts = 6;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("UserStories"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("IterationPlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Design"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("UnitTests"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AcceptanceTests"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Code"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("CustomerRep"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof IterationPlanningMeetingAction)
{
if(partName.equals("Developer"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("CustomerRep"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("IterationPlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof ChooseUserStoriesForIterationAction)
{
if(partName.equals("Emp"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("IterationPlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof CreateProgrammingTasksAction)
{
if(partName.equals("Emp"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("IterationPlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof CreateAcceptanceTestsAction)
{
if(partName.equals("Developer"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("CustRep"))
{
minNumParts = 0;
maxNumParts = 999999;
}
else if(partName.equals("Tests"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof DesignAction)
{
if(partName.equals("Developer"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("CRCCards"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("Design"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedUserStories"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof CreateUnitTestsAction)
{
if(partName.equals("Developer"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("Tests"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("TestingFramework"))
{
minNumParts = 0;
maxNumParts = 999999;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedDesign"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof LearnCodingStandardAction)
{
if(partName.equals("Developer"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("CodingStandard"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof ProgramAction)
{
if(partName.equals("Developer"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("Code"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("CodingStandard"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedDesign"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedUnitTests"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedUserStories"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof PairProgramRobertJoyceAction)
{
if(partName.equals("Robert"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Joyce"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Code"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("CodingStandard"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedDesign"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedUnitTests"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedUserStories"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof PairProgramTimothyRedaAction)
{
if(partName.equals("Timothy"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Reda"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Code"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("CodingStandard"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedDesign"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedUnitTests"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedUserStories"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof PairProgramPegSigfreidoAction)
{
if(partName.equals("Peg"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Sigfreido"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Code"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("CodingStandard"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedDesign"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedUnitTests"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedUserStories"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof UnitTestingAndFixingAction)
{
if(partName.equals("Emp"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("Code"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("UnitTests"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("TestingTool"))
{
minNumParts = 0;
maxNumParts = 999999;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AcceptanceTests"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof RefactorAction)
{
if(partName.equals("Emp"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("Code"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("RefactoringTool"))
{
minNumParts = 0;
maxNumParts = 999999;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof IntegrateRobertJoyceAction)
{
if(partName.equals("Robert"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Joyce"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Code"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedUserStories"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof IntegrateTimothyRedaAction)
{
if(partName.equals("Timothy"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Reda"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Code"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedUserStories"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof IntegratePegSigfreidoAction)
{
if(partName.equals("Peg"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Sigfreido"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Code"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedUserStories"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof IntegrateAction)
{
if(partName.equals("Emp"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("Code"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AssociatedUserStories"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof AcceptanceTestingAction)
{
if(partName.equals("Emp"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("Cust"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AcceptanceTestCases"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("UserStories"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Code"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof ReleaseCodeAndEndIterationAction)
{
if(partName.equals("Emp"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Code"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AcceptanceTests"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("UserStories"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof UpdateUserStoriesAttributesAction)
{
if(partName.equals("UserStories"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Code"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof SetEmployeeProductivitiesAction)
{
if(partName.equals("Emp"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof UpdateProjectAttributesAction)
{
if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Emp"))
{
minNumParts = 1;
maxNumParts = 999999;
}
}
else if(action instanceof RequireReleasePlanDoOverAction)
{
if(partName.equals("Emp"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("ReleasePlan"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("CustRep"))
{
minNumParts = 1;
maxNumParts = 999999;
}
}
else if(action instanceof CustomerComplainsAction)
{
if(partName.equals("CustRep"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof AllEmployeesIdleAction)
{
if(partName.equals("Emp"))
{
minNumParts = 6;
maxNumParts = 6;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof DeliverFinalProductToCustomerAction)
{
if(partName.equals("Emp"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("UserStories"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("AcceptanceTests"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof WarnOfImpendingDeadlineAction)
{
if(partName.equals("Emp"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
else if(action instanceof GameOverAction)
{
if(partName.equals("Emp"))
{
minNumParts = 1;
maxNumParts = 999999;
}
else if(partName.equals("Proj"))
{
minNumParts = 1;
maxNumParts = 1;
}
else if(partName.equals("UserStories"))
{
minNumParts = 1;
maxNumParts = 1;
}
}
}
public boolean actionCancelled()
{
return actionCancelled;
}

public class ExitListener extends WindowAdapter {
public void windowClosing(WindowEvent event) {
actionCancelled = true;
}
}
}
