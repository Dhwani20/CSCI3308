/* File generated by: simse.codegenerator.stategenerator.RepositoryGenerator */
package simse.state;
import simse.adts.objects.*;
import java.util.*;
public class CodingStandardStateRepository implements Cloneable
{
private Vector <CodingStandard> codingstandards;

public CodingStandardStateRepository()
{
codingstandards = new Vector<CodingStandard>();
}

public Object clone() {
try {
CodingStandardStateRepository cl = (CodingStandardStateRepository) super.clone();
Vector<CodingStandard> clonedcodingstandards = new Vector<CodingStandard>();
for (int i = 0; i < codingstandards.size(); i++) {
clonedcodingstandards.addElement((CodingStandard)(codingstandards.elementAt(i).clone()));
}
cl.codingstandards = clonedcodingstandards;
return cl;
} catch (CloneNotSupportedException c) {
System.out.println(c.getMessage());
}
return null;
}

public void add(CodingStandard a)
{
boolean add = true;
for(int i=0; i<codingstandards.size(); i++)
{
CodingStandard codingstandard = codingstandards.elementAt(i);
if(codingstandard.getDescription().equals(a.getDescription()))
{
add = false;
break;
}
}
if(add)
{
codingstandards.add(a);
}
}

public CodingStandard get(String description)
{
for(int i=0; i<codingstandards.size(); i++)
{
if(codingstandards.elementAt(i).getDescription().equals(description))
{
return codingstandards.elementAt(i);
}
}
return null;
}

public Vector<CodingStandard> getAll()
{
return codingstandards;
}

public boolean remove(CodingStandard a)
{
return codingstandards.remove(a);
}
}