/* File generated by: simse.codegenerator.stategenerator.RepositoryGenerator */
package simse.state;
import simse.adts.objects.*;
import simse.adts.actions.*;
import java.util.*;

public class IntegrateTimothyRedaActionStateRepository implements Cloneable
{
private Vector<IntegrateTimothyRedaAction> actions;

public IntegrateTimothyRedaActionStateRepository()
{
actions = new Vector<IntegrateTimothyRedaAction>();
}

public Object clone() {
try {
IntegrateTimothyRedaActionStateRepository cl = (IntegrateTimothyRedaActionStateRepository) (super.clone());
Vector<IntegrateTimothyRedaAction> clonedActions = new Vector<IntegrateTimothyRedaAction>();
for (int i = 0; i < actions.size(); i++) {
clonedActions.add((IntegrateTimothyRedaAction)actions.elementAt(i).clone());
}
cl.actions = clonedActions;
return cl;
} catch (CloneNotSupportedException c) {
System.out.println(c.getMessage());
}
return null;
}

public boolean add(IntegrateTimothyRedaAction a)
{
if(actions.contains(a) == false)
{
actions.add(a);
return true;
}
return false;
}

public boolean remove(IntegrateTimothyRedaAction a)
{
if(actions.contains(a))
{
actions.remove(a);
return true;
}
return false;
}

public Vector<IntegrateTimothyRedaAction> getAllActions()
{
return actions;
}

public Vector<IntegrateTimothyRedaAction> getAllActions(SSObject a)
{
Vector<IntegrateTimothyRedaAction> all = new Vector<IntegrateTimothyRedaAction>();
for(int i=0; i<actions.size(); i++)
{
IntegrateTimothyRedaAction b = actions.elementAt(i);
Vector<SSObject> parts = b.getAllParticipants();
for(int j=0; j<parts.size(); j++)
{
if(parts.elementAt(j).equals(a))
{
all.add(b);
break;
}
}
}
return all;
}

public Vector<IntegrateTimothyRedaAction> getAllActiveActions(SSObject a)
{
Vector<IntegrateTimothyRedaAction> all = new Vector<IntegrateTimothyRedaAction>();
for(int i=0; i<actions.size(); i++)
{
IntegrateTimothyRedaAction b = actions.elementAt(i);
Vector<SSObject> parts = b.getAllActiveParticipants();
for(int j=0; j<parts.size(); j++)
{
if(parts.elementAt(j).equals(a))
{
all.add(b);
break;
}
}
}
return all;
}

public Vector<IntegrateTimothyRedaAction> getAllInactiveActions(SSObject a)
{
Vector<IntegrateTimothyRedaAction> all = new Vector<IntegrateTimothyRedaAction>();
for(int i=0; i<actions.size(); i++)
{
IntegrateTimothyRedaAction b = actions.elementAt(i);
Vector<SSObject> parts = b.getAllInactiveParticipants();
for(int j=0; j<parts.size(); j++)
{
if(parts.elementAt(j).equals(a))
{
all.add(b);
break;
}
}
}
return all;
}

public IntegrateTimothyRedaAction getActionWithId(int id) {
for (int i = 0; i < actions.size(); i++) {
IntegrateTimothyRedaAction act = actions.get(i);
if (act.getId() == id) {
return act;
}
}
return null;
}

/*
* Replaces all the participants in each action with their equivalent objects
* in the current state. Calling this function solves the problem that
* happens when you clone actions -- their hashtables point to participant
* objects that were part of the previous, non-cloned state.
* Hence, this function should be called after this object is cloned.
*/
public void refetchParticipants(ArtifactStateRepository artifactRep, CustomerStateRepository customerRep, EmployeeStateRepository employeeRep, ProjectStateRepository projectRep, ToolStateRepository toolRep) {
for (int i = 0; i < actions.size(); i++) {
IntegrateTimothyRedaAction act = actions.elementAt(i);
act.refetchParticipants(artifactRep, customerRep, employeeRep, projectRep, toolRep);}
}
}