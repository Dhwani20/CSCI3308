/* File generated by: simse.codegenerator.stategenerator.RepositoryGenerator */
package simse.state;
import simse.adts.objects.*;
import java.util.*;
public class UnitTestingFrameworkStateRepository implements Cloneable
{
private Vector <UnitTestingFramework> unittestingframeworks;

public UnitTestingFrameworkStateRepository()
{
unittestingframeworks = new Vector<UnitTestingFramework>();
}

public Object clone() {
try {
UnitTestingFrameworkStateRepository cl = (UnitTestingFrameworkStateRepository) super.clone();
Vector<UnitTestingFramework> clonedunittestingframeworks = new Vector<UnitTestingFramework>();
for (int i = 0; i < unittestingframeworks.size(); i++) {
clonedunittestingframeworks.addElement((UnitTestingFramework)(unittestingframeworks.elementAt(i).clone()));
}
cl.unittestingframeworks = clonedunittestingframeworks;
return cl;
} catch (CloneNotSupportedException c) {
System.out.println(c.getMessage());
}
return null;
}

public void add(UnitTestingFramework a)
{
boolean add = true;
for(int i=0; i<unittestingframeworks.size(); i++)
{
UnitTestingFramework unittestingframework = unittestingframeworks.elementAt(i);
if(unittestingframework.getDescription().equals(a.getDescription()))
{
add = false;
break;
}
}
if(add)
{
unittestingframeworks.add(a);
}
}

public UnitTestingFramework get(String description)
{
for(int i=0; i<unittestingframeworks.size(); i++)
{
if(unittestingframeworks.elementAt(i).getDescription().equals(description))
{
return unittestingframeworks.elementAt(i);
}
}
return null;
}

public Vector<UnitTestingFramework> getAll()
{
return unittestingframeworks;
}

public boolean remove(UnitTestingFramework a)
{
return unittestingframeworks.remove(a);
}
}