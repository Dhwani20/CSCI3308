/* File generated by: simse.codegenerator.stategenerator.RepositoryGenerator */
package simse.state;
import simse.adts.objects.*;
import java.util.*;
public class DesignStateRepository implements Cloneable
{
private Vector <Design> designs;

public DesignStateRepository()
{
designs = new Vector<Design>();
}

public Object clone() {
try {
DesignStateRepository cl = (DesignStateRepository) super.clone();
Vector<Design> cloneddesigns = new Vector<Design>();
for (int i = 0; i < designs.size(); i++) {
cloneddesigns.addElement((Design)(designs.elementAt(i).clone()));
}
cl.designs = cloneddesigns;
return cl;
} catch (CloneNotSupportedException c) {
System.out.println(c.getMessage());
}
return null;
}

public void add(Design a)
{
boolean add = true;
for(int i=0; i<designs.size(); i++)
{
Design design = designs.elementAt(i);
if(design.getDescription().equals(a.getDescription()))
{
add = false;
break;
}
}
if(add)
{
designs.add(a);
}
}

public Design get(String description)
{
for(int i=0; i<designs.size(); i++)
{
if(designs.elementAt(i).getDescription().equals(description))
{
return designs.elementAt(i);
}
}
return null;
}

public Vector<Design> getAll()
{
return designs;
}

public boolean remove(Design a)
{
return designs.remove(a);
}
}