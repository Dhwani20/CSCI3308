/* File generated by: simse.codegenerator.stategenerator.RepositoryGenerator */
package simse.state;
import simse.adts.objects.*;
import java.util.*;
public class RefactoringToolStateRepository implements Cloneable
{
private Vector <RefactoringTool> refactoringtools;

public RefactoringToolStateRepository()
{
refactoringtools = new Vector<RefactoringTool>();
}

public Object clone() {
try {
RefactoringToolStateRepository cl = (RefactoringToolStateRepository) super.clone();
Vector<RefactoringTool> clonedrefactoringtools = new Vector<RefactoringTool>();
for (int i = 0; i < refactoringtools.size(); i++) {
clonedrefactoringtools.addElement((RefactoringTool)(refactoringtools.elementAt(i).clone()));
}
cl.refactoringtools = clonedrefactoringtools;
return cl;
} catch (CloneNotSupportedException c) {
System.out.println(c.getMessage());
}
return null;
}

public void add(RefactoringTool a)
{
boolean add = true;
for(int i=0; i<refactoringtools.size(); i++)
{
RefactoringTool refactoringtool = refactoringtools.elementAt(i);
if(refactoringtool.getDescription().equals(a.getDescription()))
{
add = false;
break;
}
}
if(add)
{
refactoringtools.add(a);
}
}

public RefactoringTool get(String description)
{
for(int i=0; i<refactoringtools.size(); i++)
{
if(refactoringtools.elementAt(i).getDescription().equals(description))
{
return refactoringtools.elementAt(i);
}
}
return null;
}

public Vector<RefactoringTool> getAll()
{
return refactoringtools;
}

public boolean remove(RefactoringTool a)
{
return refactoringtools.remove(a);
}
}