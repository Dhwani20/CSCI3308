/* File generated by: simse.codegenerator.stategenerator.RepositoryGenerator */
package simse.state;
import simse.adts.objects.*;
import java.util.*;
public class CurrentIterationPlanStateRepository implements Cloneable
{
private Vector <CurrentIterationPlan> currentiterationplans;

public CurrentIterationPlanStateRepository()
{
currentiterationplans = new Vector<CurrentIterationPlan>();
}

public Object clone() {
try {
CurrentIterationPlanStateRepository cl = (CurrentIterationPlanStateRepository) super.clone();
Vector<CurrentIterationPlan> clonedcurrentiterationplans = new Vector<CurrentIterationPlan>();
for (int i = 0; i < currentiterationplans.size(); i++) {
clonedcurrentiterationplans.addElement((CurrentIterationPlan)(currentiterationplans.elementAt(i).clone()));
}
cl.currentiterationplans = clonedcurrentiterationplans;
return cl;
} catch (CloneNotSupportedException c) {
System.out.println(c.getMessage());
}
return null;
}

public void add(CurrentIterationPlan a)
{
boolean add = true;
for(int i=0; i<currentiterationplans.size(); i++)
{
CurrentIterationPlan currentiterationplan = currentiterationplans.elementAt(i);
if(currentiterationplan.getName().equals(a.getName()))
{
add = false;
break;
}
}
if(add)
{
currentiterationplans.add(a);
}
}

public CurrentIterationPlan get(String name)
{
for(int i=0; i<currentiterationplans.size(); i++)
{
if(currentiterationplans.elementAt(i).getName().equals(name))
{
return currentiterationplans.elementAt(i);
}
}
return null;
}

public Vector<CurrentIterationPlan> getAll()
{
return currentiterationplans;
}

public boolean remove(CurrentIterationPlan a)
{
return currentiterationplans.remove(a);
}
}