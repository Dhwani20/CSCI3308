/* File generated by: simse.codegenerator.stategenerator.RepositoryGenerator */
package simse.state;
import simse.adts.objects.*;
import java.util.*;
public class CustomerRepresentativeStateRepository implements Cloneable
{
private Vector <CustomerRepresentative> customerrepresentatives;

public CustomerRepresentativeStateRepository()
{
customerrepresentatives = new Vector<CustomerRepresentative>();
}

public Object clone() {
try {
CustomerRepresentativeStateRepository cl = (CustomerRepresentativeStateRepository) super.clone();
Vector<CustomerRepresentative> clonedcustomerrepresentatives = new Vector<CustomerRepresentative>();
for (int i = 0; i < customerrepresentatives.size(); i++) {
clonedcustomerrepresentatives.addElement((CustomerRepresentative)(customerrepresentatives.elementAt(i).clone()));
}
cl.customerrepresentatives = clonedcustomerrepresentatives;
return cl;
} catch (CloneNotSupportedException c) {
System.out.println(c.getMessage());
}
return null;
}

public void add(CustomerRepresentative a)
{
boolean add = true;
for(int i=0; i<customerrepresentatives.size(); i++)
{
CustomerRepresentative customerrepresentative = customerrepresentatives.elementAt(i);
if(customerrepresentative.getName().equals(a.getName()))
{
add = false;
break;
}
}
if(add)
{
customerrepresentatives.add(a);
}
}

public CustomerRepresentative get(String name)
{
for(int i=0; i<customerrepresentatives.size(); i++)
{
if(customerrepresentatives.elementAt(i).getName().equals(name))
{
return customerrepresentatives.elementAt(i);
}
}
return null;
}

public Vector<CustomerRepresentative> getAll()
{
return customerrepresentatives;
}

public boolean remove(CustomerRepresentative a)
{
return customerrepresentatives.remove(a);
}
}