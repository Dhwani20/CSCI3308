/* File generated by: simse.codegenerator.explanatorytoolgenerator.ActionInfoPanelGenerator */
package simse.explanatorytool;

import simse.adts.actions.*;
import simse.adts.objects.*;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import java.awt.Dimension;
import java.util.Vector;

public class ActionInfoPanel extends JPanel implements ListSelectionListener {
private simse.adts.actions.Action action; // action in focus

private JList triggerList; // for choosing which trigger show
private JList destroyerList; // for choosing which destroyer to show
private JTextArea descriptionArea; // for displaying a trigger/destroyer description
private JTextArea actionDescriptionArea; // for displaying the action description

private final int TRIGGER = 0;
private final int DESTROYER = 1;

public ActionInfoPanel(simse.adts.actions.Action action) {
this.action = action;

// Create main panel (box):
Box mainPane = Box.createVerticalBox();
mainPane.setPreferredSize(new Dimension(900, 550));

// Create actionDescription pane and components:
Box actionDescriptionPane = Box.createVerticalBox();
JPanel actionDescriptionTitlePane = new JPanel();
actionDescriptionTitlePane.add(new JLabel("ActionDescription:"));
actionDescriptionPane.add(actionDescriptionTitlePane);
actionDescriptionArea = new JTextArea(1, 50);
actionDescriptionArea.setLineWrap(true);
actionDescriptionArea.setWrapStyleWord(true);
actionDescriptionArea.setEditable(false);
JScrollPane actionDescriptionScrollPane = new JScrollPane(actionDescriptionArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
initializeActionDescription();
actionDescriptionPane.add(actionDescriptionScrollPane);

// Create participants pane and components:
Box participantsPane = Box.createVerticalBox();
JPanel participantsTitlePane = new JPanel();
participantsTitlePane.add(new JLabel("Participants:"));
participantsPane.add(participantsTitlePane);

// participants table:
JScrollPane participantsTablePane = new JScrollPane(createParticipantsTable());
participantsTablePane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
participantsTablePane.setPreferredSize(new Dimension(900, 125));
participantsPane.add(participantsTablePane);

// Create triggerDestroyer pane and components:
JPanel triggerDestroyerPane = new JPanel();

// list pane:
Box listPane = Box.createVerticalBox();

// trigger list:
JPanel triggerListTitlePane = new JPanel();
triggerListTitlePane.add(new JLabel("Triggers:"));
listPane.add(triggerListTitlePane);
triggerList = new JList();
triggerList.setVisibleRowCount(3);
triggerList.setFixedCellWidth(400);
triggerList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
triggerList.addListSelectionListener(this);
initializeTriggerList();
JScrollPane triggerListPane = new JScrollPane(triggerList);
listPane.add(triggerListPane);

// destroyer list:
JPanel destroyerListTitlePane = new JPanel();
destroyerListTitlePane.add(new JLabel("Destroyers:"));
listPane.add(destroyerListTitlePane);
destroyerList = new JList();
destroyerList.setVisibleRowCount(3);
destroyerList.setFixedCellWidth(400);
destroyerList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
destroyerList.addListSelectionListener(this);
initializeDestroyerList();
JScrollPane destroyerListPane = new JScrollPane(destroyerList);
listPane.add(destroyerListPane);

triggerDestroyerPane.add(listPane);

// description pane:
Box descriptionPane = Box.createVerticalBox();
JPanel descriptionTitlePane = new JPanel();
descriptionTitlePane.add(new JLabel("Description:"));
descriptionPane.add(descriptionTitlePane);

// description text area:
descriptionArea = new JTextArea(9, 30);
descriptionArea.setLineWrap(true);
descriptionArea.setWrapStyleWord(true);
descriptionArea.setEditable(false);
JScrollPane descriptionScrollPane = new JScrollPane(descriptionArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
descriptionPane.add(descriptionScrollPane);

triggerDestroyerPane.add(descriptionPane);

// Add panes to main pane:
mainPane.add(actionDescriptionPane);
mainPane.add(participantsPane);
mainPane.add(triggerDestroyerPane);
add(mainPane);

// Set main window frame properties:
setOpaque(true);
validate();
repaint();
}

// responds to list selections
public void valueChanged(ListSelectionEvent e) {
if (e.getSource() == triggerList && triggerList.getSelectedIndex() >= 0) {
refreshDescriptionArea(TRIGGER);

// clear selection for destroyer list:
destroyerList.clearSelection();

}
else if (e.getSource() == destroyerList && destroyerList.getSelectedIndex() >= 0) {
refreshDescriptionArea(DESTROYER);

// clear selection for trigger list:
triggerList.clearSelection();
}
}

// initializes the action description
private void initializeActionDescription() {
String text = "";
if (action instanceof CreateUserStoriesAction) {
text = "The customer and developers work together to create user stories--about three sentences of text (for each story) about what the customer wants the system to do for them.";
}else if (action instanceof ReleasePlanningMeetingAction) {
text = "Developers determine how long each user story will take and user stories are prioritized (ideally by the customer). The output of this meeting is a release plan artifact, which specifies exactly which user stories are going to be implemented for each system release and dates for those releases.\n";
}else if (action instanceof StartIterationAction) {
text = "A new iteration is started.";
}else if (action instanceof IterationPlanningMeetingAction) {
text = "In an iteration planning meeting, two major activities are performed: (1) User stories to be developed in the current iteration are chosen with the customer. (2) The developers then break the user stories into programming tasks and sign up for specific tasks.";
}else if (action instanceof ChooseUserStoriesForIterationAction) {
text = "The developers (ideally, working with the customer) choose which user stories will be developed in the current iteration.";
}else if (action instanceof CreateProgrammingTasksAction) {
text = "The developers break the user stories for the iteration into programming tasks, and then sign up for which of these tasks they will complete.";
}else if (action instanceof CreateAcceptanceTestsAction) {
text = "The developers (ideally, working with the customer) create acceptance tests for the user stories in an iteration.";
}else if (action instanceof DesignAction) {
text = "The developers use Class-Responsibility-Collaboration (CRC) cards to design the user stories for the current iteration. CRC cards are a brainstorming tool for designing object-oriented software.";
}else if (action instanceof CreateUnitTestsAction) {
text = "The developers create unit tests (ideally using a unit testing framework), test cases for individual pieces of source code.";
}else if (action instanceof LearnCodingStandardAction) {
text = "The developers learn an agreed-upon coding standard. A coding standard is a set of rules that embody a specific style and format for writing source code, and is used to promote a collective understanding of the code by the entire team.";
}else if (action instanceof ProgramAction) {
text = "The developers work individually to program their assigned user stories for the current iteration.";
}else if (action instanceof PairProgramRobertJoyceAction) {
text = "Robert and Joyce work side-by-side at one computer to program their assigned user stories for the current iteration.";
}else if (action instanceof PairProgramTimothyRedaAction) {
text = "Timothy and Reda work side-by-side at one computer to program their assigned user stories for the current iteration.";
}else if (action instanceof PairProgramPegSigfreidoAction) {
text = "Peg and Sigfreido work side-by-side at one computer to program their assigned user stories for the current iteration.";
}else if (action instanceof UnitTestingAndFixingAction) {
text = "The developers execute unit tests and fix any bugs found.";
}else if (action instanceof RefactorAction) {
text = "The developers modify the code without changing its external behavior, to improve internal consistency, clarity, the understandability of the code, its internal structure, and its design. Some examples of refactoring are:\n1) Changing a variable name into something more meaningful\n2) Turning the code within an \"if\" block into a subroutine\n3) Replacing an \"if\" conditional with polymorphism";
}else if (action instanceof IntegrateRobertJoyceAction) {
text = "Robert and Joyce integrate the code they created together with the rest of the system.";
}else if (action instanceof IntegrateTimothyRedaAction) {
text = "Timothy and Reda integrate the code they created together with the rest of the system.";
}else if (action instanceof IntegratePegSigfreidoAction) {
text = "Peg and Sigfreido integrate the code they created together with the rest of the system.";
}else if (action instanceof IntegrateAction) {
text = "The developers integrate the code with the rest of the system.";
}else if (action instanceof AcceptanceTestingAction) {
text = "The developers and customer together run the acceptance tests -- the tests that they agreed upon would be the criteria for the customer's acceptance of this iteration's release (if all pass).";
}else if (action instanceof ReleaseCodeAndEndIterationAction) {
text = "The current version of the system (all integrated code) is released to the customer, and the current iteration is ended.";
}else if (action instanceof RequireReleasePlanDoOverAction) {
text = "Because management was not involved in the release planning meeting, they inform the developers that the release plan is all wrong, and require that they redo it.";
}else if (action instanceof CustomerComplainsAction) {
text = "The customer complains that they expected a new release of the code by now, but haven't seen it.";
}else if (action instanceof AllEmployeesIdleAction) {
text = "All employees are idle, with no assigned tasks.";
}else if (action instanceof DeliverFinalProductToCustomerAction) {
text = "The final product is delivered to the customer.";
}else if (action instanceof GameOverAction) {
text = "Time is up -- the product, up until this point, must now be delivered to the customer.";
}actionDescriptionArea.setText(text);
actionDescriptionArea.setCaretPosition(0);
}

// initializes the JList of triggers
private void initializeTriggerList() {
if (action instanceof CreateUserStoriesAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof ReleasePlanningMeetingAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof StartIterationAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof IterationPlanningMeetingAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof ChooseUserStoriesForIterationAction) {
String [] list = {
"AutoTrig",
};
triggerList.setListData(list);
}
else if (action instanceof CreateProgrammingTasksAction) {
String [] list = {
"AutoTrig",
};
triggerList.setListData(list);
}
else if (action instanceof CreateAcceptanceTestsAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof DesignAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof CreateUnitTestsAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof LearnCodingStandardAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof ProgramAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof PairProgramRobertJoyceAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof PairProgramTimothyRedaAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof PairProgramPegSigfreidoAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof UnitTestingAndFixingAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof RefactorAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof IntegrateRobertJoyceAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof IntegrateTimothyRedaAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof IntegratePegSigfreidoAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof IntegrateAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof AcceptanceTestingAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof ReleaseCodeAndEndIterationAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof RequireReleasePlanDoOverAction) {
String [] list = {
"RandomTrig",
};
triggerList.setListData(list);
}
else if (action instanceof CustomerComplainsAction) {
String [] list = {
"AutoTrig",
};
triggerList.setListData(list);
}
else if (action instanceof AllEmployeesIdleAction) {
String [] list = {
"AutoTrig",
};
triggerList.setListData(list);
}
else if (action instanceof DeliverFinalProductToCustomerAction) {
String [] list = {
"UserTrig",
};
triggerList.setListData(list);
}
else if (action instanceof GameOverAction) {
String [] list = {
"AutoTrig",
};
triggerList.setListData(list);
}
}

// initializes the JList of destroyers
private void initializeDestroyerList() {
if (action instanceof CreateUserStoriesAction) {
String [] list = {
"AutoDest",
};
destroyerList.setListData(list);
}
else if (action instanceof ReleasePlanningMeetingAction) {
String [] list = {
"AutoDest",
};
destroyerList.setListData(list);
}
else if (action instanceof StartIterationAction) {
String [] list = {
"TimedDest",
};
destroyerList.setListData(list);
}
else if (action instanceof IterationPlanningMeetingAction) {
String [] list = {
"CustInvolvedReleasePlanningMtg",
"CustNotInvolvedReleasePlanMtg",
};
destroyerList.setListData(list);
}
else if (action instanceof ChooseUserStoriesForIterationAction) {
String [] list = {
"AutoDest",
};
destroyerList.setListData(list);
}
else if (action instanceof CreateProgrammingTasksAction) {
String [] list = {
"AutoDest",
};
destroyerList.setListData(list);
}
else if (action instanceof CreateAcceptanceTestsAction) {
String [] list = {
"AutoDest",
};
destroyerList.setListData(list);
}
else if (action instanceof DesignAction) {
String [] list = {
"UserDest",
"AutoDest",
};
destroyerList.setListData(list);
}
else if (action instanceof CreateUnitTestsAction) {
String [] list = {
"AutoDest",
"UserDest",
};
destroyerList.setListData(list);
}
else if (action instanceof LearnCodingStandardAction) {
String [] list = {
"UserDest",
"AutoDest",
};
destroyerList.setListData(list);
}
else if (action instanceof ProgramAction) {
String [] list = {
"AutoDest",
"UserDest",
};
destroyerList.setListData(list);
}
else if (action instanceof PairProgramRobertJoyceAction) {
String [] list = {
"AutoDest",
"UserDest",
};
destroyerList.setListData(list);
}
else if (action instanceof PairProgramTimothyRedaAction) {
String [] list = {
"AutoDest",
"UserDest",
};
destroyerList.setListData(list);
}
else if (action instanceof PairProgramPegSigfreidoAction) {
String [] list = {
"AutoDest",
"UserDest",
};
destroyerList.setListData(list);
}
else if (action instanceof UnitTestingAndFixingAction) {
String [] list = {
"AutoDest",
"UserDest",
};
destroyerList.setListData(list);
}
else if (action instanceof RefactorAction) {
String [] list = {
"AutoDest",
"UserDest",
};
destroyerList.setListData(list);
}
else if (action instanceof IntegrateRobertJoyceAction) {
String [] list = {
"AutoDest",
"UserDest",
};
destroyerList.setListData(list);
}
else if (action instanceof IntegrateTimothyRedaAction) {
String [] list = {
"AutoDest",
"UserDest",
};
destroyerList.setListData(list);
}
else if (action instanceof IntegratePegSigfreidoAction) {
String [] list = {
"AutoDest",
"UserDest",
};
destroyerList.setListData(list);
}
else if (action instanceof IntegrateAction) {
String [] list = {
"UserDest",
"AutoDest",
};
destroyerList.setListData(list);
}
else if (action instanceof AcceptanceTestingAction) {
String [] list = {
"AutoDestAllOk",
"UserDest",
"AutoDestBugsInCode",
"AutoDestWrongAccTests",
"AutoDestWrongAccTestsBugs",
};
destroyerList.setListData(list);
}
else if (action instanceof ReleaseCodeAndEndIterationAction) {
String [] list = {
"TimedDest",
};
destroyerList.setListData(list);
}
else if (action instanceof RequireReleasePlanDoOverAction) {
String [] list = {
"TimedDest",
};
destroyerList.setListData(list);
}
else if (action instanceof CustomerComplainsAction) {
String [] list = {
"TimedDest",
};
destroyerList.setListData(list);
}
else if (action instanceof AllEmployeesIdleAction) {
String [] list = {
"TimedDest",
"AutoDest",
};
destroyerList.setListData(list);
}
else if (action instanceof DeliverFinalProductToCustomerAction) {
String [] list = {
};
destroyerList.setListData(list);
}
else if (action instanceof GameOverAction) {
String [] list = {
};
destroyerList.setListData(list);
}
}

private JTable createParticipantsTable() {
String[] columnNames = { "Participant Name", "Participant", "Status" };
Object[][] data = new Object[action.getAllParticipants().size()][3];
int index = 0;
if (action instanceof CreateUserStoriesAction) {
CreateUserStoriesAction createuserstoriesAction = (CreateUserStoriesAction)action;

 // Developer participant:
Vector<Employee> developers = createuserstoriesAction.getAllDevelopers();
Vector<Employee> activeDevelopers = createuserstoriesAction.getAllActiveDevelopers();
for (int i = 0; i < developers.size(); i++) {
Employee developer = developers.get(i);
data[index][0] = "Developer";
if (developer instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperDeveloper = (SoftwareDeveloper)developer;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperDeveloper.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeDevelopers.size(); j++) {
Employee activeDeveloper = activeDevelopers.get(j);
if ((activeDeveloper instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeDeveloper).getName().equals(((SoftwareDeveloper)developer).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // CustomerRep participant:
Vector<Employee> customerreps = createuserstoriesAction.getAllCustomerReps();
Vector<Employee> activeCustomerReps = createuserstoriesAction.getAllActiveCustomerReps();
for (int i = 0; i < customerreps.size(); i++) {
Employee customerrep = customerreps.get(i);
data[index][0] = "CustomerRep";
if (customerrep instanceof CustomerRep) {
CustomerRep customerrepCustomerRep = (CustomerRep)customerrep;
data[index][1] = "CustomerRep Employee " + customerrepCustomerRep.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCustomerReps.size(); j++) {
Employee activeCustomerRep = activeCustomerReps.get(j);
if ((activeCustomerRep instanceof CustomerRep) && ((CustomerRep)activeCustomerRep).getName().equals(((CustomerRep)customerrep).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // UserStories participant:
Vector<Artifact> userstoriess = createuserstoriesAction.getAllUserStoriess();
Vector<Artifact> activeUserStoriess = createuserstoriesAction.getAllActiveUserStoriess();
for (int i = 0; i < userstoriess.size(); i++) {
Artifact userstories = userstoriess.get(i);
data[index][0] = "UserStories";
if (userstories instanceof UserStories) {
UserStories userstoriesUserStories = (UserStories)userstories;
data[index][1] = "UserStories Artifact " + userstoriesUserStories.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeUserStoriess.size(); j++) {
Artifact activeUserStories = activeUserStoriess.get(j);
if ((activeUserStories instanceof UserStories) && ((UserStories)activeUserStories).getName().equals(((UserStories)userstories).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = createuserstoriesAction.getAllProjs();
Vector<Project> activeProjs = createuserstoriesAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof ReleasePlanningMeetingAction) {
ReleasePlanningMeetingAction releaseplanningmeetingAction = (ReleasePlanningMeetingAction)action;

 // Developer participant:
Vector<Employee> developers = releaseplanningmeetingAction.getAllDevelopers();
Vector<Employee> activeDevelopers = releaseplanningmeetingAction.getAllActiveDevelopers();
for (int i = 0; i < developers.size(); i++) {
Employee developer = developers.get(i);
data[index][0] = "Developer";
if (developer instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperDeveloper = (SoftwareDeveloper)developer;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperDeveloper.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeDevelopers.size(); j++) {
Employee activeDeveloper = activeDevelopers.get(j);
if ((activeDeveloper instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeDeveloper).getName().equals(((SoftwareDeveloper)developer).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Manager participant:
Vector<Employee> managers = releaseplanningmeetingAction.getAllManagers();
Vector<Employee> activeManagers = releaseplanningmeetingAction.getAllActiveManagers();
for (int i = 0; i < managers.size(); i++) {
Employee manager = managers.get(i);
data[index][0] = "Manager";
if (manager instanceof Manager) {
Manager managerManager = (Manager)manager;
data[index][1] = "Manager Employee " + managerManager.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeManagers.size(); j++) {
Employee activeManager = activeManagers.get(j);
if ((activeManager instanceof Manager) && ((Manager)activeManager).getName().equals(((Manager)manager).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // CustomerRep participant:
Vector<Employee> customerreps = releaseplanningmeetingAction.getAllCustomerReps();
Vector<Employee> activeCustomerReps = releaseplanningmeetingAction.getAllActiveCustomerReps();
for (int i = 0; i < customerreps.size(); i++) {
Employee customerrep = customerreps.get(i);
data[index][0] = "CustomerRep";
if (customerrep instanceof CustomerRep) {
CustomerRep customerrepCustomerRep = (CustomerRep)customerrep;
data[index][1] = "CustomerRep Employee " + customerrepCustomerRep.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCustomerReps.size(); j++) {
Employee activeCustomerRep = activeCustomerReps.get(j);
if ((activeCustomerRep instanceof CustomerRep) && ((CustomerRep)activeCustomerRep).getName().equals(((CustomerRep)customerrep).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = releaseplanningmeetingAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = releaseplanningmeetingAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // UserStories participant:
Vector<Artifact> userstoriess = releaseplanningmeetingAction.getAllUserStoriess();
Vector<Artifact> activeUserStoriess = releaseplanningmeetingAction.getAllActiveUserStoriess();
for (int i = 0; i < userstoriess.size(); i++) {
Artifact userstories = userstoriess.get(i);
data[index][0] = "UserStories";
if (userstories instanceof UserStories) {
UserStories userstoriesUserStories = (UserStories)userstories;
data[index][1] = "UserStories Artifact " + userstoriesUserStories.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeUserStoriess.size(); j++) {
Artifact activeUserStories = activeUserStoriess.get(j);
if ((activeUserStories instanceof UserStories) && ((UserStories)activeUserStories).getName().equals(((UserStories)userstories).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = releaseplanningmeetingAction.getAllProjs();
Vector<Project> activeProjs = releaseplanningmeetingAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof StartIterationAction) {
StartIterationAction startiterationAction = (StartIterationAction)action;

 // Emp participant:
Vector<Employee> emps = startiterationAction.getAllEmps();
Vector<Employee> activeEmps = startiterationAction.getAllActiveEmps();
for (int i = 0; i < emps.size(); i++) {
Employee emp = emps.get(i);
data[index][0] = "Emp";
if (emp instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperEmp = (SoftwareDeveloper)emp;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperEmp.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeEmps.size(); j++) {
Employee activeEmp = activeEmps.get(j);
if ((activeEmp instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeEmp).getName().equals(((SoftwareDeveloper)emp).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = startiterationAction.getAllProjs();
Vector<Project> activeProjs = startiterationAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = startiterationAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = startiterationAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // UserStories participant:
Vector<Artifact> userstoriess = startiterationAction.getAllUserStoriess();
Vector<Artifact> activeUserStoriess = startiterationAction.getAllActiveUserStoriess();
for (int i = 0; i < userstoriess.size(); i++) {
Artifact userstories = userstoriess.get(i);
data[index][0] = "UserStories";
if (userstories instanceof UserStories) {
UserStories userstoriesUserStories = (UserStories)userstories;
data[index][1] = "UserStories Artifact " + userstoriesUserStories.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeUserStoriess.size(); j++) {
Artifact activeUserStories = activeUserStoriess.get(j);
if ((activeUserStories instanceof UserStories) && ((UserStories)activeUserStories).getName().equals(((UserStories)userstories).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // IterationPlan participant:
Vector<Artifact> iterationplans = startiterationAction.getAllIterationPlans();
Vector<Artifact> activeIterationPlans = startiterationAction.getAllActiveIterationPlans();
for (int i = 0; i < iterationplans.size(); i++) {
Artifact iterationplan = iterationplans.get(i);
data[index][0] = "IterationPlan";
if (iterationplan instanceof CurrentIterationPlan) {
CurrentIterationPlan currentiterationplanIterationPlan = (CurrentIterationPlan)iterationplan;
data[index][1] = "CurrentIterationPlan Artifact " + currentiterationplanIterationPlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeIterationPlans.size(); j++) {
Artifact activeIterationPlan = activeIterationPlans.get(j);
if ((activeIterationPlan instanceof CurrentIterationPlan) && ((CurrentIterationPlan)activeIterationPlan).getName().equals(((CurrentIterationPlan)iterationplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Design participant:
Vector<Artifact> designs = startiterationAction.getAllDesigns();
Vector<Artifact> activeDesigns = startiterationAction.getAllActiveDesigns();
for (int i = 0; i < designs.size(); i++) {
Artifact design = designs.get(i);
data[index][0] = "Design";
if (design instanceof Design) {
Design designDesign = (Design)design;
data[index][1] = "Design Artifact " + designDesign.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeDesigns.size(); j++) {
Artifact activeDesign = activeDesigns.get(j);
if ((activeDesign instanceof Design) && ((Design)activeDesign).getDescription().equals(((Design)design).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // UnitTests participant:
Vector<Artifact> unittestss = startiterationAction.getAllUnitTestss();
Vector<Artifact> activeUnitTestss = startiterationAction.getAllActiveUnitTestss();
for (int i = 0; i < unittestss.size(); i++) {
Artifact unittests = unittestss.get(i);
data[index][0] = "UnitTests";
if (unittests instanceof UnitTests) {
UnitTests unittestsUnitTests = (UnitTests)unittests;
data[index][1] = "UnitTests Artifact " + unittestsUnitTests.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeUnitTestss.size(); j++) {
Artifact activeUnitTests = activeUnitTestss.get(j);
if ((activeUnitTests instanceof UnitTests) && ((UnitTests)activeUnitTests).getDescription().equals(((UnitTests)unittests).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AcceptanceTests participant:
Vector<Artifact> acceptancetestss = startiterationAction.getAllAcceptanceTestss();
Vector<Artifact> activeAcceptanceTestss = startiterationAction.getAllActiveAcceptanceTestss();
for (int i = 0; i < acceptancetestss.size(); i++) {
Artifact acceptancetests = acceptancetestss.get(i);
data[index][0] = "AcceptanceTests";
if (acceptancetests instanceof AcceptanceTests) {
AcceptanceTests acceptancetestsAcceptanceTests = (AcceptanceTests)acceptancetests;
data[index][1] = "AcceptanceTests Artifact " + acceptancetestsAcceptanceTests.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAcceptanceTestss.size(); j++) {
Artifact activeAcceptanceTests = activeAcceptanceTestss.get(j);
if ((activeAcceptanceTests instanceof AcceptanceTests) && ((AcceptanceTests)activeAcceptanceTests).getDescription().equals(((AcceptanceTests)acceptancetests).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Code participant:
Vector<Artifact> codes = startiterationAction.getAllCodes();
Vector<Artifact> activeCodes = startiterationAction.getAllActiveCodes();
for (int i = 0; i < codes.size(); i++) {
Artifact code = codes.get(i);
data[index][0] = "Code";
if (code instanceof Code) {
Code codeCode = (Code)code;
data[index][1] = "Code Artifact " + codeCode.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodes.size(); j++) {
Artifact activeCode = activeCodes.get(j);
if ((activeCode instanceof Code) && ((Code)activeCode).getDescription().equals(((Code)code).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // CustomerRep participant:
Vector<Employee> customerreps = startiterationAction.getAllCustomerReps();
Vector<Employee> activeCustomerReps = startiterationAction.getAllActiveCustomerReps();
for (int i = 0; i < customerreps.size(); i++) {
Employee customerrep = customerreps.get(i);
data[index][0] = "CustomerRep";
if (customerrep instanceof CustomerRep) {
CustomerRep customerrepCustomerRep = (CustomerRep)customerrep;
data[index][1] = "CustomerRep Employee " + customerrepCustomerRep.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCustomerReps.size(); j++) {
Employee activeCustomerRep = activeCustomerReps.get(j);
if ((activeCustomerRep instanceof CustomerRep) && ((CustomerRep)activeCustomerRep).getName().equals(((CustomerRep)customerrep).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof IterationPlanningMeetingAction) {
IterationPlanningMeetingAction iterationplanningmeetingAction = (IterationPlanningMeetingAction)action;

 // Developer participant:
Vector<Employee> developers = iterationplanningmeetingAction.getAllDevelopers();
Vector<Employee> activeDevelopers = iterationplanningmeetingAction.getAllActiveDevelopers();
for (int i = 0; i < developers.size(); i++) {
Employee developer = developers.get(i);
data[index][0] = "Developer";
if (developer instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperDeveloper = (SoftwareDeveloper)developer;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperDeveloper.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeDevelopers.size(); j++) {
Employee activeDeveloper = activeDevelopers.get(j);
if ((activeDeveloper instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeDeveloper).getName().equals(((SoftwareDeveloper)developer).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // CustomerRep participant:
Vector<Employee> customerreps = iterationplanningmeetingAction.getAllCustomerReps();
Vector<Employee> activeCustomerReps = iterationplanningmeetingAction.getAllActiveCustomerReps();
for (int i = 0; i < customerreps.size(); i++) {
Employee customerrep = customerreps.get(i);
data[index][0] = "CustomerRep";
if (customerrep instanceof CustomerRep) {
CustomerRep customerrepCustomerRep = (CustomerRep)customerrep;
data[index][1] = "CustomerRep Employee " + customerrepCustomerRep.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCustomerReps.size(); j++) {
Employee activeCustomerRep = activeCustomerReps.get(j);
if ((activeCustomerRep instanceof CustomerRep) && ((CustomerRep)activeCustomerRep).getName().equals(((CustomerRep)customerrep).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // IterationPlan participant:
Vector<Artifact> iterationplans = iterationplanningmeetingAction.getAllIterationPlans();
Vector<Artifact> activeIterationPlans = iterationplanningmeetingAction.getAllActiveIterationPlans();
for (int i = 0; i < iterationplans.size(); i++) {
Artifact iterationplan = iterationplans.get(i);
data[index][0] = "IterationPlan";
if (iterationplan instanceof CurrentIterationPlan) {
CurrentIterationPlan currentiterationplanIterationPlan = (CurrentIterationPlan)iterationplan;
data[index][1] = "CurrentIterationPlan Artifact " + currentiterationplanIterationPlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeIterationPlans.size(); j++) {
Artifact activeIterationPlan = activeIterationPlans.get(j);
if ((activeIterationPlan instanceof CurrentIterationPlan) && ((CurrentIterationPlan)activeIterationPlan).getName().equals(((CurrentIterationPlan)iterationplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = iterationplanningmeetingAction.getAllProjs();
Vector<Project> activeProjs = iterationplanningmeetingAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = iterationplanningmeetingAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = iterationplanningmeetingAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof ChooseUserStoriesForIterationAction) {
ChooseUserStoriesForIterationAction chooseuserstoriesforiterationAction = (ChooseUserStoriesForIterationAction)action;

 // Emp participant:
Vector<Employee> emps = chooseuserstoriesforiterationAction.getAllEmps();
Vector<Employee> activeEmps = chooseuserstoriesforiterationAction.getAllActiveEmps();
for (int i = 0; i < emps.size(); i++) {
Employee emp = emps.get(i);
data[index][0] = "Emp";
if (emp instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperEmp = (SoftwareDeveloper)emp;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperEmp.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeEmps.size(); j++) {
Employee activeEmp = activeEmps.get(j);
if ((activeEmp instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeEmp).getName().equals(((SoftwareDeveloper)emp).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
if (emp instanceof CustomerRep) {
CustomerRep customerrepEmp = (CustomerRep)emp;
data[index][1] = "CustomerRep Employee " + customerrepEmp.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeEmps.size(); j++) {
Employee activeEmp = activeEmps.get(j);
if ((activeEmp instanceof CustomerRep) && ((CustomerRep)activeEmp).getName().equals(((CustomerRep)emp).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = chooseuserstoriesforiterationAction.getAllProjs();
Vector<Project> activeProjs = chooseuserstoriesforiterationAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // IterationPlan participant:
Vector<Artifact> iterationplans = chooseuserstoriesforiterationAction.getAllIterationPlans();
Vector<Artifact> activeIterationPlans = chooseuserstoriesforiterationAction.getAllActiveIterationPlans();
for (int i = 0; i < iterationplans.size(); i++) {
Artifact iterationplan = iterationplans.get(i);
data[index][0] = "IterationPlan";
if (iterationplan instanceof CurrentIterationPlan) {
CurrentIterationPlan currentiterationplanIterationPlan = (CurrentIterationPlan)iterationplan;
data[index][1] = "CurrentIterationPlan Artifact " + currentiterationplanIterationPlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeIterationPlans.size(); j++) {
Artifact activeIterationPlan = activeIterationPlans.get(j);
if ((activeIterationPlan instanceof CurrentIterationPlan) && ((CurrentIterationPlan)activeIterationPlan).getName().equals(((CurrentIterationPlan)iterationplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = chooseuserstoriesforiterationAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = chooseuserstoriesforiterationAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof CreateProgrammingTasksAction) {
CreateProgrammingTasksAction createprogrammingtasksAction = (CreateProgrammingTasksAction)action;

 // Emp participant:
Vector<Employee> emps = createprogrammingtasksAction.getAllEmps();
Vector<Employee> activeEmps = createprogrammingtasksAction.getAllActiveEmps();
for (int i = 0; i < emps.size(); i++) {
Employee emp = emps.get(i);
data[index][0] = "Emp";
if (emp instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperEmp = (SoftwareDeveloper)emp;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperEmp.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeEmps.size(); j++) {
Employee activeEmp = activeEmps.get(j);
if ((activeEmp instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeEmp).getName().equals(((SoftwareDeveloper)emp).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // IterationPlan participant:
Vector<Artifact> iterationplans = createprogrammingtasksAction.getAllIterationPlans();
Vector<Artifact> activeIterationPlans = createprogrammingtasksAction.getAllActiveIterationPlans();
for (int i = 0; i < iterationplans.size(); i++) {
Artifact iterationplan = iterationplans.get(i);
data[index][0] = "IterationPlan";
if (iterationplan instanceof CurrentIterationPlan) {
CurrentIterationPlan currentiterationplanIterationPlan = (CurrentIterationPlan)iterationplan;
data[index][1] = "CurrentIterationPlan Artifact " + currentiterationplanIterationPlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeIterationPlans.size(); j++) {
Artifact activeIterationPlan = activeIterationPlans.get(j);
if ((activeIterationPlan instanceof CurrentIterationPlan) && ((CurrentIterationPlan)activeIterationPlan).getName().equals(((CurrentIterationPlan)iterationplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = createprogrammingtasksAction.getAllProjs();
Vector<Project> activeProjs = createprogrammingtasksAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = createprogrammingtasksAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = createprogrammingtasksAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof CreateAcceptanceTestsAction) {
CreateAcceptanceTestsAction createacceptancetestsAction = (CreateAcceptanceTestsAction)action;

 // Developer participant:
Vector<Employee> developers = createacceptancetestsAction.getAllDevelopers();
Vector<Employee> activeDevelopers = createacceptancetestsAction.getAllActiveDevelopers();
for (int i = 0; i < developers.size(); i++) {
Employee developer = developers.get(i);
data[index][0] = "Developer";
if (developer instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperDeveloper = (SoftwareDeveloper)developer;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperDeveloper.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeDevelopers.size(); j++) {
Employee activeDeveloper = activeDevelopers.get(j);
if ((activeDeveloper instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeDeveloper).getName().equals(((SoftwareDeveloper)developer).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // CustRep participant:
Vector<Employee> custreps = createacceptancetestsAction.getAllCustReps();
Vector<Employee> activeCustReps = createacceptancetestsAction.getAllActiveCustReps();
for (int i = 0; i < custreps.size(); i++) {
Employee custrep = custreps.get(i);
data[index][0] = "CustRep";
if (custrep instanceof CustomerRep) {
CustomerRep customerrepCustRep = (CustomerRep)custrep;
data[index][1] = "CustomerRep Employee " + customerrepCustRep.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCustReps.size(); j++) {
Employee activeCustRep = activeCustReps.get(j);
if ((activeCustRep instanceof CustomerRep) && ((CustomerRep)activeCustRep).getName().equals(((CustomerRep)custrep).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Tests participant:
Vector<Artifact> testss = createacceptancetestsAction.getAllTestss();
Vector<Artifact> activeTestss = createacceptancetestsAction.getAllActiveTestss();
for (int i = 0; i < testss.size(); i++) {
Artifact tests = testss.get(i);
data[index][0] = "Tests";
if (tests instanceof AcceptanceTests) {
AcceptanceTests acceptancetestsTests = (AcceptanceTests)tests;
data[index][1] = "AcceptanceTests Artifact " + acceptancetestsTests.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeTestss.size(); j++) {
Artifact activeTests = activeTestss.get(j);
if ((activeTests instanceof AcceptanceTests) && ((AcceptanceTests)activeTests).getDescription().equals(((AcceptanceTests)tests).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = createacceptancetestsAction.getAllProjs();
Vector<Project> activeProjs = createacceptancetestsAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = createacceptancetestsAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = createacceptancetestsAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof DesignAction) {
DesignAction designAction = (DesignAction)action;

 // Developer participant:
Vector<Employee> developers = designAction.getAllDevelopers();
Vector<Employee> activeDevelopers = designAction.getAllActiveDevelopers();
for (int i = 0; i < developers.size(); i++) {
Employee developer = developers.get(i);
data[index][0] = "Developer";
if (developer instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperDeveloper = (SoftwareDeveloper)developer;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperDeveloper.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeDevelopers.size(); j++) {
Employee activeDeveloper = activeDevelopers.get(j);
if ((activeDeveloper instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeDeveloper).getName().equals(((SoftwareDeveloper)developer).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // CRCCards participant:
Vector<Tool> crccardss = designAction.getAllCRCCardss();
Vector<Tool> activeCRCCardss = designAction.getAllActiveCRCCardss();
for (int i = 0; i < crccardss.size(); i++) {
Tool crccards = crccardss.get(i);
data[index][0] = "CRCCards";
if (crccards instanceof CRCCards) {
CRCCards crccardsCRCCards = (CRCCards)crccards;
data[index][1] = "CRCCards Tool " + crccardsCRCCards.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCRCCardss.size(); j++) {
Tool activeCRCCards = activeCRCCardss.get(j);
if ((activeCRCCards instanceof CRCCards) && ((CRCCards)activeCRCCards).getDescription().equals(((CRCCards)crccards).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Design participant:
Vector<Artifact> designs = designAction.getAllDesigns();
Vector<Artifact> activeDesigns = designAction.getAllActiveDesigns();
for (int i = 0; i < designs.size(); i++) {
Artifact design = designs.get(i);
data[index][0] = "Design";
if (design instanceof Design) {
Design designDesign = (Design)design;
data[index][1] = "Design Artifact " + designDesign.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeDesigns.size(); j++) {
Artifact activeDesign = activeDesigns.get(j);
if ((activeDesign instanceof Design) && ((Design)activeDesign).getDescription().equals(((Design)design).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = designAction.getAllProjs();
Vector<Project> activeProjs = designAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedUserStories participant:
Vector<Artifact> associateduserstoriess = designAction.getAllAssociatedUserStoriess();
Vector<Artifact> activeAssociatedUserStoriess = designAction.getAllActiveAssociatedUserStoriess();
for (int i = 0; i < associateduserstoriess.size(); i++) {
Artifact associateduserstories = associateduserstoriess.get(i);
data[index][0] = "AssociatedUserStories";
if (associateduserstories instanceof UserStories) {
UserStories userstoriesAssociatedUserStories = (UserStories)associateduserstories;
data[index][1] = "UserStories Artifact " + userstoriesAssociatedUserStories.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedUserStoriess.size(); j++) {
Artifact activeAssociatedUserStories = activeAssociatedUserStoriess.get(j);
if ((activeAssociatedUserStories instanceof UserStories) && ((UserStories)activeAssociatedUserStories).getName().equals(((UserStories)associateduserstories).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = designAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = designAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof CreateUnitTestsAction) {
CreateUnitTestsAction createunittestsAction = (CreateUnitTestsAction)action;

 // Developer participant:
Vector<Employee> developers = createunittestsAction.getAllDevelopers();
Vector<Employee> activeDevelopers = createunittestsAction.getAllActiveDevelopers();
for (int i = 0; i < developers.size(); i++) {
Employee developer = developers.get(i);
data[index][0] = "Developer";
if (developer instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperDeveloper = (SoftwareDeveloper)developer;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperDeveloper.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeDevelopers.size(); j++) {
Employee activeDeveloper = activeDevelopers.get(j);
if ((activeDeveloper instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeDeveloper).getName().equals(((SoftwareDeveloper)developer).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Tests participant:
Vector<Artifact> testss = createunittestsAction.getAllTestss();
Vector<Artifact> activeTestss = createunittestsAction.getAllActiveTestss();
for (int i = 0; i < testss.size(); i++) {
Artifact tests = testss.get(i);
data[index][0] = "Tests";
if (tests instanceof UnitTests) {
UnitTests unittestsTests = (UnitTests)tests;
data[index][1] = "UnitTests Artifact " + unittestsTests.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeTestss.size(); j++) {
Artifact activeTests = activeTestss.get(j);
if ((activeTests instanceof UnitTests) && ((UnitTests)activeTests).getDescription().equals(((UnitTests)tests).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // TestingFramework participant:
Vector<Tool> testingframeworks = createunittestsAction.getAllTestingFrameworks();
Vector<Tool> activeTestingFrameworks = createunittestsAction.getAllActiveTestingFrameworks();
for (int i = 0; i < testingframeworks.size(); i++) {
Tool testingframework = testingframeworks.get(i);
data[index][0] = "TestingFramework";
if (testingframework instanceof UnitTestingFramework) {
UnitTestingFramework unittestingframeworkTestingFramework = (UnitTestingFramework)testingframework;
data[index][1] = "UnitTestingFramework Tool " + unittestingframeworkTestingFramework.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeTestingFrameworks.size(); j++) {
Tool activeTestingFramework = activeTestingFrameworks.get(j);
if ((activeTestingFramework instanceof UnitTestingFramework) && ((UnitTestingFramework)activeTestingFramework).getDescription().equals(((UnitTestingFramework)testingframework).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = createunittestsAction.getAllProjs();
Vector<Project> activeProjs = createunittestsAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedDesign participant:
Vector<Artifact> associateddesigns = createunittestsAction.getAllAssociatedDesigns();
Vector<Artifact> activeAssociatedDesigns = createunittestsAction.getAllActiveAssociatedDesigns();
for (int i = 0; i < associateddesigns.size(); i++) {
Artifact associateddesign = associateddesigns.get(i);
data[index][0] = "AssociatedDesign";
if (associateddesign instanceof Design) {
Design designAssociatedDesign = (Design)associateddesign;
data[index][1] = "Design Artifact " + designAssociatedDesign.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedDesigns.size(); j++) {
Artifact activeAssociatedDesign = activeAssociatedDesigns.get(j);
if ((activeAssociatedDesign instanceof Design) && ((Design)activeAssociatedDesign).getDescription().equals(((Design)associateddesign).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = createunittestsAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = createunittestsAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof LearnCodingStandardAction) {
LearnCodingStandardAction learncodingstandardAction = (LearnCodingStandardAction)action;

 // Developer participant:
Vector<Employee> developers = learncodingstandardAction.getAllDevelopers();
Vector<Employee> activeDevelopers = learncodingstandardAction.getAllActiveDevelopers();
for (int i = 0; i < developers.size(); i++) {
Employee developer = developers.get(i);
data[index][0] = "Developer";
if (developer instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperDeveloper = (SoftwareDeveloper)developer;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperDeveloper.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeDevelopers.size(); j++) {
Employee activeDeveloper = activeDevelopers.get(j);
if ((activeDeveloper instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeDeveloper).getName().equals(((SoftwareDeveloper)developer).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // CodingStandard participant:
Vector<Tool> codingstandards = learncodingstandardAction.getAllCodingStandards();
Vector<Tool> activeCodingStandards = learncodingstandardAction.getAllActiveCodingStandards();
for (int i = 0; i < codingstandards.size(); i++) {
Tool codingstandard = codingstandards.get(i);
data[index][0] = "CodingStandard";
if (codingstandard instanceof CodingStandard) {
CodingStandard codingstandardCodingStandard = (CodingStandard)codingstandard;
data[index][1] = "CodingStandard Tool " + codingstandardCodingStandard.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodingStandards.size(); j++) {
Tool activeCodingStandard = activeCodingStandards.get(j);
if ((activeCodingStandard instanceof CodingStandard) && ((CodingStandard)activeCodingStandard).getDescription().equals(((CodingStandard)codingstandard).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = learncodingstandardAction.getAllProjs();
Vector<Project> activeProjs = learncodingstandardAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof ProgramAction) {
ProgramAction programAction = (ProgramAction)action;

 // Developer participant:
Vector<Employee> developers = programAction.getAllDevelopers();
Vector<Employee> activeDevelopers = programAction.getAllActiveDevelopers();
for (int i = 0; i < developers.size(); i++) {
Employee developer = developers.get(i);
data[index][0] = "Developer";
if (developer instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperDeveloper = (SoftwareDeveloper)developer;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperDeveloper.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeDevelopers.size(); j++) {
Employee activeDeveloper = activeDevelopers.get(j);
if ((activeDeveloper instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeDeveloper).getName().equals(((SoftwareDeveloper)developer).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Code participant:
Vector<Artifact> codes = programAction.getAllCodes();
Vector<Artifact> activeCodes = programAction.getAllActiveCodes();
for (int i = 0; i < codes.size(); i++) {
Artifact code = codes.get(i);
data[index][0] = "Code";
if (code instanceof Code) {
Code codeCode = (Code)code;
data[index][1] = "Code Artifact " + codeCode.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodes.size(); j++) {
Artifact activeCode = activeCodes.get(j);
if ((activeCode instanceof Code) && ((Code)activeCode).getDescription().equals(((Code)code).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // CodingStandard participant:
Vector<Tool> codingstandards = programAction.getAllCodingStandards();
Vector<Tool> activeCodingStandards = programAction.getAllActiveCodingStandards();
for (int i = 0; i < codingstandards.size(); i++) {
Tool codingstandard = codingstandards.get(i);
data[index][0] = "CodingStandard";
if (codingstandard instanceof CodingStandard) {
CodingStandard codingstandardCodingStandard = (CodingStandard)codingstandard;
data[index][1] = "CodingStandard Tool " + codingstandardCodingStandard.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodingStandards.size(); j++) {
Tool activeCodingStandard = activeCodingStandards.get(j);
if ((activeCodingStandard instanceof CodingStandard) && ((CodingStandard)activeCodingStandard).getDescription().equals(((CodingStandard)codingstandard).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedDesign participant:
Vector<Artifact> associateddesigns = programAction.getAllAssociatedDesigns();
Vector<Artifact> activeAssociatedDesigns = programAction.getAllActiveAssociatedDesigns();
for (int i = 0; i < associateddesigns.size(); i++) {
Artifact associateddesign = associateddesigns.get(i);
data[index][0] = "AssociatedDesign";
if (associateddesign instanceof Design) {
Design designAssociatedDesign = (Design)associateddesign;
data[index][1] = "Design Artifact " + designAssociatedDesign.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedDesigns.size(); j++) {
Artifact activeAssociatedDesign = activeAssociatedDesigns.get(j);
if ((activeAssociatedDesign instanceof Design) && ((Design)activeAssociatedDesign).getDescription().equals(((Design)associateddesign).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedUnitTests participant:
Vector<Artifact> associatedunittestss = programAction.getAllAssociatedUnitTestss();
Vector<Artifact> activeAssociatedUnitTestss = programAction.getAllActiveAssociatedUnitTestss();
for (int i = 0; i < associatedunittestss.size(); i++) {
Artifact associatedunittests = associatedunittestss.get(i);
data[index][0] = "AssociatedUnitTests";
if (associatedunittests instanceof UnitTests) {
UnitTests unittestsAssociatedUnitTests = (UnitTests)associatedunittests;
data[index][1] = "UnitTests Artifact " + unittestsAssociatedUnitTests.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedUnitTestss.size(); j++) {
Artifact activeAssociatedUnitTests = activeAssociatedUnitTestss.get(j);
if ((activeAssociatedUnitTests instanceof UnitTests) && ((UnitTests)activeAssociatedUnitTests).getDescription().equals(((UnitTests)associatedunittests).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = programAction.getAllProjs();
Vector<Project> activeProjs = programAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedUserStories participant:
Vector<Artifact> associateduserstoriess = programAction.getAllAssociatedUserStoriess();
Vector<Artifact> activeAssociatedUserStoriess = programAction.getAllActiveAssociatedUserStoriess();
for (int i = 0; i < associateduserstoriess.size(); i++) {
Artifact associateduserstories = associateduserstoriess.get(i);
data[index][0] = "AssociatedUserStories";
if (associateduserstories instanceof UserStories) {
UserStories userstoriesAssociatedUserStories = (UserStories)associateduserstories;
data[index][1] = "UserStories Artifact " + userstoriesAssociatedUserStories.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedUserStoriess.size(); j++) {
Artifact activeAssociatedUserStories = activeAssociatedUserStoriess.get(j);
if ((activeAssociatedUserStories instanceof UserStories) && ((UserStories)activeAssociatedUserStories).getName().equals(((UserStories)associateduserstories).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = programAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = programAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof PairProgramRobertJoyceAction) {
PairProgramRobertJoyceAction pairprogramrobertjoyceAction = (PairProgramRobertJoyceAction)action;

 // Robert participant:
Vector<Employee> roberts = pairprogramrobertjoyceAction.getAllRoberts();
Vector<Employee> activeRoberts = pairprogramrobertjoyceAction.getAllActiveRoberts();
for (int i = 0; i < roberts.size(); i++) {
Employee robert = roberts.get(i);
data[index][0] = "Robert";
if (robert instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperRobert = (SoftwareDeveloper)robert;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperRobert.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeRoberts.size(); j++) {
Employee activeRobert = activeRoberts.get(j);
if ((activeRobert instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeRobert).getName().equals(((SoftwareDeveloper)robert).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Joyce participant:
Vector<Employee> joyces = pairprogramrobertjoyceAction.getAllJoyces();
Vector<Employee> activeJoyces = pairprogramrobertjoyceAction.getAllActiveJoyces();
for (int i = 0; i < joyces.size(); i++) {
Employee joyce = joyces.get(i);
data[index][0] = "Joyce";
if (joyce instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperJoyce = (SoftwareDeveloper)joyce;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperJoyce.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeJoyces.size(); j++) {
Employee activeJoyce = activeJoyces.get(j);
if ((activeJoyce instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeJoyce).getName().equals(((SoftwareDeveloper)joyce).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Code participant:
Vector<Artifact> codes = pairprogramrobertjoyceAction.getAllCodes();
Vector<Artifact> activeCodes = pairprogramrobertjoyceAction.getAllActiveCodes();
for (int i = 0; i < codes.size(); i++) {
Artifact code = codes.get(i);
data[index][0] = "Code";
if (code instanceof Code) {
Code codeCode = (Code)code;
data[index][1] = "Code Artifact " + codeCode.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodes.size(); j++) {
Artifact activeCode = activeCodes.get(j);
if ((activeCode instanceof Code) && ((Code)activeCode).getDescription().equals(((Code)code).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // CodingStandard participant:
Vector<Tool> codingstandards = pairprogramrobertjoyceAction.getAllCodingStandards();
Vector<Tool> activeCodingStandards = pairprogramrobertjoyceAction.getAllActiveCodingStandards();
for (int i = 0; i < codingstandards.size(); i++) {
Tool codingstandard = codingstandards.get(i);
data[index][0] = "CodingStandard";
if (codingstandard instanceof CodingStandard) {
CodingStandard codingstandardCodingStandard = (CodingStandard)codingstandard;
data[index][1] = "CodingStandard Tool " + codingstandardCodingStandard.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodingStandards.size(); j++) {
Tool activeCodingStandard = activeCodingStandards.get(j);
if ((activeCodingStandard instanceof CodingStandard) && ((CodingStandard)activeCodingStandard).getDescription().equals(((CodingStandard)codingstandard).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedDesign participant:
Vector<Artifact> associateddesigns = pairprogramrobertjoyceAction.getAllAssociatedDesigns();
Vector<Artifact> activeAssociatedDesigns = pairprogramrobertjoyceAction.getAllActiveAssociatedDesigns();
for (int i = 0; i < associateddesigns.size(); i++) {
Artifact associateddesign = associateddesigns.get(i);
data[index][0] = "AssociatedDesign";
if (associateddesign instanceof Design) {
Design designAssociatedDesign = (Design)associateddesign;
data[index][1] = "Design Artifact " + designAssociatedDesign.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedDesigns.size(); j++) {
Artifact activeAssociatedDesign = activeAssociatedDesigns.get(j);
if ((activeAssociatedDesign instanceof Design) && ((Design)activeAssociatedDesign).getDescription().equals(((Design)associateddesign).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedUnitTests participant:
Vector<Artifact> associatedunittestss = pairprogramrobertjoyceAction.getAllAssociatedUnitTestss();
Vector<Artifact> activeAssociatedUnitTestss = pairprogramrobertjoyceAction.getAllActiveAssociatedUnitTestss();
for (int i = 0; i < associatedunittestss.size(); i++) {
Artifact associatedunittests = associatedunittestss.get(i);
data[index][0] = "AssociatedUnitTests";
if (associatedunittests instanceof UnitTests) {
UnitTests unittestsAssociatedUnitTests = (UnitTests)associatedunittests;
data[index][1] = "UnitTests Artifact " + unittestsAssociatedUnitTests.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedUnitTestss.size(); j++) {
Artifact activeAssociatedUnitTests = activeAssociatedUnitTestss.get(j);
if ((activeAssociatedUnitTests instanceof UnitTests) && ((UnitTests)activeAssociatedUnitTests).getDescription().equals(((UnitTests)associatedunittests).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = pairprogramrobertjoyceAction.getAllProjs();
Vector<Project> activeProjs = pairprogramrobertjoyceAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedUserStories participant:
Vector<Artifact> associateduserstoriess = pairprogramrobertjoyceAction.getAllAssociatedUserStoriess();
Vector<Artifact> activeAssociatedUserStoriess = pairprogramrobertjoyceAction.getAllActiveAssociatedUserStoriess();
for (int i = 0; i < associateduserstoriess.size(); i++) {
Artifact associateduserstories = associateduserstoriess.get(i);
data[index][0] = "AssociatedUserStories";
if (associateduserstories instanceof UserStories) {
UserStories userstoriesAssociatedUserStories = (UserStories)associateduserstories;
data[index][1] = "UserStories Artifact " + userstoriesAssociatedUserStories.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedUserStoriess.size(); j++) {
Artifact activeAssociatedUserStories = activeAssociatedUserStoriess.get(j);
if ((activeAssociatedUserStories instanceof UserStories) && ((UserStories)activeAssociatedUserStories).getName().equals(((UserStories)associateduserstories).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = pairprogramrobertjoyceAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = pairprogramrobertjoyceAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof PairProgramTimothyRedaAction) {
PairProgramTimothyRedaAction pairprogramtimothyredaAction = (PairProgramTimothyRedaAction)action;

 // Timothy participant:
Vector<Employee> timothys = pairprogramtimothyredaAction.getAllTimothys();
Vector<Employee> activeTimothys = pairprogramtimothyredaAction.getAllActiveTimothys();
for (int i = 0; i < timothys.size(); i++) {
Employee timothy = timothys.get(i);
data[index][0] = "Timothy";
if (timothy instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperTimothy = (SoftwareDeveloper)timothy;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperTimothy.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeTimothys.size(); j++) {
Employee activeTimothy = activeTimothys.get(j);
if ((activeTimothy instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeTimothy).getName().equals(((SoftwareDeveloper)timothy).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Reda participant:
Vector<Employee> redas = pairprogramtimothyredaAction.getAllRedas();
Vector<Employee> activeRedas = pairprogramtimothyredaAction.getAllActiveRedas();
for (int i = 0; i < redas.size(); i++) {
Employee reda = redas.get(i);
data[index][0] = "Reda";
if (reda instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperReda = (SoftwareDeveloper)reda;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperReda.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeRedas.size(); j++) {
Employee activeReda = activeRedas.get(j);
if ((activeReda instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeReda).getName().equals(((SoftwareDeveloper)reda).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Code participant:
Vector<Artifact> codes = pairprogramtimothyredaAction.getAllCodes();
Vector<Artifact> activeCodes = pairprogramtimothyredaAction.getAllActiveCodes();
for (int i = 0; i < codes.size(); i++) {
Artifact code = codes.get(i);
data[index][0] = "Code";
if (code instanceof Code) {
Code codeCode = (Code)code;
data[index][1] = "Code Artifact " + codeCode.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodes.size(); j++) {
Artifact activeCode = activeCodes.get(j);
if ((activeCode instanceof Code) && ((Code)activeCode).getDescription().equals(((Code)code).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // CodingStandard participant:
Vector<Tool> codingstandards = pairprogramtimothyredaAction.getAllCodingStandards();
Vector<Tool> activeCodingStandards = pairprogramtimothyredaAction.getAllActiveCodingStandards();
for (int i = 0; i < codingstandards.size(); i++) {
Tool codingstandard = codingstandards.get(i);
data[index][0] = "CodingStandard";
if (codingstandard instanceof CodingStandard) {
CodingStandard codingstandardCodingStandard = (CodingStandard)codingstandard;
data[index][1] = "CodingStandard Tool " + codingstandardCodingStandard.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodingStandards.size(); j++) {
Tool activeCodingStandard = activeCodingStandards.get(j);
if ((activeCodingStandard instanceof CodingStandard) && ((CodingStandard)activeCodingStandard).getDescription().equals(((CodingStandard)codingstandard).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedDesign participant:
Vector<Artifact> associateddesigns = pairprogramtimothyredaAction.getAllAssociatedDesigns();
Vector<Artifact> activeAssociatedDesigns = pairprogramtimothyredaAction.getAllActiveAssociatedDesigns();
for (int i = 0; i < associateddesigns.size(); i++) {
Artifact associateddesign = associateddesigns.get(i);
data[index][0] = "AssociatedDesign";
if (associateddesign instanceof Design) {
Design designAssociatedDesign = (Design)associateddesign;
data[index][1] = "Design Artifact " + designAssociatedDesign.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedDesigns.size(); j++) {
Artifact activeAssociatedDesign = activeAssociatedDesigns.get(j);
if ((activeAssociatedDesign instanceof Design) && ((Design)activeAssociatedDesign).getDescription().equals(((Design)associateddesign).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedUnitTests participant:
Vector<Artifact> associatedunittestss = pairprogramtimothyredaAction.getAllAssociatedUnitTestss();
Vector<Artifact> activeAssociatedUnitTestss = pairprogramtimothyredaAction.getAllActiveAssociatedUnitTestss();
for (int i = 0; i < associatedunittestss.size(); i++) {
Artifact associatedunittests = associatedunittestss.get(i);
data[index][0] = "AssociatedUnitTests";
if (associatedunittests instanceof UnitTests) {
UnitTests unittestsAssociatedUnitTests = (UnitTests)associatedunittests;
data[index][1] = "UnitTests Artifact " + unittestsAssociatedUnitTests.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedUnitTestss.size(); j++) {
Artifact activeAssociatedUnitTests = activeAssociatedUnitTestss.get(j);
if ((activeAssociatedUnitTests instanceof UnitTests) && ((UnitTests)activeAssociatedUnitTests).getDescription().equals(((UnitTests)associatedunittests).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = pairprogramtimothyredaAction.getAllProjs();
Vector<Project> activeProjs = pairprogramtimothyredaAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedUserStories participant:
Vector<Artifact> associateduserstoriess = pairprogramtimothyredaAction.getAllAssociatedUserStoriess();
Vector<Artifact> activeAssociatedUserStoriess = pairprogramtimothyredaAction.getAllActiveAssociatedUserStoriess();
for (int i = 0; i < associateduserstoriess.size(); i++) {
Artifact associateduserstories = associateduserstoriess.get(i);
data[index][0] = "AssociatedUserStories";
if (associateduserstories instanceof UserStories) {
UserStories userstoriesAssociatedUserStories = (UserStories)associateduserstories;
data[index][1] = "UserStories Artifact " + userstoriesAssociatedUserStories.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedUserStoriess.size(); j++) {
Artifact activeAssociatedUserStories = activeAssociatedUserStoriess.get(j);
if ((activeAssociatedUserStories instanceof UserStories) && ((UserStories)activeAssociatedUserStories).getName().equals(((UserStories)associateduserstories).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = pairprogramtimothyredaAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = pairprogramtimothyredaAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof PairProgramPegSigfreidoAction) {
PairProgramPegSigfreidoAction pairprogrampegsigfreidoAction = (PairProgramPegSigfreidoAction)action;

 // Peg participant:
Vector<Employee> pegs = pairprogrampegsigfreidoAction.getAllPegs();
Vector<Employee> activePegs = pairprogrampegsigfreidoAction.getAllActivePegs();
for (int i = 0; i < pegs.size(); i++) {
Employee peg = pegs.get(i);
data[index][0] = "Peg";
if (peg instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperPeg = (SoftwareDeveloper)peg;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperPeg.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activePegs.size(); j++) {
Employee activePeg = activePegs.get(j);
if ((activePeg instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activePeg).getName().equals(((SoftwareDeveloper)peg).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Sigfreido participant:
Vector<Employee> sigfreidos = pairprogrampegsigfreidoAction.getAllSigfreidos();
Vector<Employee> activeSigfreidos = pairprogrampegsigfreidoAction.getAllActiveSigfreidos();
for (int i = 0; i < sigfreidos.size(); i++) {
Employee sigfreido = sigfreidos.get(i);
data[index][0] = "Sigfreido";
if (sigfreido instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperSigfreido = (SoftwareDeveloper)sigfreido;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperSigfreido.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeSigfreidos.size(); j++) {
Employee activeSigfreido = activeSigfreidos.get(j);
if ((activeSigfreido instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeSigfreido).getName().equals(((SoftwareDeveloper)sigfreido).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Code participant:
Vector<Artifact> codes = pairprogrampegsigfreidoAction.getAllCodes();
Vector<Artifact> activeCodes = pairprogrampegsigfreidoAction.getAllActiveCodes();
for (int i = 0; i < codes.size(); i++) {
Artifact code = codes.get(i);
data[index][0] = "Code";
if (code instanceof Code) {
Code codeCode = (Code)code;
data[index][1] = "Code Artifact " + codeCode.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodes.size(); j++) {
Artifact activeCode = activeCodes.get(j);
if ((activeCode instanceof Code) && ((Code)activeCode).getDescription().equals(((Code)code).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // CodingStandard participant:
Vector<Tool> codingstandards = pairprogrampegsigfreidoAction.getAllCodingStandards();
Vector<Tool> activeCodingStandards = pairprogrampegsigfreidoAction.getAllActiveCodingStandards();
for (int i = 0; i < codingstandards.size(); i++) {
Tool codingstandard = codingstandards.get(i);
data[index][0] = "CodingStandard";
if (codingstandard instanceof CodingStandard) {
CodingStandard codingstandardCodingStandard = (CodingStandard)codingstandard;
data[index][1] = "CodingStandard Tool " + codingstandardCodingStandard.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodingStandards.size(); j++) {
Tool activeCodingStandard = activeCodingStandards.get(j);
if ((activeCodingStandard instanceof CodingStandard) && ((CodingStandard)activeCodingStandard).getDescription().equals(((CodingStandard)codingstandard).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedDesign participant:
Vector<Artifact> associateddesigns = pairprogrampegsigfreidoAction.getAllAssociatedDesigns();
Vector<Artifact> activeAssociatedDesigns = pairprogrampegsigfreidoAction.getAllActiveAssociatedDesigns();
for (int i = 0; i < associateddesigns.size(); i++) {
Artifact associateddesign = associateddesigns.get(i);
data[index][0] = "AssociatedDesign";
if (associateddesign instanceof Design) {
Design designAssociatedDesign = (Design)associateddesign;
data[index][1] = "Design Artifact " + designAssociatedDesign.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedDesigns.size(); j++) {
Artifact activeAssociatedDesign = activeAssociatedDesigns.get(j);
if ((activeAssociatedDesign instanceof Design) && ((Design)activeAssociatedDesign).getDescription().equals(((Design)associateddesign).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedUnitTests participant:
Vector<Artifact> associatedunittestss = pairprogrampegsigfreidoAction.getAllAssociatedUnitTestss();
Vector<Artifact> activeAssociatedUnitTestss = pairprogrampegsigfreidoAction.getAllActiveAssociatedUnitTestss();
for (int i = 0; i < associatedunittestss.size(); i++) {
Artifact associatedunittests = associatedunittestss.get(i);
data[index][0] = "AssociatedUnitTests";
if (associatedunittests instanceof UnitTests) {
UnitTests unittestsAssociatedUnitTests = (UnitTests)associatedunittests;
data[index][1] = "UnitTests Artifact " + unittestsAssociatedUnitTests.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedUnitTestss.size(); j++) {
Artifact activeAssociatedUnitTests = activeAssociatedUnitTestss.get(j);
if ((activeAssociatedUnitTests instanceof UnitTests) && ((UnitTests)activeAssociatedUnitTests).getDescription().equals(((UnitTests)associatedunittests).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = pairprogrampegsigfreidoAction.getAllProjs();
Vector<Project> activeProjs = pairprogrampegsigfreidoAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedUserStories participant:
Vector<Artifact> associateduserstoriess = pairprogrampegsigfreidoAction.getAllAssociatedUserStoriess();
Vector<Artifact> activeAssociatedUserStoriess = pairprogrampegsigfreidoAction.getAllActiveAssociatedUserStoriess();
for (int i = 0; i < associateduserstoriess.size(); i++) {
Artifact associateduserstories = associateduserstoriess.get(i);
data[index][0] = "AssociatedUserStories";
if (associateduserstories instanceof UserStories) {
UserStories userstoriesAssociatedUserStories = (UserStories)associateduserstories;
data[index][1] = "UserStories Artifact " + userstoriesAssociatedUserStories.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedUserStoriess.size(); j++) {
Artifact activeAssociatedUserStories = activeAssociatedUserStoriess.get(j);
if ((activeAssociatedUserStories instanceof UserStories) && ((UserStories)activeAssociatedUserStories).getName().equals(((UserStories)associateduserstories).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = pairprogrampegsigfreidoAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = pairprogrampegsigfreidoAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof UnitTestingAndFixingAction) {
UnitTestingAndFixingAction unittestingandfixingAction = (UnitTestingAndFixingAction)action;

 // Emp participant:
Vector<Employee> emps = unittestingandfixingAction.getAllEmps();
Vector<Employee> activeEmps = unittestingandfixingAction.getAllActiveEmps();
for (int i = 0; i < emps.size(); i++) {
Employee emp = emps.get(i);
data[index][0] = "Emp";
if (emp instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperEmp = (SoftwareDeveloper)emp;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperEmp.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeEmps.size(); j++) {
Employee activeEmp = activeEmps.get(j);
if ((activeEmp instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeEmp).getName().equals(((SoftwareDeveloper)emp).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Code participant:
Vector<Artifact> codes = unittestingandfixingAction.getAllCodes();
Vector<Artifact> activeCodes = unittestingandfixingAction.getAllActiveCodes();
for (int i = 0; i < codes.size(); i++) {
Artifact code = codes.get(i);
data[index][0] = "Code";
if (code instanceof Code) {
Code codeCode = (Code)code;
data[index][1] = "Code Artifact " + codeCode.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodes.size(); j++) {
Artifact activeCode = activeCodes.get(j);
if ((activeCode instanceof Code) && ((Code)activeCode).getDescription().equals(((Code)code).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // UnitTests participant:
Vector<Artifact> unittestss = unittestingandfixingAction.getAllUnitTestss();
Vector<Artifact> activeUnitTestss = unittestingandfixingAction.getAllActiveUnitTestss();
for (int i = 0; i < unittestss.size(); i++) {
Artifact unittests = unittestss.get(i);
data[index][0] = "UnitTests";
if (unittests instanceof UnitTests) {
UnitTests unittestsUnitTests = (UnitTests)unittests;
data[index][1] = "UnitTests Artifact " + unittestsUnitTests.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeUnitTestss.size(); j++) {
Artifact activeUnitTests = activeUnitTestss.get(j);
if ((activeUnitTests instanceof UnitTests) && ((UnitTests)activeUnitTests).getDescription().equals(((UnitTests)unittests).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // TestingTool participant:
Vector<Tool> testingtools = unittestingandfixingAction.getAllTestingTools();
Vector<Tool> activeTestingTools = unittestingandfixingAction.getAllActiveTestingTools();
for (int i = 0; i < testingtools.size(); i++) {
Tool testingtool = testingtools.get(i);
data[index][0] = "TestingTool";
if (testingtool instanceof UnitTestingFramework) {
UnitTestingFramework unittestingframeworkTestingTool = (UnitTestingFramework)testingtool;
data[index][1] = "UnitTestingFramework Tool " + unittestingframeworkTestingTool.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeTestingTools.size(); j++) {
Tool activeTestingTool = activeTestingTools.get(j);
if ((activeTestingTool instanceof UnitTestingFramework) && ((UnitTestingFramework)activeTestingTool).getDescription().equals(((UnitTestingFramework)testingtool).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = unittestingandfixingAction.getAllProjs();
Vector<Project> activeProjs = unittestingandfixingAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AcceptanceTests participant:
Vector<Artifact> acceptancetestss = unittestingandfixingAction.getAllAcceptanceTestss();
Vector<Artifact> activeAcceptanceTestss = unittestingandfixingAction.getAllActiveAcceptanceTestss();
for (int i = 0; i < acceptancetestss.size(); i++) {
Artifact acceptancetests = acceptancetestss.get(i);
data[index][0] = "AcceptanceTests";
if (acceptancetests instanceof AcceptanceTests) {
AcceptanceTests acceptancetestsAcceptanceTests = (AcceptanceTests)acceptancetests;
data[index][1] = "AcceptanceTests Artifact " + acceptancetestsAcceptanceTests.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAcceptanceTestss.size(); j++) {
Artifact activeAcceptanceTests = activeAcceptanceTestss.get(j);
if ((activeAcceptanceTests instanceof AcceptanceTests) && ((AcceptanceTests)activeAcceptanceTests).getDescription().equals(((AcceptanceTests)acceptancetests).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = unittestingandfixingAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = unittestingandfixingAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof RefactorAction) {
RefactorAction refactorAction = (RefactorAction)action;

 // Emp participant:
Vector<Employee> emps = refactorAction.getAllEmps();
Vector<Employee> activeEmps = refactorAction.getAllActiveEmps();
for (int i = 0; i < emps.size(); i++) {
Employee emp = emps.get(i);
data[index][0] = "Emp";
if (emp instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperEmp = (SoftwareDeveloper)emp;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperEmp.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeEmps.size(); j++) {
Employee activeEmp = activeEmps.get(j);
if ((activeEmp instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeEmp).getName().equals(((SoftwareDeveloper)emp).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Code participant:
Vector<Artifact> codes = refactorAction.getAllCodes();
Vector<Artifact> activeCodes = refactorAction.getAllActiveCodes();
for (int i = 0; i < codes.size(); i++) {
Artifact code = codes.get(i);
data[index][0] = "Code";
if (code instanceof Code) {
Code codeCode = (Code)code;
data[index][1] = "Code Artifact " + codeCode.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodes.size(); j++) {
Artifact activeCode = activeCodes.get(j);
if ((activeCode instanceof Code) && ((Code)activeCode).getDescription().equals(((Code)code).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = refactorAction.getAllProjs();
Vector<Project> activeProjs = refactorAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // RefactoringTool participant:
Vector<Tool> refactoringtools = refactorAction.getAllRefactoringTools();
Vector<Tool> activeRefactoringTools = refactorAction.getAllActiveRefactoringTools();
for (int i = 0; i < refactoringtools.size(); i++) {
Tool refactoringtool = refactoringtools.get(i);
data[index][0] = "RefactoringTool";
if (refactoringtool instanceof RefactoringTool) {
RefactoringTool refactoringtoolRefactoringTool = (RefactoringTool)refactoringtool;
data[index][1] = "RefactoringTool Tool " + refactoringtoolRefactoringTool.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeRefactoringTools.size(); j++) {
Tool activeRefactoringTool = activeRefactoringTools.get(j);
if ((activeRefactoringTool instanceof RefactoringTool) && ((RefactoringTool)activeRefactoringTool).getDescription().equals(((RefactoringTool)refactoringtool).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = refactorAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = refactorAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof IntegrateRobertJoyceAction) {
IntegrateRobertJoyceAction integraterobertjoyceAction = (IntegrateRobertJoyceAction)action;

 // Robert participant:
Vector<Employee> roberts = integraterobertjoyceAction.getAllRoberts();
Vector<Employee> activeRoberts = integraterobertjoyceAction.getAllActiveRoberts();
for (int i = 0; i < roberts.size(); i++) {
Employee robert = roberts.get(i);
data[index][0] = "Robert";
if (robert instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperRobert = (SoftwareDeveloper)robert;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperRobert.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeRoberts.size(); j++) {
Employee activeRobert = activeRoberts.get(j);
if ((activeRobert instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeRobert).getName().equals(((SoftwareDeveloper)robert).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Joyce participant:
Vector<Employee> joyces = integraterobertjoyceAction.getAllJoyces();
Vector<Employee> activeJoyces = integraterobertjoyceAction.getAllActiveJoyces();
for (int i = 0; i < joyces.size(); i++) {
Employee joyce = joyces.get(i);
data[index][0] = "Joyce";
if (joyce instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperJoyce = (SoftwareDeveloper)joyce;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperJoyce.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeJoyces.size(); j++) {
Employee activeJoyce = activeJoyces.get(j);
if ((activeJoyce instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeJoyce).getName().equals(((SoftwareDeveloper)joyce).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Code participant:
Vector<Artifact> codes = integraterobertjoyceAction.getAllCodes();
Vector<Artifact> activeCodes = integraterobertjoyceAction.getAllActiveCodes();
for (int i = 0; i < codes.size(); i++) {
Artifact code = codes.get(i);
data[index][0] = "Code";
if (code instanceof Code) {
Code codeCode = (Code)code;
data[index][1] = "Code Artifact " + codeCode.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodes.size(); j++) {
Artifact activeCode = activeCodes.get(j);
if ((activeCode instanceof Code) && ((Code)activeCode).getDescription().equals(((Code)code).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = integraterobertjoyceAction.getAllProjs();
Vector<Project> activeProjs = integraterobertjoyceAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedUserStories participant:
Vector<Artifact> associateduserstoriess = integraterobertjoyceAction.getAllAssociatedUserStoriess();
Vector<Artifact> activeAssociatedUserStoriess = integraterobertjoyceAction.getAllActiveAssociatedUserStoriess();
for (int i = 0; i < associateduserstoriess.size(); i++) {
Artifact associateduserstories = associateduserstoriess.get(i);
data[index][0] = "AssociatedUserStories";
if (associateduserstories instanceof UserStories) {
UserStories userstoriesAssociatedUserStories = (UserStories)associateduserstories;
data[index][1] = "UserStories Artifact " + userstoriesAssociatedUserStories.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedUserStoriess.size(); j++) {
Artifact activeAssociatedUserStories = activeAssociatedUserStoriess.get(j);
if ((activeAssociatedUserStories instanceof UserStories) && ((UserStories)activeAssociatedUserStories).getName().equals(((UserStories)associateduserstories).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = integraterobertjoyceAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = integraterobertjoyceAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof IntegrateTimothyRedaAction) {
IntegrateTimothyRedaAction integratetimothyredaAction = (IntegrateTimothyRedaAction)action;

 // Timothy participant:
Vector<Employee> timothys = integratetimothyredaAction.getAllTimothys();
Vector<Employee> activeTimothys = integratetimothyredaAction.getAllActiveTimothys();
for (int i = 0; i < timothys.size(); i++) {
Employee timothy = timothys.get(i);
data[index][0] = "Timothy";
if (timothy instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperTimothy = (SoftwareDeveloper)timothy;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperTimothy.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeTimothys.size(); j++) {
Employee activeTimothy = activeTimothys.get(j);
if ((activeTimothy instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeTimothy).getName().equals(((SoftwareDeveloper)timothy).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Reda participant:
Vector<Employee> redas = integratetimothyredaAction.getAllRedas();
Vector<Employee> activeRedas = integratetimothyredaAction.getAllActiveRedas();
for (int i = 0; i < redas.size(); i++) {
Employee reda = redas.get(i);
data[index][0] = "Reda";
if (reda instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperReda = (SoftwareDeveloper)reda;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperReda.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeRedas.size(); j++) {
Employee activeReda = activeRedas.get(j);
if ((activeReda instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeReda).getName().equals(((SoftwareDeveloper)reda).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Code participant:
Vector<Artifact> codes = integratetimothyredaAction.getAllCodes();
Vector<Artifact> activeCodes = integratetimothyredaAction.getAllActiveCodes();
for (int i = 0; i < codes.size(); i++) {
Artifact code = codes.get(i);
data[index][0] = "Code";
if (code instanceof Code) {
Code codeCode = (Code)code;
data[index][1] = "Code Artifact " + codeCode.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodes.size(); j++) {
Artifact activeCode = activeCodes.get(j);
if ((activeCode instanceof Code) && ((Code)activeCode).getDescription().equals(((Code)code).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = integratetimothyredaAction.getAllProjs();
Vector<Project> activeProjs = integratetimothyredaAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedUserStories participant:
Vector<Artifact> associateduserstoriess = integratetimothyredaAction.getAllAssociatedUserStoriess();
Vector<Artifact> activeAssociatedUserStoriess = integratetimothyredaAction.getAllActiveAssociatedUserStoriess();
for (int i = 0; i < associateduserstoriess.size(); i++) {
Artifact associateduserstories = associateduserstoriess.get(i);
data[index][0] = "AssociatedUserStories";
if (associateduserstories instanceof UserStories) {
UserStories userstoriesAssociatedUserStories = (UserStories)associateduserstories;
data[index][1] = "UserStories Artifact " + userstoriesAssociatedUserStories.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedUserStoriess.size(); j++) {
Artifact activeAssociatedUserStories = activeAssociatedUserStoriess.get(j);
if ((activeAssociatedUserStories instanceof UserStories) && ((UserStories)activeAssociatedUserStories).getName().equals(((UserStories)associateduserstories).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = integratetimothyredaAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = integratetimothyredaAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof IntegratePegSigfreidoAction) {
IntegratePegSigfreidoAction integratepegsigfreidoAction = (IntegratePegSigfreidoAction)action;

 // Peg participant:
Vector<Employee> pegs = integratepegsigfreidoAction.getAllPegs();
Vector<Employee> activePegs = integratepegsigfreidoAction.getAllActivePegs();
for (int i = 0; i < pegs.size(); i++) {
Employee peg = pegs.get(i);
data[index][0] = "Peg";
if (peg instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperPeg = (SoftwareDeveloper)peg;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperPeg.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activePegs.size(); j++) {
Employee activePeg = activePegs.get(j);
if ((activePeg instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activePeg).getName().equals(((SoftwareDeveloper)peg).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Sigfreido participant:
Vector<Employee> sigfreidos = integratepegsigfreidoAction.getAllSigfreidos();
Vector<Employee> activeSigfreidos = integratepegsigfreidoAction.getAllActiveSigfreidos();
for (int i = 0; i < sigfreidos.size(); i++) {
Employee sigfreido = sigfreidos.get(i);
data[index][0] = "Sigfreido";
if (sigfreido instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperSigfreido = (SoftwareDeveloper)sigfreido;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperSigfreido.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeSigfreidos.size(); j++) {
Employee activeSigfreido = activeSigfreidos.get(j);
if ((activeSigfreido instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeSigfreido).getName().equals(((SoftwareDeveloper)sigfreido).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Code participant:
Vector<Artifact> codes = integratepegsigfreidoAction.getAllCodes();
Vector<Artifact> activeCodes = integratepegsigfreidoAction.getAllActiveCodes();
for (int i = 0; i < codes.size(); i++) {
Artifact code = codes.get(i);
data[index][0] = "Code";
if (code instanceof Code) {
Code codeCode = (Code)code;
data[index][1] = "Code Artifact " + codeCode.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodes.size(); j++) {
Artifact activeCode = activeCodes.get(j);
if ((activeCode instanceof Code) && ((Code)activeCode).getDescription().equals(((Code)code).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = integratepegsigfreidoAction.getAllProjs();
Vector<Project> activeProjs = integratepegsigfreidoAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedUserStories participant:
Vector<Artifact> associateduserstoriess = integratepegsigfreidoAction.getAllAssociatedUserStoriess();
Vector<Artifact> activeAssociatedUserStoriess = integratepegsigfreidoAction.getAllActiveAssociatedUserStoriess();
for (int i = 0; i < associateduserstoriess.size(); i++) {
Artifact associateduserstories = associateduserstoriess.get(i);
data[index][0] = "AssociatedUserStories";
if (associateduserstories instanceof UserStories) {
UserStories userstoriesAssociatedUserStories = (UserStories)associateduserstories;
data[index][1] = "UserStories Artifact " + userstoriesAssociatedUserStories.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedUserStoriess.size(); j++) {
Artifact activeAssociatedUserStories = activeAssociatedUserStoriess.get(j);
if ((activeAssociatedUserStories instanceof UserStories) && ((UserStories)activeAssociatedUserStories).getName().equals(((UserStories)associateduserstories).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = integratepegsigfreidoAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = integratepegsigfreidoAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof IntegrateAction) {
IntegrateAction integrateAction = (IntegrateAction)action;

 // Emp participant:
Vector<Employee> emps = integrateAction.getAllEmps();
Vector<Employee> activeEmps = integrateAction.getAllActiveEmps();
for (int i = 0; i < emps.size(); i++) {
Employee emp = emps.get(i);
data[index][0] = "Emp";
if (emp instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperEmp = (SoftwareDeveloper)emp;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperEmp.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeEmps.size(); j++) {
Employee activeEmp = activeEmps.get(j);
if ((activeEmp instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeEmp).getName().equals(((SoftwareDeveloper)emp).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Code participant:
Vector<Artifact> codes = integrateAction.getAllCodes();
Vector<Artifact> activeCodes = integrateAction.getAllActiveCodes();
for (int i = 0; i < codes.size(); i++) {
Artifact code = codes.get(i);
data[index][0] = "Code";
if (code instanceof Code) {
Code codeCode = (Code)code;
data[index][1] = "Code Artifact " + codeCode.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodes.size(); j++) {
Artifact activeCode = activeCodes.get(j);
if ((activeCode instanceof Code) && ((Code)activeCode).getDescription().equals(((Code)code).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = integrateAction.getAllProjs();
Vector<Project> activeProjs = integrateAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AssociatedUserStories participant:
Vector<Artifact> associateduserstoriess = integrateAction.getAllAssociatedUserStoriess();
Vector<Artifact> activeAssociatedUserStoriess = integrateAction.getAllActiveAssociatedUserStoriess();
for (int i = 0; i < associateduserstoriess.size(); i++) {
Artifact associateduserstories = associateduserstoriess.get(i);
data[index][0] = "AssociatedUserStories";
if (associateduserstories instanceof UserStories) {
UserStories userstoriesAssociatedUserStories = (UserStories)associateduserstories;
data[index][1] = "UserStories Artifact " + userstoriesAssociatedUserStories.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAssociatedUserStoriess.size(); j++) {
Artifact activeAssociatedUserStories = activeAssociatedUserStoriess.get(j);
if ((activeAssociatedUserStories instanceof UserStories) && ((UserStories)activeAssociatedUserStories).getName().equals(((UserStories)associateduserstories).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = integrateAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = integrateAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof AcceptanceTestingAction) {
AcceptanceTestingAction acceptancetestingAction = (AcceptanceTestingAction)action;

 // Emp participant:
Vector<Employee> emps = acceptancetestingAction.getAllEmps();
Vector<Employee> activeEmps = acceptancetestingAction.getAllActiveEmps();
for (int i = 0; i < emps.size(); i++) {
Employee emp = emps.get(i);
data[index][0] = "Emp";
if (emp instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperEmp = (SoftwareDeveloper)emp;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperEmp.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeEmps.size(); j++) {
Employee activeEmp = activeEmps.get(j);
if ((activeEmp instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeEmp).getName().equals(((SoftwareDeveloper)emp).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Cust participant:
Vector<Customer> custs = acceptancetestingAction.getAllCusts();
Vector<Customer> activeCusts = acceptancetestingAction.getAllActiveCusts();
for (int i = 0; i < custs.size(); i++) {
Customer cust = custs.get(i);
data[index][0] = "Cust";
if (cust instanceof CustomerRepresentative) {
CustomerRepresentative customerrepresentativeCust = (CustomerRepresentative)cust;
data[index][1] = "CustomerRepresentative Customer " + customerrepresentativeCust.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCusts.size(); j++) {
Customer activeCust = activeCusts.get(j);
if ((activeCust instanceof CustomerRepresentative) && ((CustomerRepresentative)activeCust).getName().equals(((CustomerRepresentative)cust).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AcceptanceTestCases participant:
Vector<Artifact> acceptancetestcasess = acceptancetestingAction.getAllAcceptanceTestCasess();
Vector<Artifact> activeAcceptanceTestCasess = acceptancetestingAction.getAllActiveAcceptanceTestCasess();
for (int i = 0; i < acceptancetestcasess.size(); i++) {
Artifact acceptancetestcases = acceptancetestcasess.get(i);
data[index][0] = "AcceptanceTestCases";
if (acceptancetestcases instanceof AcceptanceTests) {
AcceptanceTests acceptancetestsAcceptanceTestCases = (AcceptanceTests)acceptancetestcases;
data[index][1] = "AcceptanceTests Artifact " + acceptancetestsAcceptanceTestCases.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAcceptanceTestCasess.size(); j++) {
Artifact activeAcceptanceTestCases = activeAcceptanceTestCasess.get(j);
if ((activeAcceptanceTestCases instanceof AcceptanceTests) && ((AcceptanceTests)activeAcceptanceTestCases).getDescription().equals(((AcceptanceTests)acceptancetestcases).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // UserStories participant:
Vector<Artifact> userstoriess = acceptancetestingAction.getAllUserStoriess();
Vector<Artifact> activeUserStoriess = acceptancetestingAction.getAllActiveUserStoriess();
for (int i = 0; i < userstoriess.size(); i++) {
Artifact userstories = userstoriess.get(i);
data[index][0] = "UserStories";
if (userstories instanceof UserStories) {
UserStories userstoriesUserStories = (UserStories)userstories;
data[index][1] = "UserStories Artifact " + userstoriesUserStories.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeUserStoriess.size(); j++) {
Artifact activeUserStories = activeUserStoriess.get(j);
if ((activeUserStories instanceof UserStories) && ((UserStories)activeUserStories).getName().equals(((UserStories)userstories).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Code participant:
Vector<Artifact> codes = acceptancetestingAction.getAllCodes();
Vector<Artifact> activeCodes = acceptancetestingAction.getAllActiveCodes();
for (int i = 0; i < codes.size(); i++) {
Artifact code = codes.get(i);
data[index][0] = "Code";
if (code instanceof Code) {
Code codeCode = (Code)code;
data[index][1] = "Code Artifact " + codeCode.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodes.size(); j++) {
Artifact activeCode = activeCodes.get(j);
if ((activeCode instanceof Code) && ((Code)activeCode).getDescription().equals(((Code)code).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = acceptancetestingAction.getAllProjs();
Vector<Project> activeProjs = acceptancetestingAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = acceptancetestingAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = acceptancetestingAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof ReleaseCodeAndEndIterationAction) {
ReleaseCodeAndEndIterationAction releasecodeandenditerationAction = (ReleaseCodeAndEndIterationAction)action;

 // Emp participant:
Vector<Employee> emps = releasecodeandenditerationAction.getAllEmps();
Vector<Employee> activeEmps = releasecodeandenditerationAction.getAllActiveEmps();
for (int i = 0; i < emps.size(); i++) {
Employee emp = emps.get(i);
data[index][0] = "Emp";
if (emp instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperEmp = (SoftwareDeveloper)emp;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperEmp.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeEmps.size(); j++) {
Employee activeEmp = activeEmps.get(j);
if ((activeEmp instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeEmp).getName().equals(((SoftwareDeveloper)emp).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Code participant:
Vector<Artifact> codes = releasecodeandenditerationAction.getAllCodes();
Vector<Artifact> activeCodes = releasecodeandenditerationAction.getAllActiveCodes();
for (int i = 0; i < codes.size(); i++) {
Artifact code = codes.get(i);
data[index][0] = "Code";
if (code instanceof Code) {
Code codeCode = (Code)code;
data[index][1] = "Code Artifact " + codeCode.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCodes.size(); j++) {
Artifact activeCode = activeCodes.get(j);
if ((activeCode instanceof Code) && ((Code)activeCode).getDescription().equals(((Code)code).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = releasecodeandenditerationAction.getAllProjs();
Vector<Project> activeProjs = releasecodeandenditerationAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AcceptanceTests participant:
Vector<Artifact> acceptancetestss = releasecodeandenditerationAction.getAllAcceptanceTestss();
Vector<Artifact> activeAcceptanceTestss = releasecodeandenditerationAction.getAllActiveAcceptanceTestss();
for (int i = 0; i < acceptancetestss.size(); i++) {
Artifact acceptancetests = acceptancetestss.get(i);
data[index][0] = "AcceptanceTests";
if (acceptancetests instanceof AcceptanceTests) {
AcceptanceTests acceptancetestsAcceptanceTests = (AcceptanceTests)acceptancetests;
data[index][1] = "AcceptanceTests Artifact " + acceptancetestsAcceptanceTests.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAcceptanceTestss.size(); j++) {
Artifact activeAcceptanceTests = activeAcceptanceTestss.get(j);
if ((activeAcceptanceTests instanceof AcceptanceTests) && ((AcceptanceTests)activeAcceptanceTests).getDescription().equals(((AcceptanceTests)acceptancetests).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = releasecodeandenditerationAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = releasecodeandenditerationAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // UserStories participant:
Vector<Artifact> userstoriess = releasecodeandenditerationAction.getAllUserStoriess();
Vector<Artifact> activeUserStoriess = releasecodeandenditerationAction.getAllActiveUserStoriess();
for (int i = 0; i < userstoriess.size(); i++) {
Artifact userstories = userstoriess.get(i);
data[index][0] = "UserStories";
if (userstories instanceof UserStories) {
UserStories userstoriesUserStories = (UserStories)userstories;
data[index][1] = "UserStories Artifact " + userstoriesUserStories.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeUserStoriess.size(); j++) {
Artifact activeUserStories = activeUserStoriess.get(j);
if ((activeUserStories instanceof UserStories) && ((UserStories)activeUserStories).getName().equals(((UserStories)userstories).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof RequireReleasePlanDoOverAction) {
RequireReleasePlanDoOverAction requirereleaseplandooverAction = (RequireReleasePlanDoOverAction)action;

 // Emp participant:
Vector<Employee> emps = requirereleaseplandooverAction.getAllEmps();
Vector<Employee> activeEmps = requirereleaseplandooverAction.getAllActiveEmps();
for (int i = 0; i < emps.size(); i++) {
Employee emp = emps.get(i);
data[index][0] = "Emp";
if (emp instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperEmp = (SoftwareDeveloper)emp;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperEmp.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeEmps.size(); j++) {
Employee activeEmp = activeEmps.get(j);
if ((activeEmp instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeEmp).getName().equals(((SoftwareDeveloper)emp).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = requirereleaseplandooverAction.getAllProjs();
Vector<Project> activeProjs = requirereleaseplandooverAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // ReleasePlan participant:
Vector<Artifact> releaseplans = requirereleaseplandooverAction.getAllReleasePlans();
Vector<Artifact> activeReleasePlans = requirereleaseplandooverAction.getAllActiveReleasePlans();
for (int i = 0; i < releaseplans.size(); i++) {
Artifact releaseplan = releaseplans.get(i);
data[index][0] = "ReleasePlan";
if (releaseplan instanceof ReleasePlan) {
ReleasePlan releaseplanReleasePlan = (ReleasePlan)releaseplan;
data[index][1] = "ReleasePlan Artifact " + releaseplanReleasePlan.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeReleasePlans.size(); j++) {
Artifact activeReleasePlan = activeReleasePlans.get(j);
if ((activeReleasePlan instanceof ReleasePlan) && ((ReleasePlan)activeReleasePlan).getName().equals(((ReleasePlan)releaseplan).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // CustRep participant:
Vector<Employee> custreps = requirereleaseplandooverAction.getAllCustReps();
Vector<Employee> activeCustReps = requirereleaseplandooverAction.getAllActiveCustReps();
for (int i = 0; i < custreps.size(); i++) {
Employee custrep = custreps.get(i);
data[index][0] = "CustRep";
if (custrep instanceof CustomerRep) {
CustomerRep customerrepCustRep = (CustomerRep)custrep;
data[index][1] = "CustomerRep Employee " + customerrepCustRep.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCustReps.size(); j++) {
Employee activeCustRep = activeCustReps.get(j);
if ((activeCustRep instanceof CustomerRep) && ((CustomerRep)activeCustRep).getName().equals(((CustomerRep)custrep).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof CustomerComplainsAction) {
CustomerComplainsAction customercomplainsAction = (CustomerComplainsAction)action;

 // CustRep participant:
Vector<Employee> custreps = customercomplainsAction.getAllCustReps();
Vector<Employee> activeCustReps = customercomplainsAction.getAllActiveCustReps();
for (int i = 0; i < custreps.size(); i++) {
Employee custrep = custreps.get(i);
data[index][0] = "CustRep";
if (custrep instanceof CustomerRep) {
CustomerRep customerrepCustRep = (CustomerRep)custrep;
data[index][1] = "CustomerRep Employee " + customerrepCustRep.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeCustReps.size(); j++) {
Employee activeCustRep = activeCustReps.get(j);
if ((activeCustRep instanceof CustomerRep) && ((CustomerRep)activeCustRep).getName().equals(((CustomerRep)custrep).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = customercomplainsAction.getAllProjs();
Vector<Project> activeProjs = customercomplainsAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof AllEmployeesIdleAction) {
AllEmployeesIdleAction allemployeesidleAction = (AllEmployeesIdleAction)action;

 // Emp participant:
Vector<Employee> emps = allemployeesidleAction.getAllEmps();
Vector<Employee> activeEmps = allemployeesidleAction.getAllActiveEmps();
for (int i = 0; i < emps.size(); i++) {
Employee emp = emps.get(i);
data[index][0] = "Emp";
if (emp instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperEmp = (SoftwareDeveloper)emp;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperEmp.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeEmps.size(); j++) {
Employee activeEmp = activeEmps.get(j);
if ((activeEmp instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeEmp).getName().equals(((SoftwareDeveloper)emp).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = allemployeesidleAction.getAllProjs();
Vector<Project> activeProjs = allemployeesidleAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof DeliverFinalProductToCustomerAction) {
DeliverFinalProductToCustomerAction deliverfinalproducttocustomerAction = (DeliverFinalProductToCustomerAction)action;

 // Emp participant:
Vector<Employee> emps = deliverfinalproducttocustomerAction.getAllEmps();
Vector<Employee> activeEmps = deliverfinalproducttocustomerAction.getAllActiveEmps();
for (int i = 0; i < emps.size(); i++) {
Employee emp = emps.get(i);
data[index][0] = "Emp";
if (emp instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperEmp = (SoftwareDeveloper)emp;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperEmp.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeEmps.size(); j++) {
Employee activeEmp = activeEmps.get(j);
if ((activeEmp instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeEmp).getName().equals(((SoftwareDeveloper)emp).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
if (emp instanceof Manager) {
Manager managerEmp = (Manager)emp;
data[index][1] = "Manager Employee " + managerEmp.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeEmps.size(); j++) {
Employee activeEmp = activeEmps.get(j);
if ((activeEmp instanceof Manager) && ((Manager)activeEmp).getName().equals(((Manager)emp).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
if (emp instanceof CustomerRep) {
CustomerRep customerrepEmp = (CustomerRep)emp;
data[index][1] = "CustomerRep Employee " + customerrepEmp.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeEmps.size(); j++) {
Employee activeEmp = activeEmps.get(j);
if ((activeEmp instanceof CustomerRep) && ((CustomerRep)activeEmp).getName().equals(((CustomerRep)emp).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = deliverfinalproducttocustomerAction.getAllProjs();
Vector<Project> activeProjs = deliverfinalproducttocustomerAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // UserStories participant:
Vector<Artifact> userstoriess = deliverfinalproducttocustomerAction.getAllUserStoriess();
Vector<Artifact> activeUserStoriess = deliverfinalproducttocustomerAction.getAllActiveUserStoriess();
for (int i = 0; i < userstoriess.size(); i++) {
Artifact userstories = userstoriess.get(i);
data[index][0] = "UserStories";
if (userstories instanceof UserStories) {
UserStories userstoriesUserStories = (UserStories)userstories;
data[index][1] = "UserStories Artifact " + userstoriesUserStories.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeUserStoriess.size(); j++) {
Artifact activeUserStories = activeUserStoriess.get(j);
if ((activeUserStories instanceof UserStories) && ((UserStories)activeUserStories).getName().equals(((UserStories)userstories).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // AcceptanceTests participant:
Vector<Artifact> acceptancetestss = deliverfinalproducttocustomerAction.getAllAcceptanceTestss();
Vector<Artifact> activeAcceptanceTestss = deliverfinalproducttocustomerAction.getAllActiveAcceptanceTestss();
for (int i = 0; i < acceptancetestss.size(); i++) {
Artifact acceptancetests = acceptancetestss.get(i);
data[index][0] = "AcceptanceTests";
if (acceptancetests instanceof AcceptanceTests) {
AcceptanceTests acceptancetestsAcceptanceTests = (AcceptanceTests)acceptancetests;
data[index][1] = "AcceptanceTests Artifact " + acceptancetestsAcceptanceTests.getDescription();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeAcceptanceTestss.size(); j++) {
Artifact activeAcceptanceTests = activeAcceptanceTestss.get(j);
if ((activeAcceptanceTests instanceof AcceptanceTests) && ((AcceptanceTests)activeAcceptanceTests).getDescription().equals(((AcceptanceTests)acceptancetests).getDescription())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
else if (action instanceof GameOverAction) {
GameOverAction gameoverAction = (GameOverAction)action;

 // Emp participant:
Vector<Employee> emps = gameoverAction.getAllEmps();
Vector<Employee> activeEmps = gameoverAction.getAllActiveEmps();
for (int i = 0; i < emps.size(); i++) {
Employee emp = emps.get(i);
data[index][0] = "Emp";
if (emp instanceof SoftwareDeveloper) {
SoftwareDeveloper softwaredeveloperEmp = (SoftwareDeveloper)emp;
data[index][1] = "SoftwareDeveloper Employee " + softwaredeveloperEmp.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeEmps.size(); j++) {
Employee activeEmp = activeEmps.get(j);
if ((activeEmp instanceof SoftwareDeveloper) && ((SoftwareDeveloper)activeEmp).getName().equals(((SoftwareDeveloper)emp).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // Proj participant:
Vector<Project> projs = gameoverAction.getAllProjs();
Vector<Project> activeProjs = gameoverAction.getAllActiveProjs();
for (int i = 0; i < projs.size(); i++) {
Project proj = projs.get(i);
data[index][0] = "Proj";
if (proj instanceof TheProject) {
TheProject theprojectProj = (TheProject)proj;
data[index][1] = "TheProject Project " + theprojectProj.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeProjs.size(); j++) {
Project activeProj = activeProjs.get(j);
if ((activeProj instanceof TheProject) && ((TheProject)activeProj).getName().equals(((TheProject)proj).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
 // UserStories participant:
Vector<Artifact> userstoriess = gameoverAction.getAllUserStoriess();
Vector<Artifact> activeUserStoriess = gameoverAction.getAllActiveUserStoriess();
for (int i = 0; i < userstoriess.size(); i++) {
Artifact userstories = userstoriess.get(i);
data[index][0] = "UserStories";
if (userstories instanceof UserStories) {
UserStories userstoriesUserStories = (UserStories)userstories;
data[index][1] = "UserStories Artifact " + userstoriesUserStories.getName();

// find out whether it's active or not:
boolean active = false;
for (int j = 0; j < activeUserStoriess.size(); j++) {
Artifact activeUserStories = activeUserStoriess.get(j);
if ((activeUserStories instanceof UserStories) && ((UserStories)activeUserStories).getName().equals(((UserStories)userstories).getName())) {
active = true;
break;
}
}
data[index][2] = active ? "Active" : "Inactive";
}
index++;
}
}
return new JTable(data, columnNames);
}

// refreshes the description area with the selected trigger/destroyer
private void refreshDescriptionArea(int trigOrDest) {
String name = trigOrDest == TRIGGER ? (String) triggerList.getSelectedValue() : (String) destroyerList.getSelectedValue();
if (name != null) {
String text = "";
if (action instanceof CreateUserStoriesAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.CREATEUSERSTORIES_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.CREATEUSERSTORIES_AUTODEST;
}
}
else if (action instanceof ReleasePlanningMeetingAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.RELEASEPLANNINGMEETING_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.RELEASEPLANNINGMEETING_AUTODEST;
}
}
else if (action instanceof StartIterationAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.STARTITERATION_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("TimedDest")) {
text = DestroyerDescriptions.STARTITERATION_TIMEDDEST;
}
}
else if (action instanceof IterationPlanningMeetingAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.ITERATIONPLANNINGMEETING_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("CustInvolvedReleasePlanningMtg")) {
text = DestroyerDescriptions.ITERATIONPLANNINGMEETING_CUSTINVOLVEDRELEASEPLANNINGMTG;
}
else if (trigOrDest == DESTROYER && name.equals("CustNotInvolvedReleasePlanMtg")) {
text = DestroyerDescriptions.ITERATIONPLANNINGMEETING_CUSTNOTINVOLVEDRELEASEPLANMTG;
}
}
else if (action instanceof ChooseUserStoriesForIterationAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("AutoTrig")) {
text = TriggerDescriptions.CHOOSEUSERSTORIESFORITERATION_AUTOTRIG;
}
if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.CHOOSEUSERSTORIESFORITERATION_AUTODEST;
}
}
else if (action instanceof CreateProgrammingTasksAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("AutoTrig")) {
text = TriggerDescriptions.CREATEPROGRAMMINGTASKS_AUTOTRIG;
}
if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.CREATEPROGRAMMINGTASKS_AUTODEST;
}
}
else if (action instanceof CreateAcceptanceTestsAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.CREATEACCEPTANCETESTS_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.CREATEACCEPTANCETESTS_AUTODEST;
}
}
else if (action instanceof DesignAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.DESIGN_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("UserDest")) {
text = DestroyerDescriptions.DESIGN_USERDEST;
}
else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.DESIGN_AUTODEST;
}
}
else if (action instanceof CreateUnitTestsAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.CREATEUNITTESTS_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.CREATEUNITTESTS_AUTODEST;
}
else if (trigOrDest == DESTROYER && name.equals("UserDest")) {
text = DestroyerDescriptions.CREATEUNITTESTS_USERDEST;
}
}
else if (action instanceof LearnCodingStandardAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.LEARNCODINGSTANDARD_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("UserDest")) {
text = DestroyerDescriptions.LEARNCODINGSTANDARD_USERDEST;
}
else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.LEARNCODINGSTANDARD_AUTODEST;
}
}
else if (action instanceof ProgramAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.PROGRAM_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.PROGRAM_AUTODEST;
}
else if (trigOrDest == DESTROYER && name.equals("UserDest")) {
text = DestroyerDescriptions.PROGRAM_USERDEST;
}
}
else if (action instanceof PairProgramRobertJoyceAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.PAIRPROGRAMROBERTJOYCE_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.PAIRPROGRAMROBERTJOYCE_AUTODEST;
}
else if (trigOrDest == DESTROYER && name.equals("UserDest")) {
text = DestroyerDescriptions.PAIRPROGRAMROBERTJOYCE_USERDEST;
}
}
else if (action instanceof PairProgramTimothyRedaAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.PAIRPROGRAMTIMOTHYREDA_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.PAIRPROGRAMTIMOTHYREDA_AUTODEST;
}
else if (trigOrDest == DESTROYER && name.equals("UserDest")) {
text = DestroyerDescriptions.PAIRPROGRAMTIMOTHYREDA_USERDEST;
}
}
else if (action instanceof PairProgramPegSigfreidoAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.PAIRPROGRAMPEGSIGFREIDO_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.PAIRPROGRAMPEGSIGFREIDO_AUTODEST;
}
else if (trigOrDest == DESTROYER && name.equals("UserDest")) {
text = DestroyerDescriptions.PAIRPROGRAMPEGSIGFREIDO_USERDEST;
}
}
else if (action instanceof UnitTestingAndFixingAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.UNITTESTINGANDFIXING_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.UNITTESTINGANDFIXING_AUTODEST;
}
else if (trigOrDest == DESTROYER && name.equals("UserDest")) {
text = DestroyerDescriptions.UNITTESTINGANDFIXING_USERDEST;
}
}
else if (action instanceof RefactorAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.REFACTOR_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.REFACTOR_AUTODEST;
}
else if (trigOrDest == DESTROYER && name.equals("UserDest")) {
text = DestroyerDescriptions.REFACTOR_USERDEST;
}
}
else if (action instanceof IntegrateRobertJoyceAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.INTEGRATEROBERTJOYCE_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.INTEGRATEROBERTJOYCE_AUTODEST;
}
else if (trigOrDest == DESTROYER && name.equals("UserDest")) {
text = DestroyerDescriptions.INTEGRATEROBERTJOYCE_USERDEST;
}
}
else if (action instanceof IntegrateTimothyRedaAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.INTEGRATETIMOTHYREDA_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.INTEGRATETIMOTHYREDA_AUTODEST;
}
else if (trigOrDest == DESTROYER && name.equals("UserDest")) {
text = DestroyerDescriptions.INTEGRATETIMOTHYREDA_USERDEST;
}
}
else if (action instanceof IntegratePegSigfreidoAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.INTEGRATEPEGSIGFREIDO_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.INTEGRATEPEGSIGFREIDO_AUTODEST;
}
else if (trigOrDest == DESTROYER && name.equals("UserDest")) {
text = DestroyerDescriptions.INTEGRATEPEGSIGFREIDO_USERDEST;
}
}
else if (action instanceof IntegrateAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.INTEGRATE_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("UserDest")) {
text = DestroyerDescriptions.INTEGRATE_USERDEST;
}
else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.INTEGRATE_AUTODEST;
}
}
else if (action instanceof AcceptanceTestingAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.ACCEPTANCETESTING_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("AutoDestAllOk")) {
text = DestroyerDescriptions.ACCEPTANCETESTING_AUTODESTALLOK;
}
else if (trigOrDest == DESTROYER && name.equals("UserDest")) {
text = DestroyerDescriptions.ACCEPTANCETESTING_USERDEST;
}
else if (trigOrDest == DESTROYER && name.equals("AutoDestBugsInCode")) {
text = DestroyerDescriptions.ACCEPTANCETESTING_AUTODESTBUGSINCODE;
}
else if (trigOrDest == DESTROYER && name.equals("AutoDestWrongAccTests")) {
text = DestroyerDescriptions.ACCEPTANCETESTING_AUTODESTWRONGACCTESTS;
}
else if (trigOrDest == DESTROYER && name.equals("AutoDestWrongAccTestsBugs")) {
text = DestroyerDescriptions.ACCEPTANCETESTING_AUTODESTWRONGACCTESTSBUGS;
}
}
else if (action instanceof ReleaseCodeAndEndIterationAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.RELEASECODEANDENDITERATION_USERTRIG;
}
if (trigOrDest == DESTROYER && name.equals("TimedDest")) {
text = DestroyerDescriptions.RELEASECODEANDENDITERATION_TIMEDDEST;
}
}
else if (action instanceof RequireReleasePlanDoOverAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("RandomTrig")) {
text = TriggerDescriptions.REQUIRERELEASEPLANDOOVER_RANDOMTRIG;
}
if (trigOrDest == DESTROYER && name.equals("TimedDest")) {
text = DestroyerDescriptions.REQUIRERELEASEPLANDOOVER_TIMEDDEST;
}
}
else if (action instanceof CustomerComplainsAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("AutoTrig")) {
text = TriggerDescriptions.CUSTOMERCOMPLAINS_AUTOTRIG;
}
if (trigOrDest == DESTROYER && name.equals("TimedDest")) {
text = DestroyerDescriptions.CUSTOMERCOMPLAINS_TIMEDDEST;
}
}
else if (action instanceof AllEmployeesIdleAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("AutoTrig")) {
text = TriggerDescriptions.ALLEMPLOYEESIDLE_AUTOTRIG;
}
if (trigOrDest == DESTROYER && name.equals("TimedDest")) {
text = DestroyerDescriptions.ALLEMPLOYEESIDLE_TIMEDDEST;
}
else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
text = DestroyerDescriptions.ALLEMPLOYEESIDLE_AUTODEST;
}
}
else if (action instanceof DeliverFinalProductToCustomerAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("UserTrig")) {
text = TriggerDescriptions.DELIVERFINALPRODUCTTOCUSTOMER_USERTRIG;
}
}
else if (action instanceof GameOverAction) {
// triggers:
if (trigOrDest == TRIGGER && name.equals("AutoTrig")) {
text = TriggerDescriptions.GAMEOVER_AUTOTRIG;
}
}
descriptionArea.setText(text);
descriptionArea.setCaretPosition(0);
}
}
}