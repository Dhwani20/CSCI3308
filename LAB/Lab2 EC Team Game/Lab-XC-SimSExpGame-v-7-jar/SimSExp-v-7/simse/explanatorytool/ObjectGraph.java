/* File generated by: simse.codegenerator.explanatorytoolgenerator.ObjectGraphGenerator */
package simse.explanatorytool;

import simse.adts.objects.*;
import simse.state.*;
import simse.state.logger.Logger;
import simse.SimSE;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.Range;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.RectangleEdge;
import org.jfree.ui.RectangleInsets;
import org.jfree.ui.RefineryUtilities;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.Point;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JSeparator;

public class ObjectGraph extends JFrame implements MouseListener, ActionListener {
private ArrayList<State> log;
private String objTypeType;
private String objType;
private String keyAttVal;
private String[] attributes;
private JFreeChart chart; // chart object
private ChartPanel chartPanel;
private JMenuItem newBranchItem;
private JSeparator separator;
private int lastRightClickedX; // last x-val that was right-clicked on
private XYSeries[] series;
private Branch branch; // branch from which this graph is generated

public ObjectGraph(String title, ArrayList<State> log, String objTypeType, String objType, String keyAttVal, String[] attributes, boolean showChart, Branch branch) {
super();
this.branch = branch;
if (branch.getName() != null) {
title = title.concat(" - " + branch.getName());
}
setTitle(title);
this.log = log;
this.objTypeType = objTypeType;
this.objType = objType;
this.keyAttVal = keyAttVal;
this.attributes = attributes;
lastRightClickedX = 0;
XYDataset dataset = createDataset();
chart = createChart(dataset);
chartPanel = new ChartPanel(chart);
chartPanel.addMouseListener(this);
chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
setContentPane(chartPanel);
newBranchItem = new JMenuItem("Start new game from here");
newBranchItem.addActionListener(this);
separator = new JSeparator();
pack();
RefineryUtilities.centerFrameOnScreen(this);
setVisible(showChart);
}

// Creates the dataset for this graph
private XYDataset createDataset() {
series = new XYSeries[attributes.length];
for (int i = 0; i < attributes.length; i++) {
series[i] = new XYSeries(attributes[i]);
}

for (int i = 0; i < log.size(); i++) {
for (int j = 0; j < attributes.length; j++) {
if (objTypeType.equals("Employee") && objType.equals("SoftwareDeveloper")) {
SoftwareDeveloper softwaredeveloper = null;
if (keyAttVal.equals("Joyce")) {
softwaredeveloper = log.get(i).getEmployeeStateRepository().getSoftwareDeveloperStateRepository().get("Joyce");
}
else if (keyAttVal.equals("Robert")) {
softwaredeveloper = log.get(i).getEmployeeStateRepository().getSoftwareDeveloperStateRepository().get("Robert");
}
else if (keyAttVal.equals("Timothy")) {
softwaredeveloper = log.get(i).getEmployeeStateRepository().getSoftwareDeveloperStateRepository().get("Timothy");
}
else if (keyAttVal.equals("Reda")) {
softwaredeveloper = log.get(i).getEmployeeStateRepository().getSoftwareDeveloperStateRepository().get("Reda");
}
else if (keyAttVal.equals("Peg")) {
softwaredeveloper = log.get(i).getEmployeeStateRepository().getSoftwareDeveloperStateRepository().get("Peg");
}
else if (keyAttVal.equals("Sigfreido")) {
softwaredeveloper = log.get(i).getEmployeeStateRepository().getSoftwareDeveloperStateRepository().get("Sigfreido");
}
if (softwaredeveloper != null) {
}
}
else if (objTypeType.equals("Employee") && objType.equals("Manager")) {
Manager manager = null;
if (keyAttVal.equals("Chang")) {
manager = log.get(i).getEmployeeStateRepository().getManagerStateRepository().get("Chang");
}
if (manager != null) {
}
}
else if (objTypeType.equals("Customer") && objType.equals("CustomerRepresentative")) {
CustomerRepresentative customerrepresentative = null;
if (keyAttVal.equals("Wayne")) {
customerrepresentative = log.get(i).getCustomerStateRepository().getCustomerRepresentativeStateRepository().get("Wayne");
}
if (customerrepresentative != null) {
}
}
else if (objTypeType.equals("Artifact") && objType.equals("UserStories")) {
UserStories userstories = null;
if (keyAttVal.equals("Stories")) {
userstories = log.get(i).getArtifactStateRepository().getUserStoriesStateRepository().get("Stories");
}
if (userstories != null) {
if (attributes[j].equals("NumUserStoriesSpecified")) {
series[j].add(i, userstories.getNumUserStoriesSpecified());
}
else if (attributes[j].equals("NumUserStoriesImplemented")) {
series[j].add(i, userstories.getNumUserStoriesImplemented());
}
else if (attributes[j].equals("SpecificationCompleteness")) {
series[j].add(i, userstories.getSpecificationCompleteness());
}
else if (attributes[j].equals("ImplementationCompleteness")) {
series[j].add(i, userstories.getImplementationCompleteness());
}
else if (attributes[j].equals("NumUserStoriesIntegrated")) {
series[j].add(i, userstories.getNumUserStoriesIntegrated());
}
else if (attributes[j].equals("PercentErroneous")) {
series[j].add(i, userstories.getPercentErroneous());
}
}
}
else if (objTypeType.equals("Employee") && objType.equals("CustomerRep")) {
CustomerRep customerrep = null;
if (keyAttVal.equals("Customer Wayne")) {
customerrep = log.get(i).getEmployeeStateRepository().getCustomerRepStateRepository().get("Customer Wayne");
}
if (customerrep != null) {
}
}
else if (objTypeType.equals("Artifact") && objType.equals("ReleasePlan")) {
ReleasePlan releaseplan = null;
if (keyAttVal.equals("Release Plan")) {
releaseplan = log.get(i).getArtifactStateRepository().getReleasePlanStateRepository().get("Release Plan");
}
if (releaseplan != null) {
if (attributes[j].equals("Completeness")) {
series[j].add(i, releaseplan.getCompleteness());
}
}
}
else if (objTypeType.equals("Project") && objType.equals("TheProject")) {
TheProject theproject = null;
if (keyAttVal.equals("XP Project")) {
theproject = log.get(i).getProjectStateRepository().getTheProjectStateRepository().get("XP Project");
}
if (theproject != null) {
if (attributes[j].equals("CurrentIteration")) {
series[j].add(i, theproject.getCurrentIteration());
}
else if (attributes[j].equals("Score")) {
series[j].add(i, theproject.getScore());
}
else if (attributes[j].equals("TimeElapsed")) {
series[j].add(i, theproject.getTimeElapsed());
}
else if (attributes[j].equals("TimeAllotted")) {
series[j].add(i, theproject.getTimeAllotted());
}
}
}
else if (objTypeType.equals("Artifact") && objType.equals("CurrentIterationPlan")) {
CurrentIterationPlan currentiterationplan = null;
if (keyAttVal.equals("IterationPlan")) {
currentiterationplan = log.get(i).getArtifactStateRepository().getCurrentIterationPlanStateRepository().get("IterationPlan");
}
if (currentiterationplan != null) {
if (attributes[j].equals("Completeness")) {
series[j].add(i, currentiterationplan.getCompleteness());
}
}
}
else if (objTypeType.equals("Artifact") && objType.equals("AcceptanceTests")) {
AcceptanceTests acceptancetests = null;
if (keyAttVal.equals("Test cases that customers and developers agree will be the criteria for acceptance of the software")) {
acceptancetests = log.get(i).getArtifactStateRepository().getAcceptanceTestsStateRepository().get("Test cases that customers and developers agree will be the criteria for acceptance of the software");
}
if (acceptancetests != null) {
if (attributes[j].equals("Completeness")) {
series[j].add(i, acceptancetests.getCompleteness());
}
else if (attributes[j].equals("TestsRun")) {
series[j].add(i, acceptancetests.getTestsRun());
}
else if (attributes[j].equals("TestsFailed")) {
series[j].add(i, acceptancetests.getTestsFailed());
}
}
}
else if (objTypeType.equals("Tool") && objType.equals("CRCCards")) {
CRCCards crccards = null;
if (keyAttVal.equals("Class Responsibility Collaborator Cards, a brainstorming tool for designing object-oriented software")) {
crccards = log.get(i).getToolStateRepository().getCRCCardsStateRepository().get("Class Responsibility Collaborator Cards, a brainstorming tool for designing object-oriented software");
}
if (crccards != null) {
}
}
else if (objTypeType.equals("Artifact") && objType.equals("Design")) {
Design design = null;
if (keyAttVal.equals("CRC cards for this iteration's stories")) {
design = log.get(i).getArtifactStateRepository().getDesignStateRepository().get("CRC cards for this iteration's stories");
}
if (design != null) {
if (attributes[j].equals("NumCRCCardsCompleted")) {
series[j].add(i, design.getNumCRCCardsCompleted());
}
}
}
else if (objTypeType.equals("Tool") && objType.equals("UnitTestingFramework")) {
UnitTestingFramework unittestingframework = null;
if (keyAttVal.equals("Java-based unit testing framework")) {
unittestingframework = log.get(i).getToolStateRepository().getUnitTestingFrameworkStateRepository().get("Java-based unit testing framework");
}
if (unittestingframework != null) {
if (attributes[j].equals("ProductivityIncreaseFactor")) {
series[j].add(i, unittestingframework.getProductivityIncreaseFactor());
}
}
}
else if (objTypeType.equals("Artifact") && objType.equals("UnitTests")) {
UnitTests unittests = null;
if (keyAttVal.equals("Test cases for individual pieces of source code")) {
unittests = log.get(i).getArtifactStateRepository().getUnitTestsStateRepository().get("Test cases for individual pieces of source code");
}
if (unittests != null) {
if (attributes[j].equals("Completeness")) {
series[j].add(i, unittests.getCompleteness());
}
}
}
else if (objTypeType.equals("Artifact") && objType.equals("Code")) {
Code code = null;
if (keyAttVal.equals("The code for the current iteration's user stories")) {
code = log.get(i).getArtifactStateRepository().getCodeStateRepository().get("The code for the current iteration's user stories");
}
if (code != null) {
if (attributes[j].equals("PercentErroneous")) {
series[j].add(i, code.getPercentErroneous());
}
else if (attributes[j].equals("Completeness")) {
series[j].add(i, code.getCompleteness());
}
else if (attributes[j].equals("PercentRefactored")) {
series[j].add(i, code.getPercentRefactored());
}
else if (attributes[j].equals("PercentIntegrated")) {
series[j].add(i, code.getPercentIntegrated());
}
}
}
else if (objTypeType.equals("Tool") && objType.equals("CodingStandard")) {
CodingStandard codingstandard = null;
if (keyAttVal.equals("A standard style and format for source code")) {
codingstandard = log.get(i).getToolStateRepository().getCodingStandardStateRepository().get("A standard style and format for source code");
}
if (codingstandard != null) {
if (attributes[j].equals("ProductivityIncreaseFactor")) {
series[j].add(i, codingstandard.getProductivityIncreaseFactor());
}
}
}
else if (objTypeType.equals("Tool") && objType.equals("RefactoringTool")) {
RefactoringTool refactoringtool = null;
if (keyAttVal.equals("Eclipse")) {
refactoringtool = log.get(i).getToolStateRepository().getRefactoringToolStateRepository().get("Eclipse");
}
if (refactoringtool != null) {
if (attributes[j].equals("ProductivityIncreaseFactor")) {
series[j].add(i, refactoringtool.getProductivityIncreaseFactor());
}
}
}
}
}
XYSeriesCollection dataset = new XYSeriesCollection();
for (int i = 0; i < series.length; i++) {
dataset.addSeries(series[i]);
}
return dataset;
}

// Creates the chart for this graph
private JFreeChart createChart(XYDataset dataset) {
// create the chart:
JFreeChart chart = ChartFactory.createXYLineChart(this.getTitle(), "Clock Ticks", null, dataset, PlotOrientation.VERTICAL, true, true, false);
chart.setBackgroundPaint(Color.white);
XYPlot plot = (XYPlot) chart.getPlot();
plot.setBackgroundPaint(Color.lightGray);
plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
plot.setDomainGridlinePaint(Color.white);
plot.setRangeGridlinePaint(Color.white);
XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
renderer.setShapesVisible(true);
renderer.setShapesFilled(true);

// change the auto tick unit selection to integer units only:
NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
domainAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

return chart;
}

public void update() {
if ((log.size() > 0) && (log.get(log.size() - 1) != null)) { // there is a log that has not been graphed yet
// add a new end data point for each series/attribute
for (int j = 0; j < attributes.length; j++) {
if (objTypeType.equals("Employee") && objType.equals("SoftwareDeveloper")) {
SoftwareDeveloper softwaredeveloper = null;
if (keyAttVal.equals("Joyce")) {
softwaredeveloper = log.get(log.size() - 1).getEmployeeStateRepository().getSoftwareDeveloperStateRepository().get("Joyce");
}
else if (keyAttVal.equals("Robert")) {
softwaredeveloper = log.get(log.size() - 1).getEmployeeStateRepository().getSoftwareDeveloperStateRepository().get("Robert");
}
else if (keyAttVal.equals("Timothy")) {
softwaredeveloper = log.get(log.size() - 1).getEmployeeStateRepository().getSoftwareDeveloperStateRepository().get("Timothy");
}
else if (keyAttVal.equals("Reda")) {
softwaredeveloper = log.get(log.size() - 1).getEmployeeStateRepository().getSoftwareDeveloperStateRepository().get("Reda");
}
else if (keyAttVal.equals("Peg")) {
softwaredeveloper = log.get(log.size() - 1).getEmployeeStateRepository().getSoftwareDeveloperStateRepository().get("Peg");
}
else if (keyAttVal.equals("Sigfreido")) {
softwaredeveloper = log.get(log.size() - 1).getEmployeeStateRepository().getSoftwareDeveloperStateRepository().get("Sigfreido");
}
if (softwaredeveloper != null) {
}
}
else if (objTypeType.equals("Employee") && objType.equals("Manager")) {
Manager manager = null;
if (keyAttVal.equals("Chang")) {
manager = log.get(log.size() - 1).getEmployeeStateRepository().getManagerStateRepository().get("Chang");
}
if (manager != null) {
}
}
else if (objTypeType.equals("Customer") && objType.equals("CustomerRepresentative")) {
CustomerRepresentative customerrepresentative = null;
if (keyAttVal.equals("Wayne")) {
customerrepresentative = log.get(log.size() - 1).getCustomerStateRepository().getCustomerRepresentativeStateRepository().get("Wayne");
}
if (customerrepresentative != null) {
}
}
else if (objTypeType.equals("Artifact") && objType.equals("UserStories")) {
UserStories userstories = null;
if (keyAttVal.equals("Stories")) {
userstories = log.get(log.size() - 1).getArtifactStateRepository().getUserStoriesStateRepository().get("Stories");
}
if (userstories != null) {
if (attributes[j].equals("NumUserStoriesSpecified")) {
series[j].add(log.size(), userstories.getNumUserStoriesSpecified());
}
else if (attributes[j].equals("NumUserStoriesImplemented")) {
series[j].add(log.size(), userstories.getNumUserStoriesImplemented());
}
else if (attributes[j].equals("SpecificationCompleteness")) {
series[j].add(log.size(), userstories.getSpecificationCompleteness());
}
else if (attributes[j].equals("ImplementationCompleteness")) {
series[j].add(log.size(), userstories.getImplementationCompleteness());
}
else if (attributes[j].equals("NumUserStoriesIntegrated")) {
series[j].add(log.size(), userstories.getNumUserStoriesIntegrated());
}
else if (attributes[j].equals("PercentErroneous")) {
series[j].add(log.size(), userstories.getPercentErroneous());
}
}
}
else if (objTypeType.equals("Employee") && objType.equals("CustomerRep")) {
CustomerRep customerrep = null;
if (keyAttVal.equals("Customer Wayne")) {
customerrep = log.get(log.size() - 1).getEmployeeStateRepository().getCustomerRepStateRepository().get("Customer Wayne");
}
if (customerrep != null) {
}
}
else if (objTypeType.equals("Artifact") && objType.equals("ReleasePlan")) {
ReleasePlan releaseplan = null;
if (keyAttVal.equals("Release Plan")) {
releaseplan = log.get(log.size() - 1).getArtifactStateRepository().getReleasePlanStateRepository().get("Release Plan");
}
if (releaseplan != null) {
if (attributes[j].equals("Completeness")) {
series[j].add(log.size(), releaseplan.getCompleteness());
}
}
}
else if (objTypeType.equals("Project") && objType.equals("TheProject")) {
TheProject theproject = null;
if (keyAttVal.equals("XP Project")) {
theproject = log.get(log.size() - 1).getProjectStateRepository().getTheProjectStateRepository().get("XP Project");
}
if (theproject != null) {
if (attributes[j].equals("CurrentIteration")) {
series[j].add(log.size(), theproject.getCurrentIteration());
}
else if (attributes[j].equals("Score")) {
series[j].add(log.size(), theproject.getScore());
}
else if (attributes[j].equals("TimeElapsed")) {
series[j].add(log.size(), theproject.getTimeElapsed());
}
else if (attributes[j].equals("TimeAllotted")) {
series[j].add(log.size(), theproject.getTimeAllotted());
}
}
}
else if (objTypeType.equals("Artifact") && objType.equals("CurrentIterationPlan")) {
CurrentIterationPlan currentiterationplan = null;
if (keyAttVal.equals("IterationPlan")) {
currentiterationplan = log.get(log.size() - 1).getArtifactStateRepository().getCurrentIterationPlanStateRepository().get("IterationPlan");
}
if (currentiterationplan != null) {
if (attributes[j].equals("Completeness")) {
series[j].add(log.size(), currentiterationplan.getCompleteness());
}
}
}
else if (objTypeType.equals("Artifact") && objType.equals("AcceptanceTests")) {
AcceptanceTests acceptancetests = null;
if (keyAttVal.equals("Test cases that customers and developers agree will be the criteria for acceptance of the software")) {
acceptancetests = log.get(log.size() - 1).getArtifactStateRepository().getAcceptanceTestsStateRepository().get("Test cases that customers and developers agree will be the criteria for acceptance of the software");
}
if (acceptancetests != null) {
if (attributes[j].equals("Completeness")) {
series[j].add(log.size(), acceptancetests.getCompleteness());
}
else if (attributes[j].equals("TestsRun")) {
series[j].add(log.size(), acceptancetests.getTestsRun());
}
else if (attributes[j].equals("TestsFailed")) {
series[j].add(log.size(), acceptancetests.getTestsFailed());
}
}
}
else if (objTypeType.equals("Tool") && objType.equals("CRCCards")) {
CRCCards crccards = null;
if (keyAttVal.equals("Class Responsibility Collaborator Cards, a brainstorming tool for designing object-oriented software")) {
crccards = log.get(log.size() - 1).getToolStateRepository().getCRCCardsStateRepository().get("Class Responsibility Collaborator Cards, a brainstorming tool for designing object-oriented software");
}
if (crccards != null) {
}
}
else if (objTypeType.equals("Artifact") && objType.equals("Design")) {
Design design = null;
if (keyAttVal.equals("CRC cards for this iteration's stories")) {
design = log.get(log.size() - 1).getArtifactStateRepository().getDesignStateRepository().get("CRC cards for this iteration's stories");
}
if (design != null) {
if (attributes[j].equals("NumCRCCardsCompleted")) {
series[j].add(log.size(), design.getNumCRCCardsCompleted());
}
}
}
else if (objTypeType.equals("Tool") && objType.equals("UnitTestingFramework")) {
UnitTestingFramework unittestingframework = null;
if (keyAttVal.equals("Java-based unit testing framework")) {
unittestingframework = log.get(log.size() - 1).getToolStateRepository().getUnitTestingFrameworkStateRepository().get("Java-based unit testing framework");
}
if (unittestingframework != null) {
if (attributes[j].equals("ProductivityIncreaseFactor")) {
series[j].add(log.size(), unittestingframework.getProductivityIncreaseFactor());
}
}
}
else if (objTypeType.equals("Artifact") && objType.equals("UnitTests")) {
UnitTests unittests = null;
if (keyAttVal.equals("Test cases for individual pieces of source code")) {
unittests = log.get(log.size() - 1).getArtifactStateRepository().getUnitTestsStateRepository().get("Test cases for individual pieces of source code");
}
if (unittests != null) {
if (attributes[j].equals("Completeness")) {
series[j].add(log.size(), unittests.getCompleteness());
}
}
}
else if (objTypeType.equals("Artifact") && objType.equals("Code")) {
Code code = null;
if (keyAttVal.equals("The code for the current iteration's user stories")) {
code = log.get(log.size() - 1).getArtifactStateRepository().getCodeStateRepository().get("The code for the current iteration's user stories");
}
if (code != null) {
if (attributes[j].equals("PercentErroneous")) {
series[j].add(log.size(), code.getPercentErroneous());
}
else if (attributes[j].equals("Completeness")) {
series[j].add(log.size(), code.getCompleteness());
}
else if (attributes[j].equals("PercentRefactored")) {
series[j].add(log.size(), code.getPercentRefactored());
}
else if (attributes[j].equals("PercentIntegrated")) {
series[j].add(log.size(), code.getPercentIntegrated());
}
}
}
else if (objTypeType.equals("Tool") && objType.equals("CodingStandard")) {
CodingStandard codingstandard = null;
if (keyAttVal.equals("A standard style and format for source code")) {
codingstandard = log.get(log.size() - 1).getToolStateRepository().getCodingStandardStateRepository().get("A standard style and format for source code");
}
if (codingstandard != null) {
if (attributes[j].equals("ProductivityIncreaseFactor")) {
series[j].add(log.size(), codingstandard.getProductivityIncreaseFactor());
}
}
}
else if (objTypeType.equals("Tool") && objType.equals("RefactoringTool")) {
RefactoringTool refactoringtool = null;
if (keyAttVal.equals("Eclipse")) {
refactoringtool = log.get(log.size() - 1).getToolStateRepository().getRefactoringToolStateRepository().get("Eclipse");
}
if (refactoringtool != null) {
if (attributes[j].equals("ProductivityIncreaseFactor")) {
series[j].add(log.size(), refactoringtool.getProductivityIncreaseFactor());
}
}
}
}
}
}

// responds to RIGHT-clicks on the chart
public void mouseReleased(MouseEvent me) {
if (me.getButton() != MouseEvent.BUTTON1) { // not left-click
XYPlot plot = chart.getXYPlot();
Range domainRange = plot.getDataRange(plot.getDomainAxis());
if (domainRange != null) { // chart is not blank
Point2D pt = chartPanel.translateScreenToJava2D(new Point(me.getX(), me.getY()));
ChartRenderingInfo info = this.chartPanel.getChartRenderingInfo();
Rectangle2D dataArea = info.getPlotInfo().getDataArea();
NumberAxis domainAxis = (NumberAxis)plot.getDomainAxis();
RectangleEdge domainAxisEdge = plot.getDomainAxisEdge();
double chartX = domainAxis.java2DToValue(pt.getX(), dataArea, domainAxisEdge);
lastRightClickedX = (int)Math.rint(chartX);
if (domainRange != null && lastRightClickedX >= domainRange.getLowerBound() && lastRightClickedX <= (domainRange.getUpperBound() - 1) && lastRightClickedX >= 0) { // clicked within domain range
if (chartPanel.getPopupMenu().getComponentIndex(newBranchItem) == -1) { // no new branch item on menu currently
chartPanel.getPopupMenu().add(separator);
chartPanel.getPopupMenu().add(newBranchItem);
chartPanel.getPopupMenu().pack();
chartPanel.getPopupMenu().repaint();
}
}
else { // clicked outside of domain range
if (chartPanel.getPopupMenu().getComponentIndex(newBranchItem) >= 0) { // new branch item currently on menu
chartPanel.getPopupMenu().remove(newBranchItem);
if (chartPanel.getPopupMenu().getComponentIndex(separator) >= 0) { // has separator
chartPanel.getPopupMenu().remove(separator);
}
chartPanel.getPopupMenu().pack();
chartPanel.getPopupMenu().repaint();
}
}
}
}
}
public void mousePressed(MouseEvent me) {}
public void mouseClicked(MouseEvent me) {}
public void mouseEntered(MouseEvent me) {}
public void mouseExited(MouseEvent me) {}

public void actionPerformed(ActionEvent evt) {
if (evt.getSource() == newBranchItem) {
String newBranchName = JOptionPane.showInputDialog(null, "Please name this new game:", "Name New Game", JOptionPane.QUESTION_MESSAGE);
if (newBranchName != null) {
State tempState = (State)log.get(lastRightClickedX).clone();
Logger tempLogger = new Logger(tempState, new ArrayList<State>(log.subList(0, lastRightClickedX)));
Clock tempClock = new Clock(tempLogger, lastRightClickedX);
tempState.setClock(tempClock);
tempState.setLogger(tempLogger);
SimSE.startNewBranch(tempState, new Branch(newBranchName, lastRightClickedX, tempClock.getTime(), branch, null));
}
}
}

public XYPlot getXYPlot() {
return chart.getXYPlot();
}

public String getChartTitle() {
return this.getTitle();
}

public ArrayList<State> getLog() {
return log;
}

public class ExitListener extends WindowAdapter {
public void windowClosing(WindowEvent event) {
setVisible(false);
dispose();
}
}
}