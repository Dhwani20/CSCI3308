/* File generated by: simse.codegenerator.enginegenerator.EngineGenerator */
package simse.engine;
import simse.adts.objects.*;
import simse.logic.*;
import simse.state.*;
import simse.gui.*;
import java.util.*;
import javax.swing.*;
import java.awt.event.*;
import javax.swing.Timer;

public class Engine implements ActionListener
{
private Logic logic;
private State state;
private SimSEGUI gui;
private int numSteps;
private boolean stopClock;
private boolean stopAtEvents;
private Timer timer;
public Engine(Logic l, State s)
{
numSteps = 0;logic = l;
state = s;
timer = new Timer(50, this);
SoftwareDeveloper a0 = new SoftwareDeveloper("Joyce", "8 years", 8, false, 0.0, false, 0.0, false, false, 0, 1, true);
state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().add(a0);
SoftwareDeveloper a1 = new SoftwareDeveloper("Robert", "1 year", 1, false, 0.0, false, 0.0, false, false, 0, 1, true);
state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().add(a1);
SoftwareDeveloper a2 = new SoftwareDeveloper("Timothy", "10 years", 10, false, 0.0, false, 0.0, false, false, 0, 1, true);
state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().add(a2);
SoftwareDeveloper a3 = new SoftwareDeveloper("Reda", "3 years", 3, false, 0.0, false, 0.0, false, false, 0, 1, true);
state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().add(a3);
SoftwareDeveloper a4 = new SoftwareDeveloper("Peg", "2 years", 2, false, 0.0, false, 0.0, false, false, 0, 1, true);
state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().add(a4);
SoftwareDeveloper a5 = new SoftwareDeveloper("Sigfreido", "9 years", 9, false, 0.0, false, 0.0, false, false, 0, 1, true);
state.getEmployeeStateRepository().getSoftwareDeveloperStateRepository().add(a5);
Manager a6 = new Manager("Chang", 1);
state.getEmployeeStateRepository().getManagerStateRepository().add(a6);
CustomerRepresentative a7 = new CustomerRepresentative("Wayne");
state.getCustomerStateRepository().getCustomerRepresentativeStateRepository().add(a7);
CustomerRep a8 = new CustomerRep("Customer Wayne", 1, false);
state.getEmployeeStateRepository().getCustomerRepStateRepository().add(a8);
UserStories a9 = new UserStories("Stories", 0.0, "No", 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
state.getArtifactStateRepository().getUserStoriesStateRepository().add(a9);
ReleasePlan a10 = new ReleasePlan("Release Plan", 0.0, 0, 0);
state.getArtifactStateRepository().getReleasePlanStateRepository().add(a10);
TheProject a11 = new TheProject("XP Project", 0, false, false, false, false, 0, 0, false, false, false, 0, false, 0, false, 0.0, 0, false, 1800);
state.getProjectStateRepository().getTheProjectStateRepository().add(a11);
CurrentIterationPlan a12 = new CurrentIterationPlan("IterationPlan", 0.0, 0);
state.getArtifactStateRepository().getCurrentIterationPlanStateRepository().add(a12);
AcceptanceTests a13 = new AcceptanceTests("Test cases that customers and developers agree will be the criteria for acceptance of the software", 0.0, 0, 0.0, 0.0);
state.getArtifactStateRepository().getAcceptanceTestsStateRepository().add(a13);
CRCCards a14 = new CRCCards("Class Responsibility Collaborator Cards, a brainstorming tool for designing object-oriented software");
state.getToolStateRepository().getCRCCardsStateRepository().add(a14);
Design a15 = new Design("CRC cards for this iteration's stories", 0.0);
state.getArtifactStateRepository().getDesignStateRepository().add(a15);
UnitTestingFramework a16 = new UnitTestingFramework("Java-based unit testing framework", 1);
state.getToolStateRepository().getUnitTestingFrameworkStateRepository().add(a16);
UnitTests a17 = new UnitTests("Test cases for individual pieces of source code", 0.0, 0);
state.getArtifactStateRepository().getUnitTestsStateRepository().add(a17);
Code a18 = new Code("The code for the current iteration's user stories", 0.0, 0.0, 0, 0, 0.0, 0.0);
state.getArtifactStateRepository().getCodeStateRepository().add(a18);
CodingStandard a19 = new CodingStandard("A standard style and format for source code", 1.0);
state.getToolStateRepository().getCodingStandardStateRepository().add(a19);
RefactoringTool a20 = new RefactoringTool("Eclipse", 1.0);
state.getToolStateRepository().getRefactoringToolStateRepository().add(a20);
}
public void giveGUI(SimSEGUI g)
{
gui = g;
new StartingNarrativeDialog(gui);
}

public void actionPerformed(ActionEvent ae)
{
if(isRunning())
{
gui.getAttributePanel().getClockPanel().setAdvClockImage();
if(state.getClock().isStopped())
{
numSteps = 0;
}
else
{
gui.getAttributePanel().setGUIChanged();
state.getLogger().update();
logic.update(gui);
gui.update();
numSteps--;
if(stopAtEvents && gui.getWorld().overheadTextDisplayed())
{
stopClock = true;
numSteps = 0;
}
}
}
else
{
gui.getAttributePanel().getClockPanel().resetAdvClockImage();
}
}

public boolean isRunning()
{
return numSteps > 0;
}

public void setStopAtEvents(boolean t)
{
stopClock = false;
stopAtEvents = t;
}

public void setSteps(int ns)
{
timer.restart();
numSteps += ns;
}

public void stop()
{
numSteps = 0;
timer.stop();
}

public boolean stopClock()
{
return stopClock;
}
public Timer getTimer() {
return timer;
}
}