/* File generated by: simse.codegenerator.guigenerator.ActionPanelGenerator */
package simse.gui;

import simse.state.*;
import simse.logic.*;
import simse.adts.objects.*;
import simse.adts.actions.*;

import java.text.*;
import java.util.*;
import java.awt.event.*;
import java.awt.*;
import java.awt.Dimension;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.event.*;
import java.awt.Color;
import java.io.*;

public class ActionPanel extends JPanel implements MouseListener, ActionListener
{
private State state;
private Logic logic;
private SimSEGUI mainGUIFrame;

private JPopupMenu popup;

private Employee selectedEmp;

private JPanel actionPaneMain;
private Hashtable<Employee, JPanel> empsToEmpPanels;
private Hashtable<Employee, JPanel> empsToPicPanels;
//private Hashtable empsToActPanels;
private Hashtable<Employee, JLabel> empsToPicLabels;
private Hashtable<Employee, JLabel> empsToKeyLabels;


public ActionPanel(SimSEGUI gui, State s, Logic l)
{
state = s;
logic = l;
mainGUIFrame = gui;

setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));

actionPaneMain = new JPanel();
actionPaneMain.setLayout(new BoxLayout(actionPaneMain, BoxLayout.Y_AXIS));
actionPaneMain.setBackground(new Color(102, 102, 102, 255));

JScrollPane actionPane = new JScrollPane(actionPaneMain, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
actionPane.setPreferredSize(new Dimension(225, 495));

empsToEmpPanels = new Hashtable<Employee, JPanel>();
empsToPicPanels = new Hashtable<Employee, JPanel>();
//empsToActPanels = new Hashtable();
empsToPicLabels = new Hashtable<Employee, JLabel>();
empsToKeyLabels = new Hashtable<Employee, JLabel>();

JPanel titlePanel = new JPanel(new BorderLayout());
titlePanel.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 0));
titlePanel.setBackground(new Color(102, 102, 102, 255));
JLabel titleLabel = new JLabel("Current Activities:");
Font f = titleLabel.getFont();
Font newFont = new Font(f.getName(), f.getStyle(), 15);
titleLabel.setFont(newFont);
titleLabel.setForeground(Color.WHITE);
titlePanel.add(titleLabel, BorderLayout.WEST);

selectedEmp = null;
popup = new JPopupMenu();

update();

add(titlePanel);
add(actionPane);
repaint();
}


public void createPopupMenu(Component c, int x, int y)
{
popup.removeAll();

if(mainGUIFrame.getEngine().isRunning())
{
return;
}

if(selectedEmp != null)
{
Vector<String> menuItems = selectedEmp.getMenu();
for(int i=0; i<menuItems.size(); i++)
{
String item = menuItems.elementAt(i);
JMenuItem tempItem = new JMenuItem(item);
tempItem.addActionListener(this);
popup.add(tempItem);
}
if(menuItems.size() >= 1)
{
popup.show(c, x, y);
}
}
}


public void paintComponent(Graphics g)
{
}


public void update()
{
actionPaneMain.removeAll();
Vector<Employee> allEmps = state.getEmployeeStateRepository().getAll();
for(int i=0; i<allEmps.size(); i++)
{
Employee emp = allEmps.elementAt(i);
if(empsToEmpPanels.get(emp) == null)
{
JPanel tempPanel = new JPanel();
tempPanel.addMouseListener(this);
empsToEmpPanels.put(emp, tempPanel);
}
if(empsToPicPanels.get(emp) == null)
{
JPanel tempPanel = new JPanel();
tempPanel.addMouseListener(this);
empsToPicPanels.put(emp, tempPanel);
}
/*if(empsToActPanels.get(emp) == null)
{
JPanel temp = new JPanel();
temp.setLayout(new BoxLayout(temp, BoxLayout.Y_AXIS));
temp.setMinimumSize(new Dimension(150, 10));
empsToActPanels.put(emp, temp);
}*/
JPanel empPanel = empsToEmpPanels.get(emp);
empPanel.removeAll();
JPanel picPanel = empsToPicPanels.get(emp);
picPanel.removeAll();

GridBagLayout gbLayout = new GridBagLayout();
empPanel.setLayout(gbLayout);
GridBagConstraints gbc = new GridBagConstraints();
gbc.fill = GridBagConstraints.NONE;
gbc.gridwidth = 3;
gbc.gridheight = 1;

empPanel.setBackground(new Color(102, 102, 102, 255));

picPanel.setLayout(new BoxLayout(picPanel, BoxLayout.Y_AXIS));
picPanel.setBackground(new Color(102, 102, 102, 255));
if(empsToPicLabels.get(emp) == null)
{
ImageIcon ico = new ImageIcon(ImageLoader.getImageFromURL(TabPanel.getImage(emp)));
Image scaledImage = ico.getImage().getScaledInstance(35, 35, Image.SCALE_AREA_AVERAGING);
ico.setImage(scaledImage);
JLabel temp = new JLabel(ico);
temp.addMouseListener(this);
empsToPicLabels.put(emp, temp);
}

JLabel picLabel = empsToPicLabels.get(emp);
picLabel.setHorizontalAlignment(SwingConstants.LEFT);
picPanel.add(picLabel);
if(emp instanceof SoftwareDeveloper)
{
SoftwareDeveloper e = (SoftwareDeveloper)emp;
if(empsToKeyLabels.get(e) == null)
{
JLabel temp = new JLabel("" + e.getName());
temp.setForeground(Color.WHITE);
temp.setHorizontalAlignment(SwingConstants.LEFT);
temp.setHorizontalTextPosition(SwingConstants.LEFT);
empsToKeyLabels.put(e, temp);
}
JLabel keyLabel = empsToKeyLabels.get(e);
picPanel.add(keyLabel);
}
else if(emp instanceof Manager)
{
Manager e = (Manager)emp;
if(empsToKeyLabels.get(e) == null)
{
JLabel temp = new JLabel("" + e.getName());
temp.setForeground(Color.WHITE);
temp.setHorizontalAlignment(SwingConstants.LEFT);
temp.setHorizontalTextPosition(SwingConstants.LEFT);
empsToKeyLabels.put(e, temp);
}
JLabel keyLabel = empsToKeyLabels.get(e);
picPanel.add(keyLabel);
}
else if(emp instanceof CustomerRep)
{
CustomerRep e = (CustomerRep)emp;
if(empsToKeyLabels.get(e) == null)
{
JLabel temp = new JLabel("" + e.getName());
temp.setForeground(Color.WHITE);
temp.setHorizontalAlignment(SwingConstants.LEFT);
temp.setHorizontalTextPosition(SwingConstants.LEFT);
empsToKeyLabels.put(e, temp);
}
JLabel keyLabel = empsToKeyLabels.get(e);
picPanel.add(keyLabel);
}
picPanel.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));
gbc.weightx = 1;
gbc.weighty = 1;
gbc.anchor = GridBagConstraints.WEST;
empPanel.add(picPanel);

JPanel actsPanel = new JPanel();
//actsPanel.removeAll();

actsPanel.setLayout(new BoxLayout(actsPanel, BoxLayout.Y_AXIS));
actsPanel.setBackground(new Color(102, 102, 102, 255));
Vector<simse.adts.actions.Action> acts = state.getActionStateRepository().getAllActions(emp);
for(int j=0; j<acts.size(); j++)
{
simse.adts.actions.Action tempAct = acts.elementAt(j);
if(tempAct instanceof CreateUserStoriesAction)
{
JLabel tempLabel = new JLabel("Creating user stories");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof ReleasePlanningMeetingAction)
{
JLabel tempLabel = new JLabel("In release planning meeting");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof IterationPlanningMeetingAction)
{
JLabel tempLabel = new JLabel("In iteration planning meeting");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof ChooseUserStoriesForIterationAction)
{
JLabel tempLabel = new JLabel("Choosing user stories for iteration");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof CreateProgrammingTasksAction)
{
JLabel tempLabel = new JLabel("Creating programming tasks");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof CreateAcceptanceTestsAction)
{
JLabel tempLabel = new JLabel("Creating acceptance tests");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof DesignAction)
{
JLabel tempLabel = new JLabel("Designing");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof CreateUnitTestsAction)
{
JLabel tempLabel = new JLabel("Creating unit tests");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof LearnCodingStandardAction)
{
JLabel tempLabel = new JLabel("Learning coding standard");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof ProgramAction)
{
JLabel tempLabel = new JLabel("Programming");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof PairProgramRobertJoyceAction)
{
JLabel tempLabel = new JLabel("Pair programming");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof PairProgramTimothyRedaAction)
{
JLabel tempLabel = new JLabel("Pair programming");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof PairProgramPegSigfreidoAction)
{
JLabel tempLabel = new JLabel("Pair programming");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof UnitTestingAndFixingAction)
{
JLabel tempLabel = new JLabel("Unit testing and fixing");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof RefactorAction)
{
JLabel tempLabel = new JLabel("Refactoring");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof IntegrateRobertJoyceAction)
{
JLabel tempLabel = new JLabel("Pair integrating");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof IntegrateTimothyRedaAction)
{
JLabel tempLabel = new JLabel("Pair integrating");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof IntegratePegSigfreidoAction)
{
JLabel tempLabel = new JLabel("Pair integrating");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof IntegrateAction)
{
JLabel tempLabel = new JLabel("Integrating");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
else if(tempAct instanceof AcceptanceTestingAction)
{
JLabel tempLabel = new JLabel("Acceptance testing");
tempLabel.setFont(new Font(tempLabel.getFont().getName(), tempLabel.getFont().getStyle(), 10));
tempLabel.setForeground(Color.WHITE);
actsPanel.add(tempLabel);
}
}
gbc.weightx = 2;
gbc.anchor = GridBagConstraints.EAST;
actsPanel.setPreferredSize(new Dimension(150, (int)((Dimension)actsPanel.getPreferredSize()).getHeight()));
empPanel.add(actsPanel);
empPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));

actionPaneMain.add(empPanel);
}
validate();
repaint();
actionPaneMain.update(actionPaneMain.getGraphics());
}


public void mouseClicked(MouseEvent me){}
public void mousePressed(MouseEvent me){}
public void mouseEntered(MouseEvent me){}
public void mouseExited(MouseEvent me){}


public void mouseReleased(MouseEvent me)
{
if(me.getComponent() instanceof JLabel)
{
JLabel label = (JLabel)me.getComponent();
Employee emp = getEmpFromPicLabel(label);
if(emp != null)
{
if(me.getButton() == MouseEvent.BUTTON1) // left button clicked
{
mainGUIFrame.getTabPanel().setGUIChanged();
mainGUIFrame.getTabPanel().setObjectInFocus(emp);
mainGUIFrame.getAttributePanel().setGUIChanged();
mainGUIFrame.getAttributePanel().setObjectInFocus(emp, new ImageIcon(ImageLoader.getImageFromURL(TabPanel.getImage(emp))));
}
else if(me.isPopupTrigger() && (state.getClock().isStopped() == false)) // right-click
{
selectedEmp = emp;
createPopupMenu(label, me.getX(), me.getY());
repaint();
}
}
}
else if (me.getComponent() instanceof JPanel) {
JPanel panel = (JPanel) me.getComponent();
Employee emp = getEmpFromPanel(panel);
if (emp != null) {
if (me.getButton() == MouseEvent.BUTTON1) // left button clicked
{
mainGUIFrame.getTabPanel().setGUIChanged();
mainGUIFrame.getTabPanel().setObjectInFocus(emp);
mainGUIFrame.getAttributePanel().setGUIChanged();
mainGUIFrame.getAttributePanel().setObjectInFocus(emp, new ImageIcon(ImageLoader.getImageFromURL(TabPanel.getImage(emp))));
} else if (me.isPopupTrigger() && (state.getClock().isStopped() == false)) // right-click
{
selectedEmp = emp;
createPopupMenu(panel, me.getX(), me.getY());
repaint();
}
}
}
}


public void popupMenuActions(JMenuItem source)
{
JMenuItem item = (JMenuItem)source;
logic.getMenuInputManager().menuItemSelected(selectedEmp, item.getText(), mainGUIFrame);
mainGUIFrame.getWorld().update();
}

public void actionPerformed(ActionEvent e)	// dealing with actions generated by popup menus
{
Object source = e.getSource();
if(source instanceof JMenuItem)
{
popupMenuActions((JMenuItem)source);
}
}


private Employee getEmpFromPicLabel(JLabel label)
{
for(Enumeration<Employee> keys=empsToPicLabels.keys(); keys.hasMoreElements();)
{
Employee keyEmp = keys.nextElement();
if(empsToPicLabels.get(keyEmp) == label)
{
return keyEmp;
}
}
return null;
}
private Employee getEmpFromPanel(JPanel panel) {
for (Enumeration<Employee> keys = empsToEmpPanels.keys(); keys.hasMoreElements();) {
Employee keyEmp = keys.nextElement();
if (empsToEmpPanels.get(keyEmp) == panel) {
return keyEmp;
}
}
for (Enumeration<Employee> keys = empsToPicPanels.keys(); keys.hasMoreElements();) {
Employee keyEmp = keys.nextElement();
if (empsToPicPanels.get(keyEmp) == panel) {
return keyEmp;
}
}
return null;
}
}