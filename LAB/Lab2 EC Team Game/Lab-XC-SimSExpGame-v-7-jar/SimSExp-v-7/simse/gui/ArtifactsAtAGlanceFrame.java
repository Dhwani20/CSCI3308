/* File generated by: simse.codegenerator.guigenerator.AtAGlanceFramesGenerator */
package simse.gui;

import simse.state.*;

import java.awt.event.*;
import java.awt.*;
import java.awt.Dimension;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.event.*;
import javax.swing.table.*;
import javax.swing.border.*;
import java.util.*;
import java.text.*;
import java.awt.Color;

public class ArtifactsAtAGlanceFrame extends JFrame implements MouseListener, ActionListener
{

private State state;

private JPopupMenu popup;
private PopupListener popupListener;
private JTable userstoriesTable;
private UserStoriesTableModel userstoriesModel;
private JPanel userstoriesTitlePane;
private JTable releaseplanTable;
private ReleasePlanTableModel releaseplanModel;
private JPanel releaseplanTitlePane;
private JTable currentiterationplanTable;
private CurrentIterationPlanTableModel currentiterationplanModel;
private JPanel currentiterationplanTitlePane;
private JTable acceptancetestsTable;
private AcceptanceTestsTableModel acceptancetestsModel;
private JPanel acceptancetestsTitlePane;
private JTable designTable;
private DesignTableModel designModel;
private JPanel designTitlePane;
private JTable unittestsTable;
private UnitTestsTableModel unittestsModel;
private JPanel unittestsTitlePane;
private JTable codeTable;
private CodeTableModel codeModel;
private JPanel codeTitlePane;
private JPanel mainPane;

private int realColumnIndex; // index of selected column
private JTable selectedTable; // selected table

public ArtifactsAtAGlanceFrame(State s,SimSEGUI gui)
{
state = s;
// Set window title:
setTitle("Artifacts At-A-Glance");

// Create tables:
int numCols;

userstoriesModel = new UserStoriesTableModel(s);
userstoriesTable = new JTable(userstoriesModel);
userstoriesTable.setColumnSelectionAllowed(false);
userstoriesTable.setRowSelectionAllowed(false);
userstoriesTable.addMouseListener(this);
userstoriesTable.getTableHeader().setReorderingAllowed(false);
// make it so that the user can make each column disappear if they want:
numCols = userstoriesTable.getColumnCount();
for(int i=0; i<numCols; i++)
{
userstoriesTable.getColumnModel().getColumn(i).setMinWidth(0);
}
releaseplanModel = new ReleasePlanTableModel(s);
releaseplanTable = new JTable(releaseplanModel);
releaseplanTable.setColumnSelectionAllowed(false);
releaseplanTable.setRowSelectionAllowed(false);
releaseplanTable.addMouseListener(this);
releaseplanTable.getTableHeader().setReorderingAllowed(false);
// make it so that the user can make each column disappear if they want:
numCols = releaseplanTable.getColumnCount();
for(int i=0; i<numCols; i++)
{
releaseplanTable.getColumnModel().getColumn(i).setMinWidth(0);
}
currentiterationplanModel = new CurrentIterationPlanTableModel(s);
currentiterationplanTable = new JTable(currentiterationplanModel);
currentiterationplanTable.setColumnSelectionAllowed(false);
currentiterationplanTable.setRowSelectionAllowed(false);
currentiterationplanTable.addMouseListener(this);
currentiterationplanTable.getTableHeader().setReorderingAllowed(false);
// make it so that the user can make each column disappear if they want:
numCols = currentiterationplanTable.getColumnCount();
for(int i=0; i<numCols; i++)
{
currentiterationplanTable.getColumnModel().getColumn(i).setMinWidth(0);
}
acceptancetestsModel = new AcceptanceTestsTableModel(s);
acceptancetestsTable = new JTable(acceptancetestsModel);
acceptancetestsTable.setColumnSelectionAllowed(false);
acceptancetestsTable.setRowSelectionAllowed(false);
acceptancetestsTable.addMouseListener(this);
acceptancetestsTable.getTableHeader().setReorderingAllowed(false);
// make it so that the user can make each column disappear if they want:
numCols = acceptancetestsTable.getColumnCount();
for(int i=0; i<numCols; i++)
{
acceptancetestsTable.getColumnModel().getColumn(i).setMinWidth(0);
}
designModel = new DesignTableModel(s);
designTable = new JTable(designModel);
designTable.setColumnSelectionAllowed(false);
designTable.setRowSelectionAllowed(false);
designTable.addMouseListener(this);
designTable.getTableHeader().setReorderingAllowed(false);
// make it so that the user can make each column disappear if they want:
numCols = designTable.getColumnCount();
for(int i=0; i<numCols; i++)
{
designTable.getColumnModel().getColumn(i).setMinWidth(0);
}
unittestsModel = new UnitTestsTableModel(s);
unittestsTable = new JTable(unittestsModel);
unittestsTable.setColumnSelectionAllowed(false);
unittestsTable.setRowSelectionAllowed(false);
unittestsTable.addMouseListener(this);
unittestsTable.getTableHeader().setReorderingAllowed(false);
// make it so that the user can make each column disappear if they want:
numCols = unittestsTable.getColumnCount();
for(int i=0; i<numCols; i++)
{
unittestsTable.getColumnModel().getColumn(i).setMinWidth(0);
}
codeModel = new CodeTableModel(s);
codeTable = new JTable(codeModel);
codeTable.setColumnSelectionAllowed(false);
codeTable.setRowSelectionAllowed(false);
codeTable.addMouseListener(this);
codeTable.getTableHeader().setReorderingAllowed(false);
// make it so that the user can make each column disappear if they want:
numCols = codeTable.getColumnCount();
for(int i=0; i<numCols; i++)
{
codeTable.getColumnModel().getColumn(i).setMinWidth(0);
}

// right click menu:
popup = new JPopupMenu();
popupListener = new PopupListener(popup,gui);

// Create panes:
JScrollPane userstoriesPane = new JScrollPane(userstoriesTable);
JScrollPane releaseplanPane = new JScrollPane(releaseplanTable);
JScrollPane currentiterationplanPane = new JScrollPane(currentiterationplanTable);
JScrollPane acceptancetestsPane = new JScrollPane(acceptancetestsTable);
JScrollPane designPane = new JScrollPane(designTable);
JScrollPane unittestsPane = new JScrollPane(unittestsTable);
JScrollPane codePane = new JScrollPane(codeTable);

// Table headers:
userstoriesTitlePane = new JPanel();
userstoriesTitlePane.add(new JLabel("UserStoriess:"));
releaseplanTitlePane = new JPanel();
releaseplanTitlePane.add(new JLabel("ReleasePlans:"));
currentiterationplanTitlePane = new JPanel();
currentiterationplanTitlePane.add(new JLabel("CurrentIterationPlans:"));
acceptancetestsTitlePane = new JPanel();
acceptancetestsTitlePane.add(new JLabel("AcceptanceTestss:"));
designTitlePane = new JPanel();
designTitlePane.add(new JLabel("Designs:"));
unittestsTitlePane = new JPanel();
unittestsTitlePane.add(new JLabel("UnitTestss:"));
codeTitlePane = new JPanel();
codeTitlePane.add(new JLabel("Codes:"));

// Create main pane:
mainPane = new JPanel();
mainPane.setLayout(new BoxLayout(mainPane, BoxLayout.Y_AXIS));

// Add panes to main pane:
mainPane.add(userstoriesTitlePane);
mainPane.add(userstoriesPane);
mainPane.add(releaseplanTitlePane);
mainPane.add(releaseplanPane);
mainPane.add(currentiterationplanTitlePane);
mainPane.add(currentiterationplanPane);
mainPane.add(acceptancetestsTitlePane);
mainPane.add(acceptancetestsPane);
mainPane.add(designTitlePane);
mainPane.add(designPane);
mainPane.add(unittestsTitlePane);
mainPane.add(unittestsPane);
mainPane.add(codeTitlePane);
mainPane.add(codePane);

// Set main window frame properties:
setBackground(Color.white);
setContentPane(mainPane);
setVisible(false);
pack();
validate();

resetHeight();
}


public void mousePressed(MouseEvent me){}
public void mouseClicked(MouseEvent me){}
public void mouseEntered(MouseEvent me){}
public void mouseExited(MouseEvent me){}

public void mouseReleased(MouseEvent me)
{
Point p = me.getPoint();

if(me.isPopupTrigger())
{
if(me.getComponent().equals(userstoriesTable)) // correct table
{
createPopupMenu(userstoriesTable, p);
}
else if(me.getComponent().equals(releaseplanTable)) // correct table
{
createPopupMenu(releaseplanTable, p);
}
else if(me.getComponent().equals(currentiterationplanTable)) // correct table
{
createPopupMenu(currentiterationplanTable, p);
}
else if(me.getComponent().equals(acceptancetestsTable)) // correct table
{
createPopupMenu(acceptancetestsTable, p);
}
else if(me.getComponent().equals(designTable)) // correct table
{
createPopupMenu(designTable, p);
}
else if(me.getComponent().equals(unittestsTable)) // correct table
{
createPopupMenu(unittestsTable, p);
}
else if(me.getComponent().equals(codeTable)) // correct table
{
createPopupMenu(codeTable, p);
}
}
}


public void actionPerformed(ActionEvent e)	// dealing with actions generated by popup menus
{
Object source = e.getSource();
if(source instanceof JMenuItem)
{
String itemText = ((JMenuItem)source).getText();
if(itemText.equals("Hide"))
{
if(selectedTable != null)
{
selectedTable.getColumnModel().getColumn(realColumnIndex).setMaxWidth(0);
}
}
else // an item on the "Unhide" menu
{
if(selectedTable != null)
{
TableModel model = selectedTable.getModel();
TableColumn column = null;
if(model instanceof UserStoriesTableModel)
{
column = selectedTable.getColumnModel().getColumn(((UserStoriesTableModel)selectedTable.getModel()).getColumnIndex(itemText));
}
else if(model instanceof ReleasePlanTableModel)
{
column = selectedTable.getColumnModel().getColumn(((ReleasePlanTableModel)selectedTable.getModel()).getColumnIndex(itemText));
}
else if(model instanceof CurrentIterationPlanTableModel)
{
column = selectedTable.getColumnModel().getColumn(((CurrentIterationPlanTableModel)selectedTable.getModel()).getColumnIndex(itemText));
}
else if(model instanceof AcceptanceTestsTableModel)
{
column = selectedTable.getColumnModel().getColumn(((AcceptanceTestsTableModel)selectedTable.getModel()).getColumnIndex(itemText));
}
else if(model instanceof DesignTableModel)
{
column = selectedTable.getColumnModel().getColumn(((DesignTableModel)selectedTable.getModel()).getColumnIndex(itemText));
}
else if(model instanceof UnitTestsTableModel)
{
column = selectedTable.getColumnModel().getColumn(((UnitTestsTableModel)selectedTable.getModel()).getColumnIndex(itemText));
}
else if(model instanceof CodeTableModel)
{
column = selectedTable.getColumnModel().getColumn(((CodeTableModel)selectedTable.getModel()).getColumnIndex(itemText));
}
if(column != null)
{
column.setMinWidth(0);
column.setMaxWidth(2147483647);
column.setPreferredWidth(selectedTable.getWidth() / (selectedTable.getColumnCount() - getAllHiddenColumnIndices(selectedTable).size() + 1));
}
}
}
}
}


public void createPopupMenu(JTable table, Point p)
{
popup.removeAll();

int colIndex = table.columnAtPoint(p);
realColumnIndex = table.convertColumnIndexToModel(colIndex);

Vector<Integer> hiddenCols = getAllHiddenColumnIndices(table);

if((realColumnIndex >= 0) || (hiddenCols.size() > 0)) // user clicked on a column and/or there is at least one hidden column
{
if(realColumnIndex >= 0)
{
JMenuItem hideItem = new JMenuItem("Hide");
hideItem.addActionListener(this);
popup.add(hideItem);
}

if(hiddenCols.size() > 0) // there is at least one hidden column
{
JMenu unhideMenu = new JMenu("Unhide");
for(int i=0; i<hiddenCols.size(); i++)
{
int index = hiddenCols.elementAt(i).intValue();
JMenuItem tempItem = new JMenuItem(table.getColumnName(index));
tempItem.addActionListener(this);
unhideMenu.add(tempItem);
}
if(popup.getComponents().length > 0) // already has the hide menu item
{
popup.addSeparator();
}
popup.add(unhideMenu);
}

addMouseListener(popupListener);
popup.show(table, (int)p.getX(), (int)p.getY());
selectedTable = table;
repaint();
}
}


public void update()
{
DefaultTableCellRenderer rightAlignRenderer = new DefaultTableCellRenderer();
rightAlignRenderer.setHorizontalAlignment(JLabel.RIGHT);
userstoriesModel.update();
if (!state.getClock().isStopped()) { // game not over
userstoriesTable.getColumnModel().getColumn(userstoriesModel.getColumnIndex("NumUserStoriesSpecified")).setCellRenderer(rightAlignRenderer);
userstoriesTable.getColumnModel().getColumn(userstoriesModel.getColumnIndex("NumUserStoriesImplemented")).setCellRenderer(rightAlignRenderer);
userstoriesTable.getColumnModel().getColumn(userstoriesModel.getColumnIndex("SpecificationCompleteness")).setCellRenderer(rightAlignRenderer);
userstoriesTable.getColumnModel().getColumn(userstoriesModel.getColumnIndex("ImplementationCompleteness")).setCellRenderer(rightAlignRenderer);
userstoriesTable.getColumnModel().getColumn(userstoriesModel.getColumnIndex("NumUserStoriesIntegrated")).setCellRenderer(rightAlignRenderer);
userstoriesTable.getColumnModel().getColumn(userstoriesModel.getColumnIndex("PercentErroneous")).setCellRenderer(rightAlignRenderer);
}
else { // game over
userstoriesTable.getColumnModel().getColumn(userstoriesModel.getColumnIndex("NumUserStoriesSpecified")).setCellRenderer(rightAlignRenderer);
userstoriesTable.getColumnModel().getColumn(userstoriesModel.getColumnIndex("NumUserStoriesImplemented")).setCellRenderer(rightAlignRenderer);
userstoriesTable.getColumnModel().getColumn(userstoriesModel.getColumnIndex("SpecificationCompleteness")).setCellRenderer(rightAlignRenderer);
userstoriesTable.getColumnModel().getColumn(userstoriesModel.getColumnIndex("ImplementationCompleteness")).setCellRenderer(rightAlignRenderer);
userstoriesTable.getColumnModel().getColumn(userstoriesModel.getColumnIndex("NumUserStoriesIntegrated")).setCellRenderer(rightAlignRenderer);
userstoriesTable.getColumnModel().getColumn(userstoriesModel.getColumnIndex("PercentErroneous")).setCellRenderer(rightAlignRenderer);
}
userstoriesTable.update(userstoriesTable.getGraphics());
releaseplanModel.update();
if (!state.getClock().isStopped()) { // game not over
releaseplanTable.getColumnModel().getColumn(releaseplanModel.getColumnIndex("Completeness")).setCellRenderer(rightAlignRenderer);
}
else { // game over
releaseplanTable.getColumnModel().getColumn(releaseplanModel.getColumnIndex("Completeness")).setCellRenderer(rightAlignRenderer);
}
releaseplanTable.update(releaseplanTable.getGraphics());
currentiterationplanModel.update();
if (!state.getClock().isStopped()) { // game not over
currentiterationplanTable.getColumnModel().getColumn(currentiterationplanModel.getColumnIndex("Completeness")).setCellRenderer(rightAlignRenderer);
}
else { // game over
currentiterationplanTable.getColumnModel().getColumn(currentiterationplanModel.getColumnIndex("Completeness")).setCellRenderer(rightAlignRenderer);
}
currentiterationplanTable.update(currentiterationplanTable.getGraphics());
acceptancetestsModel.update();
if (!state.getClock().isStopped()) { // game not over
acceptancetestsTable.getColumnModel().getColumn(acceptancetestsModel.getColumnIndex("Completeness")).setCellRenderer(rightAlignRenderer);
acceptancetestsTable.getColumnModel().getColumn(acceptancetestsModel.getColumnIndex("TestsRun")).setCellRenderer(rightAlignRenderer);
acceptancetestsTable.getColumnModel().getColumn(acceptancetestsModel.getColumnIndex("TestsFailed")).setCellRenderer(rightAlignRenderer);
}
else { // game over
acceptancetestsTable.getColumnModel().getColumn(acceptancetestsModel.getColumnIndex("Completeness")).setCellRenderer(rightAlignRenderer);
acceptancetestsTable.getColumnModel().getColumn(acceptancetestsModel.getColumnIndex("TestsRun")).setCellRenderer(rightAlignRenderer);
acceptancetestsTable.getColumnModel().getColumn(acceptancetestsModel.getColumnIndex("TestsFailed")).setCellRenderer(rightAlignRenderer);
}
acceptancetestsTable.update(acceptancetestsTable.getGraphics());
designModel.update();
if (!state.getClock().isStopped()) { // game not over
designTable.getColumnModel().getColumn(designModel.getColumnIndex("NumCRCCardsCompleted")).setCellRenderer(rightAlignRenderer);
}
else { // game over
designTable.getColumnModel().getColumn(designModel.getColumnIndex("NumCRCCardsCompleted")).setCellRenderer(rightAlignRenderer);
}
designTable.update(designTable.getGraphics());
unittestsModel.update();
if (!state.getClock().isStopped()) { // game not over
unittestsTable.getColumnModel().getColumn(unittestsModel.getColumnIndex("Completeness")).setCellRenderer(rightAlignRenderer);
}
else { // game over
unittestsTable.getColumnModel().getColumn(unittestsModel.getColumnIndex("Completeness")).setCellRenderer(rightAlignRenderer);
}
unittestsTable.update(unittestsTable.getGraphics());
codeModel.update();
if (!state.getClock().isStopped()) { // game not over
codeTable.getColumnModel().getColumn(codeModel.getColumnIndex("PercentErroneous")).setCellRenderer(rightAlignRenderer);
codeTable.getColumnModel().getColumn(codeModel.getColumnIndex("Completeness")).setCellRenderer(rightAlignRenderer);
codeTable.getColumnModel().getColumn(codeModel.getColumnIndex("PercentRefactored")).setCellRenderer(rightAlignRenderer);
codeTable.getColumnModel().getColumn(codeModel.getColumnIndex("PercentIntegrated")).setCellRenderer(rightAlignRenderer);
}
else { // game over
codeTable.getColumnModel().getColumn(codeModel.getColumnIndex("PercentErroneous")).setCellRenderer(rightAlignRenderer);
codeTable.getColumnModel().getColumn(codeModel.getColumnIndex("Completeness")).setCellRenderer(rightAlignRenderer);
codeTable.getColumnModel().getColumn(codeModel.getColumnIndex("PercentRefactored")).setCellRenderer(rightAlignRenderer);
codeTable.getColumnModel().getColumn(codeModel.getColumnIndex("PercentIntegrated")).setCellRenderer(rightAlignRenderer);
}
codeTable.update(codeTable.getGraphics());
resetHeight();
}
private void resetHeight()
{
// Set appropriate height:
double height = 0;
height += ((userstoriesTable.getRowHeight() + (userstoriesTable.getRowMargin() * 2)) * (userstoriesTable.getRowCount() + 1));
height += userstoriesTitlePane.getSize().getHeight();
height += ((releaseplanTable.getRowHeight() + (releaseplanTable.getRowMargin() * 2)) * (releaseplanTable.getRowCount() + 1));
height += releaseplanTitlePane.getSize().getHeight();
height += ((currentiterationplanTable.getRowHeight() + (currentiterationplanTable.getRowMargin() * 2)) * (currentiterationplanTable.getRowCount() + 1));
height += currentiterationplanTitlePane.getSize().getHeight();
height += ((acceptancetestsTable.getRowHeight() + (acceptancetestsTable.getRowMargin() * 2)) * (acceptancetestsTable.getRowCount() + 1));
height += acceptancetestsTitlePane.getSize().getHeight();
height += ((designTable.getRowHeight() + (designTable.getRowMargin() * 2)) * (designTable.getRowCount() + 1));
height += designTitlePane.getSize().getHeight();
height += ((unittestsTable.getRowHeight() + (unittestsTable.getRowMargin() * 2)) * (unittestsTable.getRowCount() + 1));
height += unittestsTitlePane.getSize().getHeight();
height += ((codeTable.getRowHeight() + (codeTable.getRowMargin() * 2)) * (codeTable.getRowCount() + 1));
height += codeTitlePane.getSize().getHeight();

mainPane.setPreferredSize(new Dimension((int)(mainPane.getSize().getWidth()), (int)height));
pack();
validate();
repaint();
}



private Vector<Integer> getAllHiddenColumnIndices(JTable table)
{
Vector<Integer> hiddenCols = new Vector<Integer>();
int numCols = table.getColumnModel().getColumnCount();
for(int i=0; i<numCols; i++)
{
TableColumn col = table.getColumnModel().getColumn(i);
if(col.getWidth() == 0) // hidden
{
hiddenCols.add(new Integer(i));
}
}
return hiddenCols;
}
}