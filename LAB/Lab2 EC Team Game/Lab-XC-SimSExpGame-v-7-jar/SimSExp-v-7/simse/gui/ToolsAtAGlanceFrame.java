/* File generated by: simse.codegenerator.guigenerator.AtAGlanceFramesGenerator */
package simse.gui;

import simse.state.*;

import java.awt.event.*;
import java.awt.*;
import java.awt.Dimension;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.event.*;
import javax.swing.table.*;
import javax.swing.border.*;
import java.util.*;
import java.text.*;
import java.awt.Color;

public class ToolsAtAGlanceFrame extends JFrame implements MouseListener, ActionListener
{

private State state;

private JPopupMenu popup;
private PopupListener popupListener;
private JTable crccardsTable;
private CRCCardsTableModel crccardsModel;
private JPanel crccardsTitlePane;
private JTable unittestingframeworkTable;
private UnitTestingFrameworkTableModel unittestingframeworkModel;
private JPanel unittestingframeworkTitlePane;
private JTable codingstandardTable;
private CodingStandardTableModel codingstandardModel;
private JPanel codingstandardTitlePane;
private JTable refactoringtoolTable;
private RefactoringToolTableModel refactoringtoolModel;
private JPanel refactoringtoolTitlePane;
private JPanel mainPane;

private int realColumnIndex; // index of selected column
private JTable selectedTable; // selected table

public ToolsAtAGlanceFrame(State s,SimSEGUI gui)
{
state = s;
// Set window title:
setTitle("Tools At-A-Glance");

// Create tables:
int numCols;

crccardsModel = new CRCCardsTableModel(s);
crccardsTable = new JTable(crccardsModel);
crccardsTable.setColumnSelectionAllowed(false);
crccardsTable.setRowSelectionAllowed(false);
crccardsTable.addMouseListener(this);
crccardsTable.getTableHeader().setReorderingAllowed(false);
// make it so that the user can make each column disappear if they want:
numCols = crccardsTable.getColumnCount();
for(int i=0; i<numCols; i++)
{
crccardsTable.getColumnModel().getColumn(i).setMinWidth(0);
}
unittestingframeworkModel = new UnitTestingFrameworkTableModel(s);
unittestingframeworkTable = new JTable(unittestingframeworkModel);
unittestingframeworkTable.setColumnSelectionAllowed(false);
unittestingframeworkTable.setRowSelectionAllowed(false);
unittestingframeworkTable.addMouseListener(this);
unittestingframeworkTable.getTableHeader().setReorderingAllowed(false);
// make it so that the user can make each column disappear if they want:
numCols = unittestingframeworkTable.getColumnCount();
for(int i=0; i<numCols; i++)
{
unittestingframeworkTable.getColumnModel().getColumn(i).setMinWidth(0);
}
codingstandardModel = new CodingStandardTableModel(s);
codingstandardTable = new JTable(codingstandardModel);
codingstandardTable.setColumnSelectionAllowed(false);
codingstandardTable.setRowSelectionAllowed(false);
codingstandardTable.addMouseListener(this);
codingstandardTable.getTableHeader().setReorderingAllowed(false);
// make it so that the user can make each column disappear if they want:
numCols = codingstandardTable.getColumnCount();
for(int i=0; i<numCols; i++)
{
codingstandardTable.getColumnModel().getColumn(i).setMinWidth(0);
}
refactoringtoolModel = new RefactoringToolTableModel(s);
refactoringtoolTable = new JTable(refactoringtoolModel);
refactoringtoolTable.setColumnSelectionAllowed(false);
refactoringtoolTable.setRowSelectionAllowed(false);
refactoringtoolTable.addMouseListener(this);
refactoringtoolTable.getTableHeader().setReorderingAllowed(false);
// make it so that the user can make each column disappear if they want:
numCols = refactoringtoolTable.getColumnCount();
for(int i=0; i<numCols; i++)
{
refactoringtoolTable.getColumnModel().getColumn(i).setMinWidth(0);
}

// right click menu:
popup = new JPopupMenu();
popupListener = new PopupListener(popup,gui);

// Create panes:
JScrollPane crccardsPane = new JScrollPane(crccardsTable);
JScrollPane unittestingframeworkPane = new JScrollPane(unittestingframeworkTable);
JScrollPane codingstandardPane = new JScrollPane(codingstandardTable);
JScrollPane refactoringtoolPane = new JScrollPane(refactoringtoolTable);

// Table headers:
crccardsTitlePane = new JPanel();
crccardsTitlePane.add(new JLabel("CRCCardss:"));
unittestingframeworkTitlePane = new JPanel();
unittestingframeworkTitlePane.add(new JLabel("UnitTestingFrameworks:"));
codingstandardTitlePane = new JPanel();
codingstandardTitlePane.add(new JLabel("CodingStandards:"));
refactoringtoolTitlePane = new JPanel();
refactoringtoolTitlePane.add(new JLabel("RefactoringTools:"));

// Create main pane:
mainPane = new JPanel();
mainPane.setLayout(new BoxLayout(mainPane, BoxLayout.Y_AXIS));

// Add panes to main pane:
mainPane.add(crccardsTitlePane);
mainPane.add(crccardsPane);
mainPane.add(unittestingframeworkTitlePane);
mainPane.add(unittestingframeworkPane);
mainPane.add(codingstandardTitlePane);
mainPane.add(codingstandardPane);
mainPane.add(refactoringtoolTitlePane);
mainPane.add(refactoringtoolPane);

// Set main window frame properties:
setBackground(Color.white);
setContentPane(mainPane);
setVisible(false);
pack();
validate();

resetHeight();
}


public void mousePressed(MouseEvent me){}
public void mouseClicked(MouseEvent me){}
public void mouseEntered(MouseEvent me){}
public void mouseExited(MouseEvent me){}

public void mouseReleased(MouseEvent me)
{
Point p = me.getPoint();

if(me.isPopupTrigger())
{
if(me.getComponent().equals(crccardsTable)) // correct table
{
createPopupMenu(crccardsTable, p);
}
else if(me.getComponent().equals(unittestingframeworkTable)) // correct table
{
createPopupMenu(unittestingframeworkTable, p);
}
else if(me.getComponent().equals(codingstandardTable)) // correct table
{
createPopupMenu(codingstandardTable, p);
}
else if(me.getComponent().equals(refactoringtoolTable)) // correct table
{
createPopupMenu(refactoringtoolTable, p);
}
}
}


public void actionPerformed(ActionEvent e)	// dealing with actions generated by popup menus
{
Object source = e.getSource();
if(source instanceof JMenuItem)
{
String itemText = ((JMenuItem)source).getText();
if(itemText.equals("Hide"))
{
if(selectedTable != null)
{
selectedTable.getColumnModel().getColumn(realColumnIndex).setMaxWidth(0);
}
}
else // an item on the "Unhide" menu
{
if(selectedTable != null)
{
TableModel model = selectedTable.getModel();
TableColumn column = null;
if(model instanceof CRCCardsTableModel)
{
column = selectedTable.getColumnModel().getColumn(((CRCCardsTableModel)selectedTable.getModel()).getColumnIndex(itemText));
}
else if(model instanceof UnitTestingFrameworkTableModel)
{
column = selectedTable.getColumnModel().getColumn(((UnitTestingFrameworkTableModel)selectedTable.getModel()).getColumnIndex(itemText));
}
else if(model instanceof CodingStandardTableModel)
{
column = selectedTable.getColumnModel().getColumn(((CodingStandardTableModel)selectedTable.getModel()).getColumnIndex(itemText));
}
else if(model instanceof RefactoringToolTableModel)
{
column = selectedTable.getColumnModel().getColumn(((RefactoringToolTableModel)selectedTable.getModel()).getColumnIndex(itemText));
}
if(column != null)
{
column.setMinWidth(0);
column.setMaxWidth(2147483647);
column.setPreferredWidth(selectedTable.getWidth() / (selectedTable.getColumnCount() - getAllHiddenColumnIndices(selectedTable).size() + 1));
}
}
}
}
}


public void createPopupMenu(JTable table, Point p)
{
popup.removeAll();

int colIndex = table.columnAtPoint(p);
realColumnIndex = table.convertColumnIndexToModel(colIndex);

Vector<Integer> hiddenCols = getAllHiddenColumnIndices(table);

if((realColumnIndex >= 0) || (hiddenCols.size() > 0)) // user clicked on a column and/or there is at least one hidden column
{
if(realColumnIndex >= 0)
{
JMenuItem hideItem = new JMenuItem("Hide");
hideItem.addActionListener(this);
popup.add(hideItem);
}

if(hiddenCols.size() > 0) // there is at least one hidden column
{
JMenu unhideMenu = new JMenu("Unhide");
for(int i=0; i<hiddenCols.size(); i++)
{
int index = hiddenCols.elementAt(i).intValue();
JMenuItem tempItem = new JMenuItem(table.getColumnName(index));
tempItem.addActionListener(this);
unhideMenu.add(tempItem);
}
if(popup.getComponents().length > 0) // already has the hide menu item
{
popup.addSeparator();
}
popup.add(unhideMenu);
}

addMouseListener(popupListener);
popup.show(table, (int)p.getX(), (int)p.getY());
selectedTable = table;
repaint();
}
}


public void update()
{
DefaultTableCellRenderer rightAlignRenderer = new DefaultTableCellRenderer();
rightAlignRenderer.setHorizontalAlignment(JLabel.RIGHT);
crccardsModel.update();
if (!state.getClock().isStopped()) { // game not over
}
else { // game over
}
crccardsTable.update(crccardsTable.getGraphics());
unittestingframeworkModel.update();
if (!state.getClock().isStopped()) { // game not over
}
else { // game over
unittestingframeworkTable.getColumnModel().getColumn(unittestingframeworkModel.getColumnIndex("ProductivityIncreaseFactor")).setCellRenderer(rightAlignRenderer);
}
unittestingframeworkTable.update(unittestingframeworkTable.getGraphics());
codingstandardModel.update();
if (!state.getClock().isStopped()) { // game not over
}
else { // game over
codingstandardTable.getColumnModel().getColumn(codingstandardModel.getColumnIndex("ProductivityIncreaseFactor")).setCellRenderer(rightAlignRenderer);
}
codingstandardTable.update(codingstandardTable.getGraphics());
refactoringtoolModel.update();
if (!state.getClock().isStopped()) { // game not over
}
else { // game over
refactoringtoolTable.getColumnModel().getColumn(refactoringtoolModel.getColumnIndex("ProductivityIncreaseFactor")).setCellRenderer(rightAlignRenderer);
}
refactoringtoolTable.update(refactoringtoolTable.getGraphics());
resetHeight();
}
private void resetHeight()
{
// Set appropriate height:
double height = 0;
height += ((crccardsTable.getRowHeight() + (crccardsTable.getRowMargin() * 2)) * (crccardsTable.getRowCount() + 1));
height += crccardsTitlePane.getSize().getHeight();
height += ((unittestingframeworkTable.getRowHeight() + (unittestingframeworkTable.getRowMargin() * 2)) * (unittestingframeworkTable.getRowCount() + 1));
height += unittestingframeworkTitlePane.getSize().getHeight();
height += ((codingstandardTable.getRowHeight() + (codingstandardTable.getRowMargin() * 2)) * (codingstandardTable.getRowCount() + 1));
height += codingstandardTitlePane.getSize().getHeight();
height += ((refactoringtoolTable.getRowHeight() + (refactoringtoolTable.getRowMargin() * 2)) * (refactoringtoolTable.getRowCount() + 1));
height += refactoringtoolTitlePane.getSize().getHeight();

mainPane.setPreferredSize(new Dimension((int)(mainPane.getSize().getWidth()), (int)height));
pack();
validate();
repaint();
}



private Vector<Integer> getAllHiddenColumnIndices(JTable table)
{
Vector<Integer> hiddenCols = new Vector<Integer>();
int numCols = table.getColumnModel().getColumnCount();
for(int i=0; i<numCols; i++)
{
TableColumn col = table.getColumnModel().getColumn(i);
if(col.getWidth() == 0) // hidden
{
hiddenCols.add(new Integer(i));
}
}
return hiddenCols;
}
}