/* File generated by: simse.codegenerator.guigenerator.AttributePanelGenerator */
package simse.gui;
import simse.engine.*;
import simse.state.*;
import simse.adts.objects.*;

import java.text.*;
import java.util.*;
import java.awt.event.*;
import java.awt.*;
import java.awt.Dimension;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.event.*;
import java.awt.Color;
import java.io.*;

public class AttributePanel extends JPanel
{
private final int ATTRIBUTE_LIST_CAPACITY = 5; // number of attributes that can be displayed in a list without making the list scrollable

private GridBagLayout gbl;
private ClockPanel clockPane;

private State state;
private NumberFormat numFormat;

private JScrollPane attributePaneLeft;
private JScrollPane attributePaneRight;
private JList attributeListLeft;
private JList attributeListRight;

private Vector<String> attributes;
private SSObject objInFocus = null;
private ImageIcon displayedIcon;

private JLabel selectedIcon;
private JPanel iconPanel;

private Image border;
private Image iconBorder;

private boolean guiChanged;

public AttributePanel(SimSEGUI g, State s, Engine e)
{
gbl = new GridBagLayout();
setLayout(gbl);

border = ImageLoader.getImageFromURL("/simse/gui/images/layout/border.gif");
iconBorder = ImageLoader.getImageFromURL("/simse/gui/images/layout/iconBorder.gif");

state = s;
clockPane = new ClockPanel(g,s,e);
clockPane.setPreferredSize(new Dimension(250,100));

numFormat = NumberFormat.getNumberInstance(Locale.US);

attributes = new Vector<String>();

attributeListLeft = new JList();
attributePaneLeft = new JScrollPane(attributeListLeft, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
attributePaneLeft.setPreferredSize(new Dimension(300,95));

attributeListRight = new JList();
attributePaneRight = new JScrollPane(attributeListRight, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
attributePaneRight.setPreferredSize(new Dimension(300,95));

JPanel attributePane = new JPanel();
((FlowLayout)attributePane.getLayout()).setHgap(5);
((FlowLayout)attributePane.getLayout()).setVgap(0);
attributePane.add(attributePaneLeft);
attributePane.add(attributePaneRight);
attributePane.setBackground(new Color(102, 102, 102, 255));

iconPanel = new JPanel(gbl);
iconPanel.setBackground(new Color(0,0,0,0));
iconPanel.setPreferredSize(new Dimension(90,90));
selectedIcon = new JLabel(new ImageIcon(ImageLoader.getImageFromURL("/simse/gui/images/grid.gif")));
selectedIcon.setOpaque(true);
selectedIcon.setPreferredSize(new Dimension(50,50));
selectedIcon.setMinimumSize(new Dimension(50,50));

GridBagConstraints gbc;
gbc = new GridBagConstraints(0,0,1,1, 0,0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(-3,5,0,0), 0,0);
gbl.setConstraints(selectedIcon,gbc);
iconPanel.add(selectedIcon);
add(iconPanel);

gbc = new GridBagConstraints(2, 0, 1, 1, 1, 1, GridBagConstraints.SOUTH, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0);
gbl.setConstraints(attributePane, gbc);
add(attributePane);

gbc = new GridBagConstraints(3, 0, 1, 1, 1, 1, GridBagConstraints.SOUTHEAST, GridBagConstraints.NONE, new Insets(10, 0, 0, 0), 0, 0);
gbl.setConstraints(clockPane,gbc);
add(clockPane);
}


public void paintComponent(Graphics g)
{
Dimension d = getSize();
int width = (int)d.getWidth();
g.setColor(new Color(102,102,102,255));
g.fillRect(0,0,width,110);

// repeat the border across the width of screen:
for (int i = 0; i < width; i+=100)
{
g.drawImage(border,i,0,this);
}
// draw the design for the selectedIcon
g.drawImage(iconBorder,05,11,this);
}


public void setObjectInFocus(SSObject obj, Icon img)
{
objInFocus = obj;
if(img != null)
{
setIcon(img);
}
updateAttributeList();
}


public void update()
{
updateAttributeList();
clockPane.update();
}


public void setGUIChanged()
{
guiChanged = true;
}

private void updateAttributeList()
{
if(false)
{
}
else
{
attributes.clear();

// Employee:
if((objInFocus != null) && state.getEmployeeStateRepository().getAll().contains(objInFocus))
{
if(objInFocus instanceof SoftwareDeveloper)
{
SoftwareDeveloper p = (SoftwareDeveloper)objInFocus;
attributes.add("<html><font size=2>Type: SoftwareDeveloper</font></html>");
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>Name: " + p.getName() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>Name: " + p.getName() + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>SoftwareDevelopmentExperience: " + p.getSoftwareDevelopmentExperience() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>SoftwareDevelopmentExperience: " + p.getSoftwareDevelopmentExperience() + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>KnowsCodingStandard: " + p.getKnowsCodingStandard() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>KnowsCodingStandard: " + p.getKnowsCodingStandard() + "</font></html>");
}
}
else if(objInFocus instanceof Manager)
{
Manager p = (Manager)objInFocus;
attributes.add("<html><font size=2>Type: Manager</font></html>");
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>Name: " + p.getName() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>Name: " + p.getName() + "</font></html>");
}
}
else if(objInFocus instanceof CustomerRep)
{
CustomerRep p = (CustomerRep)objInFocus;
attributes.add("<html><font size=2>Type: CustomerRep</font></html>");
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>Name: " + p.getName() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>Name: " + p.getName() + "</font></html>");
}
}
}
// Artifact:
else if((objInFocus != null) && state.getArtifactStateRepository().getAll().contains(objInFocus))
{
if(objInFocus instanceof UserStories)
{
UserStories p = (UserStories)objInFocus;
attributes.add("<html><font size=2>Type: UserStories</font></html>");
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>Name: " + p.getName() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>Name: " + p.getName() + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>NumUserStoriesSpecified: " + numFormat.format(p.getNumUserStoriesSpecified()) + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>NumUserStoriesSpecified: " + numFormat.format(p.getNumUserStoriesSpecified()) + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>Prioritized: " + p.getPrioritized() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>Prioritized: " + p.getPrioritized() + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>NumUserStoriesImplemented: " + numFormat.format(p.getNumUserStoriesImplemented()) + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>NumUserStoriesImplemented: " + numFormat.format(p.getNumUserStoriesImplemented()) + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>SpecificationCompleteness: " + numFormat.format(p.getSpecificationCompleteness()) + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>SpecificationCompleteness: " + numFormat.format(p.getSpecificationCompleteness()) + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>ImplementationCompleteness: " + numFormat.format(p.getImplementationCompleteness()) + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>ImplementationCompleteness: " + numFormat.format(p.getImplementationCompleteness()) + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>NumUserStoriesIntegrated: " + numFormat.format(p.getNumUserStoriesIntegrated()) + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>NumUserStoriesIntegrated: " + numFormat.format(p.getNumUserStoriesIntegrated()) + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>PercentErroneous: " + numFormat.format(p.getPercentErroneous()) + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>PercentErroneous: " + numFormat.format(p.getPercentErroneous()) + "</font></html>");
}
}
else if(objInFocus instanceof ReleasePlan)
{
ReleasePlan p = (ReleasePlan)objInFocus;
attributes.add("<html><font size=2>Type: ReleasePlan</font></html>");
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>Name: " + p.getName() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>Name: " + p.getName() + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>Completeness: " + numFormat.format(p.getCompleteness()) + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>Completeness: " + numFormat.format(p.getCompleteness()) + "</font></html>");
}
}
else if(objInFocus instanceof CurrentIterationPlan)
{
CurrentIterationPlan p = (CurrentIterationPlan)objInFocus;
attributes.add("<html><font size=2>Type: CurrentIterationPlan</font></html>");
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>Name: " + p.getName() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>Name: " + p.getName() + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>Completeness: " + numFormat.format(p.getCompleteness()) + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>Completeness: " + numFormat.format(p.getCompleteness()) + "</font></html>");
}
}
else if(objInFocus instanceof AcceptanceTests)
{
AcceptanceTests p = (AcceptanceTests)objInFocus;
attributes.add("<html><font size=2>Type: AcceptanceTests</font></html>");
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>Description: " + p.getDescription() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>Description: " + p.getDescription() + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>Completeness: " + numFormat.format(p.getCompleteness()) + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>Completeness: " + numFormat.format(p.getCompleteness()) + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>TestsRun: " + numFormat.format(p.getTestsRun()) + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>TestsRun: " + numFormat.format(p.getTestsRun()) + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>TestsFailed: " + numFormat.format(p.getTestsFailed()) + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>TestsFailed: " + numFormat.format(p.getTestsFailed()) + "</font></html>");
}
}
else if(objInFocus instanceof Design)
{
Design p = (Design)objInFocus;
attributes.add("<html><font size=2>Type: Design</font></html>");
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>Description: " + p.getDescription() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>Description: " + p.getDescription() + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>NumCRCCardsCompleted: " + numFormat.format(p.getNumCRCCardsCompleted()) + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>NumCRCCardsCompleted: " + numFormat.format(p.getNumCRCCardsCompleted()) + "</font></html>");
}
}
else if(objInFocus instanceof UnitTests)
{
UnitTests p = (UnitTests)objInFocus;
attributes.add("<html><font size=2>Type: UnitTests</font></html>");
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>Description: " + p.getDescription() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>Description: " + p.getDescription() + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>Completeness: " + numFormat.format(p.getCompleteness()) + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>Completeness: " + numFormat.format(p.getCompleteness()) + "</font></html>");
}
}
else if(objInFocus instanceof Code)
{
Code p = (Code)objInFocus;
attributes.add("<html><font size=2>Type: Code</font></html>");
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>Description: " + p.getDescription() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>Description: " + p.getDescription() + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>PercentErroneous: " + numFormat.format(p.getPercentErroneous()) + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>PercentErroneous: " + numFormat.format(p.getPercentErroneous()) + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>Completeness: " + numFormat.format(p.getCompleteness()) + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>Completeness: " + numFormat.format(p.getCompleteness()) + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>PercentRefactored: " + numFormat.format(p.getPercentRefactored()) + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>PercentRefactored: " + numFormat.format(p.getPercentRefactored()) + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>PercentIntegrated: " + numFormat.format(p.getPercentIntegrated()) + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>PercentIntegrated: " + numFormat.format(p.getPercentIntegrated()) + "</font></html>");
}
}
}
// Tool:
else if((objInFocus != null) && state.getToolStateRepository().getAll().contains(objInFocus))
{
if(objInFocus instanceof CRCCards)
{
CRCCards p = (CRCCards)objInFocus;
attributes.add("<html><font size=2>Type: CRCCards</font></html>");
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>Description: " + p.getDescription() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>Description: " + p.getDescription() + "</font></html>");
}
}
else if(objInFocus instanceof UnitTestingFramework)
{
UnitTestingFramework p = (UnitTestingFramework)objInFocus;
attributes.add("<html><font size=2>Type: UnitTestingFramework</font></html>");
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>Description: " + p.getDescription() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>Description: " + p.getDescription() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>ProductivityIncreaseFactor: " + p.getProductivityIncreaseFactor() + "</font></html>");
}
}
else if(objInFocus instanceof CodingStandard)
{
CodingStandard p = (CodingStandard)objInFocus;
attributes.add("<html><font size=2>Type: CodingStandard</font></html>");
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>Description: " + p.getDescription() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>Description: " + p.getDescription() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(16);
attributes.add("<html><font size=2>ProductivityIncreaseFactor: " + numFormat.format(p.getProductivityIncreaseFactor()) + "</font></html>");
}
}
else if(objInFocus instanceof RefactoringTool)
{
RefactoringTool p = (RefactoringTool)objInFocus;
attributes.add("<html><font size=2>Type: RefactoringTool</font></html>");
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>Description: " + p.getDescription() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>Description: " + p.getDescription() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(16);
attributes.add("<html><font size=2>ProductivityIncreaseFactor: " + numFormat.format(p.getProductivityIncreaseFactor()) + "</font></html>");
}
}
}
// Project:
else if((objInFocus != null) && state.getProjectStateRepository().getAll().contains(objInFocus))
{
if(objInFocus instanceof TheProject)
{
TheProject p = (TheProject)objInFocus;
attributes.add("<html><font size=2>Type: TheProject</font></html>");
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>Name: " + p.getName() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>Name: " + p.getName() + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>CurrentIteration: " + p.getCurrentIteration() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>CurrentIteration: " + p.getCurrentIteration() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
numFormat.setMinimumFractionDigits(0);
numFormat.setMaximumFractionDigits(0);
attributes.add("<html><font size=2>Score: " + numFormat.format(p.getScore()) + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>TimeElapsed: " + p.getTimeElapsed() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>TimeElapsed: " + p.getTimeElapsed() + "</font></html>");
}
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>TimeAllotted: " + p.getTimeAllotted() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>TimeAllotted: " + p.getTimeAllotted() + "</font></html>");
}
}
}
// Customer:
else if((objInFocus != null) && state.getCustomerStateRepository().getAll().contains(objInFocus))
{
if(objInFocus instanceof CustomerRepresentative)
{
CustomerRepresentative p = (CustomerRepresentative)objInFocus;
attributes.add("<html><font size=2>Type: CustomerRepresentative</font></html>");
if(!state.getClock().isStopped()) // game not over
{
attributes.add("<html><font size=2>Name: " + p.getName() + "</font></html>");
}
if(state.getClock().isStopped()) // game is over
{
attributes.add("<html><font size=2>Name: " + p.getName() + "</font></html>");
}
}
}
else
{
setIcon(new ImageIcon(ImageLoader.getImageFromURL("/simse/gui/images/grid.gif")));
}

attributeListLeft.setListData(attributes);
attributeListRight.setListData(new Vector());
validate();

// distribute attributes to both sides, if needed:
Vector<String> rightHandAtts = new Vector<String>();
if(attributes.size() > ATTRIBUTE_LIST_CAPACITY) // need to use 2nd list
{
while((ATTRIBUTE_LIST_CAPACITY) < attributes.size()) // there are still more elements to move to right
{
rightHandAtts.add(attributes.remove(ATTRIBUTE_LIST_CAPACITY)); // remove from left, put on right
}
attributeListRight.setListData(rightHandAtts);
attributeListLeft.setListData(attributes);
validate();
repaint();

if(attributePaneLeft.getHorizontalScrollBar().isVisible()) // need to move one more over to account for extra space that
// scrollbar takes up
{
rightHandAtts.add(0, attributes.remove(attributes.size() - 1)); // move
attributeListRight.setListData(rightHandAtts);
attributeListLeft.setListData(attributes);
}
}
repaint();
guiChanged = false;
}
}

public ClockPanel getClockPanel() {
return clockPane;
}

public void setIcon(Icon img)
{
selectedIcon.setBackground(Color.WHITE);
selectedIcon.setIcon(img);
}
}