/* File generated by: simse.codegenerator.stategenerator.ADTGenerator */
package simse.adts.actions;
import simse.adts.objects.*;
import simse.state.ArtifactStateRepository;
import simse.state.CustomerStateRepository;
import simse.state.EmployeeStateRepository;
import simse.state.ProjectStateRepository;
import simse.state.ToolStateRepository;
import java.util.*;
public class LearnCodingStandardAction extends Action implements Cloneable
{
private Hashtable<Employee, Boolean> developers;
private Hashtable<Tool, Boolean> codingstandards;
private Hashtable<Project, Boolean> projs;
public LearnCodingStandardAction()
{
developers = new Hashtable<Employee, Boolean>();
codingstandards = new Hashtable<Tool, Boolean>();
projs = new Hashtable<Project, Boolean>();
}

public Object clone() {
LearnCodingStandardAction cl = (LearnCodingStandardAction)(super.clone());
Hashtable<Employee, Boolean> cloneddevelopers = new Hashtable<Employee, Boolean>();
cloneddevelopers.putAll(developers);
cl.developers = cloneddevelopers;
Hashtable<Tool, Boolean> clonedcodingstandards = new Hashtable<Tool, Boolean>();
clonedcodingstandards.putAll(codingstandards);
cl.codingstandards = clonedcodingstandards;
Hashtable<Project, Boolean> clonedprojs = new Hashtable<Project, Boolean>();
clonedprojs.putAll(projs);
cl.projs = clonedprojs;
return cl;
}

public Vector<SSObject> getAllParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllDevelopers());
all.addAll(getAllCodingStandards());
all.addAll(getAllProjs());
return all;
}
public Vector<SSObject> getAllActiveParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllActiveDevelopers());
all.addAll(getAllActiveCodingStandards());
all.addAll(getAllActiveProjs());
return all;
}

public Vector<SSObject> getAllInactiveParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllInactiveDevelopers());
all.addAll(getAllInactiveCodingStandards());
all.addAll(getAllInactiveProjs());
return all;
}
public Vector<Employee> getAllDevelopers()
{
Vector<Employee>a = new Vector<Employee>();
Enumeration<Employee> e = developers.keys();
for(int i=0; i<developers.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Employee> getAllActiveDevelopers()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = developers.keys();
for(int i=0; i<developers.size(); i++)
{
Employee key = e.nextElement();
if((developers.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Employee> getAllInactiveDevelopers()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = developers.keys();
for(int i=0; i<developers.size(); i++)
{
Employee key = e.nextElement();
if((developers.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addDeveloper(Employee a)
{
if((developers.containsKey(a)) ||( ((a instanceof SoftwareDeveloper) == false)))
{
return false;
}
else
{
developers.put(a, new Boolean(true));
return true;
}
}

public boolean removeDeveloper(Employee a)
{
if(developers.containsKey(a))
{
developers.remove(a);
return true;
}
return false;
}

public boolean setDeveloperActive(Employee a)
{
if(developers.containsKey(a))
{
developers.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setDeveloperInactive(Employee a)
{
if(developers.containsKey(a))
{
developers.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Tool> getAllCodingStandards()
{
Vector<Tool>a = new Vector<Tool>();
Enumeration<Tool> e = codingstandards.keys();
for(int i=0; i<codingstandards.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Tool> getAllActiveCodingStandards()
{
Vector<Tool> a = new Vector<Tool>();
Enumeration<Tool> e = codingstandards.keys();
for(int i=0; i<codingstandards.size(); i++)
{
Tool key = e.nextElement();
if((codingstandards.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Tool> getAllInactiveCodingStandards()
{
Vector<Tool> a = new Vector<Tool>();
Enumeration<Tool> e = codingstandards.keys();
for(int i=0; i<codingstandards.size(); i++)
{
Tool key = e.nextElement();
if((codingstandards.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addCodingStandard(Tool a)
{
if((codingstandards.containsKey(a)) ||( ((a instanceof CodingStandard) == false)) || (codingstandards.size() >= 1))
{
return false;
}
else
{
codingstandards.put(a, new Boolean(true));
return true;
}
}

public boolean removeCodingStandard(Tool a)
{
if(codingstandards.containsKey(a))
{
codingstandards.remove(a);
return true;
}
return false;
}

public boolean setCodingStandardActive(Tool a)
{
if(codingstandards.containsKey(a))
{
codingstandards.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setCodingStandardInactive(Tool a)
{
if(codingstandards.containsKey(a))
{
codingstandards.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Project> getAllProjs()
{
Vector<Project>a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Project> getAllActiveProjs()
{
Vector<Project> a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
Project key = e.nextElement();
if((projs.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Project> getAllInactiveProjs()
{
Vector<Project> a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
Project key = e.nextElement();
if((projs.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addProj(Project a)
{
if((projs.containsKey(a)) ||( ((a instanceof TheProject) == false)) || (projs.size() >= 1))
{
return false;
}
else
{
projs.put(a, new Boolean(true));
return true;
}
}

public boolean removeProj(Project a)
{
if(projs.containsKey(a))
{
projs.remove(a);
return true;
}
return false;
}

public boolean setProjActive(Project a)
{
if(projs.containsKey(a))
{
projs.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setProjInactive(Project a)
{
if(projs.containsKey(a))
{
projs.put(a, new Boolean(false));
return true;
}
return false;
}
/*
* Replaces all the participants in this action with their equivalent objects
* in the current state. Calling this function solves the problem that happens
* when you clone actions -- their hashtables point to participant objects
* that were part of the previous, non-cloned state. Hence, this function
* should be called after this object is cloned.
*/
public void refetchParticipants(ArtifactStateRepository artifactRep, CustomerStateRepository customerRep, EmployeeStateRepository employeeRep, ProjectStateRepository projectRep, ToolStateRepository toolRep) {
// developer participants:
Hashtable<Employee, Boolean> newDevelopers = new Hashtable<Employee, Boolean>();
Iterator<Map.Entry<Employee, Boolean>> developersIterator = developers.entrySet().iterator();
while (developersIterator.hasNext()) {
Map.Entry<Employee, Boolean> entry = developersIterator.next();
Employee oldDeveloper = entry.getKey();
if (oldDeveloper instanceof SoftwareDeveloper) {
Employee newDeveloper = employeeRep.getSoftwareDeveloperStateRepository().get(((SoftwareDeveloper)oldDeveloper).getName());
Boolean activeStatus = developers.get(oldDeveloper);
newDevelopers.put(newDeveloper, activeStatus);
}
}
developers.clear();
developers.putAll(newDevelopers);

// codingstandard participants:
Hashtable<Tool, Boolean> newCodingStandards = new Hashtable<Tool, Boolean>();
Iterator<Map.Entry<Tool, Boolean>> codingstandardsIterator = codingstandards.entrySet().iterator();
while (codingstandardsIterator.hasNext()) {
Map.Entry<Tool, Boolean> entry = codingstandardsIterator.next();
Tool oldCodingStandard = entry.getKey();
if (oldCodingStandard instanceof CodingStandard) {
Tool newCodingStandard = toolRep.getCodingStandardStateRepository().get(((CodingStandard)oldCodingStandard).getDescription());
Boolean activeStatus = codingstandards.get(oldCodingStandard);
newCodingStandards.put(newCodingStandard, activeStatus);
}
}
codingstandards.clear();
codingstandards.putAll(newCodingStandards);

// proj participants:
Hashtable<Project, Boolean> newProjs = new Hashtable<Project, Boolean>();
Iterator<Map.Entry<Project, Boolean>> projsIterator = projs.entrySet().iterator();
while (projsIterator.hasNext()) {
Map.Entry<Project, Boolean> entry = projsIterator.next();
Project oldProj = entry.getKey();
if (oldProj instanceof TheProject) {
Project newProj = projectRep.getTheProjectStateRepository().get(((TheProject)oldProj).getName());
Boolean activeStatus = projs.get(oldProj);
newProjs.put(newProj, activeStatus);
}
}
projs.clear();
projs.putAll(newProjs);

}
}