/* File generated by: simse.codegenerator.stategenerator.ADTGenerator */
package simse.adts.actions;
import simse.adts.objects.*;
import simse.state.ArtifactStateRepository;
import simse.state.CustomerStateRepository;
import simse.state.EmployeeStateRepository;
import simse.state.ProjectStateRepository;
import simse.state.ToolStateRepository;
import java.util.*;
public class ReleaseCodeAndEndIterationAction extends Action implements Cloneable
{
private Hashtable<Employee, Boolean> emps;
private Hashtable<Artifact, Boolean> codes;
private Hashtable<Project, Boolean> projs;
private Hashtable<Artifact, Boolean> acceptancetestss;
private Hashtable<Artifact, Boolean> releaseplans;
private Hashtable<Artifact, Boolean> userstoriess;
private int timeToLive;
public ReleaseCodeAndEndIterationAction()
{
emps = new Hashtable<Employee, Boolean>();
codes = new Hashtable<Artifact, Boolean>();
projs = new Hashtable<Project, Boolean>();
acceptancetestss = new Hashtable<Artifact, Boolean>();
releaseplans = new Hashtable<Artifact, Boolean>();
userstoriess = new Hashtable<Artifact, Boolean>();
timeToLive = 1;
}

public Object clone() {
ReleaseCodeAndEndIterationAction cl = (ReleaseCodeAndEndIterationAction)(super.clone());
Hashtable<Employee, Boolean> clonedemps = new Hashtable<Employee, Boolean>();
clonedemps.putAll(emps);
cl.emps = clonedemps;
Hashtable<Artifact, Boolean> clonedcodes = new Hashtable<Artifact, Boolean>();
clonedcodes.putAll(codes);
cl.codes = clonedcodes;
Hashtable<Project, Boolean> clonedprojs = new Hashtable<Project, Boolean>();
clonedprojs.putAll(projs);
cl.projs = clonedprojs;
Hashtable<Artifact, Boolean> clonedacceptancetestss = new Hashtable<Artifact, Boolean>();
clonedacceptancetestss.putAll(acceptancetestss);
cl.acceptancetestss = clonedacceptancetestss;
Hashtable<Artifact, Boolean> clonedreleaseplans = new Hashtable<Artifact, Boolean>();
clonedreleaseplans.putAll(releaseplans);
cl.releaseplans = clonedreleaseplans;
Hashtable<Artifact, Boolean> cloneduserstoriess = new Hashtable<Artifact, Boolean>();
cloneduserstoriess.putAll(userstoriess);
cl.userstoriess = cloneduserstoriess;
return cl;
}

public int getTimeToLive()
{
return timeToLive;
}

public void decrementTimeToLive()
{
timeToLive--;
if(timeToLive < 0)
{
timeToLive = 0;
}
}

public Vector<SSObject> getAllParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllEmps());
all.addAll(getAllCodes());
all.addAll(getAllProjs());
all.addAll(getAllAcceptanceTestss());
all.addAll(getAllReleasePlans());
all.addAll(getAllUserStoriess());
return all;
}
public Vector<SSObject> getAllActiveParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllActiveEmps());
all.addAll(getAllActiveCodes());
all.addAll(getAllActiveProjs());
all.addAll(getAllActiveAcceptanceTestss());
all.addAll(getAllActiveReleasePlans());
all.addAll(getAllActiveUserStoriess());
return all;
}

public Vector<SSObject> getAllInactiveParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllInactiveEmps());
all.addAll(getAllInactiveCodes());
all.addAll(getAllInactiveProjs());
all.addAll(getAllInactiveAcceptanceTestss());
all.addAll(getAllInactiveReleasePlans());
all.addAll(getAllInactiveUserStoriess());
return all;
}
public Vector<Employee> getAllEmps()
{
Vector<Employee>a = new Vector<Employee>();
Enumeration<Employee> e = emps.keys();
for(int i=0; i<emps.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Employee> getAllActiveEmps()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = emps.keys();
for(int i=0; i<emps.size(); i++)
{
Employee key = e.nextElement();
if((emps.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Employee> getAllInactiveEmps()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = emps.keys();
for(int i=0; i<emps.size(); i++)
{
Employee key = e.nextElement();
if((emps.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addEmp(Employee a)
{
if((emps.containsKey(a)) ||( ((a instanceof SoftwareDeveloper) == false)) || (emps.size() >= 1))
{
return false;
}
else
{
emps.put(a, new Boolean(true));
return true;
}
}

public boolean removeEmp(Employee a)
{
if(emps.containsKey(a))
{
emps.remove(a);
return true;
}
return false;
}

public boolean setEmpActive(Employee a)
{
if(emps.containsKey(a))
{
emps.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setEmpInactive(Employee a)
{
if(emps.containsKey(a))
{
emps.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Artifact> getAllCodes()
{
Vector<Artifact>a = new Vector<Artifact>();
Enumeration<Artifact> e = codes.keys();
for(int i=0; i<codes.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Artifact> getAllActiveCodes()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = codes.keys();
for(int i=0; i<codes.size(); i++)
{
Artifact key = e.nextElement();
if((codes.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Artifact> getAllInactiveCodes()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = codes.keys();
for(int i=0; i<codes.size(); i++)
{
Artifact key = e.nextElement();
if((codes.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addCode(Artifact a)
{
if((codes.containsKey(a)) ||( ((a instanceof Code) == false)) || (codes.size() >= 1))
{
return false;
}
else
{
codes.put(a, new Boolean(true));
return true;
}
}

public boolean removeCode(Artifact a)
{
if(codes.containsKey(a))
{
codes.remove(a);
return true;
}
return false;
}

public boolean setCodeActive(Artifact a)
{
if(codes.containsKey(a))
{
codes.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setCodeInactive(Artifact a)
{
if(codes.containsKey(a))
{
codes.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Project> getAllProjs()
{
Vector<Project>a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Project> getAllActiveProjs()
{
Vector<Project> a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
Project key = e.nextElement();
if((projs.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Project> getAllInactiveProjs()
{
Vector<Project> a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
Project key = e.nextElement();
if((projs.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addProj(Project a)
{
if((projs.containsKey(a)) ||( ((a instanceof TheProject) == false)) || (projs.size() >= 1))
{
return false;
}
else
{
projs.put(a, new Boolean(true));
return true;
}
}

public boolean removeProj(Project a)
{
if(projs.containsKey(a))
{
projs.remove(a);
return true;
}
return false;
}

public boolean setProjActive(Project a)
{
if(projs.containsKey(a))
{
projs.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setProjInactive(Project a)
{
if(projs.containsKey(a))
{
projs.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Artifact> getAllAcceptanceTestss()
{
Vector<Artifact>a = new Vector<Artifact>();
Enumeration<Artifact> e = acceptancetestss.keys();
for(int i=0; i<acceptancetestss.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Artifact> getAllActiveAcceptanceTestss()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = acceptancetestss.keys();
for(int i=0; i<acceptancetestss.size(); i++)
{
Artifact key = e.nextElement();
if((acceptancetestss.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Artifact> getAllInactiveAcceptanceTestss()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = acceptancetestss.keys();
for(int i=0; i<acceptancetestss.size(); i++)
{
Artifact key = e.nextElement();
if((acceptancetestss.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addAcceptanceTests(Artifact a)
{
if((acceptancetestss.containsKey(a)) ||( ((a instanceof AcceptanceTests) == false)) || (acceptancetestss.size() >= 1))
{
return false;
}
else
{
acceptancetestss.put(a, new Boolean(true));
return true;
}
}

public boolean removeAcceptanceTests(Artifact a)
{
if(acceptancetestss.containsKey(a))
{
acceptancetestss.remove(a);
return true;
}
return false;
}

public boolean setAcceptanceTestsActive(Artifact a)
{
if(acceptancetestss.containsKey(a))
{
acceptancetestss.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setAcceptanceTestsInactive(Artifact a)
{
if(acceptancetestss.containsKey(a))
{
acceptancetestss.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Artifact> getAllReleasePlans()
{
Vector<Artifact>a = new Vector<Artifact>();
Enumeration<Artifact> e = releaseplans.keys();
for(int i=0; i<releaseplans.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Artifact> getAllActiveReleasePlans()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = releaseplans.keys();
for(int i=0; i<releaseplans.size(); i++)
{
Artifact key = e.nextElement();
if((releaseplans.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Artifact> getAllInactiveReleasePlans()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = releaseplans.keys();
for(int i=0; i<releaseplans.size(); i++)
{
Artifact key = e.nextElement();
if((releaseplans.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addReleasePlan(Artifact a)
{
if((releaseplans.containsKey(a)) ||( ((a instanceof ReleasePlan) == false)) || (releaseplans.size() >= 1))
{
return false;
}
else
{
releaseplans.put(a, new Boolean(true));
return true;
}
}

public boolean removeReleasePlan(Artifact a)
{
if(releaseplans.containsKey(a))
{
releaseplans.remove(a);
return true;
}
return false;
}

public boolean setReleasePlanActive(Artifact a)
{
if(releaseplans.containsKey(a))
{
releaseplans.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setReleasePlanInactive(Artifact a)
{
if(releaseplans.containsKey(a))
{
releaseplans.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Artifact> getAllUserStoriess()
{
Vector<Artifact>a = new Vector<Artifact>();
Enumeration<Artifact> e = userstoriess.keys();
for(int i=0; i<userstoriess.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Artifact> getAllActiveUserStoriess()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = userstoriess.keys();
for(int i=0; i<userstoriess.size(); i++)
{
Artifact key = e.nextElement();
if((userstoriess.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Artifact> getAllInactiveUserStoriess()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = userstoriess.keys();
for(int i=0; i<userstoriess.size(); i++)
{
Artifact key = e.nextElement();
if((userstoriess.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addUserStories(Artifact a)
{
if((userstoriess.containsKey(a)) ||( ((a instanceof UserStories) == false)) || (userstoriess.size() >= 1))
{
return false;
}
else
{
userstoriess.put(a, new Boolean(true));
return true;
}
}

public boolean removeUserStories(Artifact a)
{
if(userstoriess.containsKey(a))
{
userstoriess.remove(a);
return true;
}
return false;
}

public boolean setUserStoriesActive(Artifact a)
{
if(userstoriess.containsKey(a))
{
userstoriess.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setUserStoriesInactive(Artifact a)
{
if(userstoriess.containsKey(a))
{
userstoriess.put(a, new Boolean(false));
return true;
}
return false;
}
/*
* Replaces all the participants in this action with their equivalent objects
* in the current state. Calling this function solves the problem that happens
* when you clone actions -- their hashtables point to participant objects
* that were part of the previous, non-cloned state. Hence, this function
* should be called after this object is cloned.
*/
public void refetchParticipants(ArtifactStateRepository artifactRep, CustomerStateRepository customerRep, EmployeeStateRepository employeeRep, ProjectStateRepository projectRep, ToolStateRepository toolRep) {
// emp participants:
Hashtable<Employee, Boolean> newEmps = new Hashtable<Employee, Boolean>();
Iterator<Map.Entry<Employee, Boolean>> empsIterator = emps.entrySet().iterator();
while (empsIterator.hasNext()) {
Map.Entry<Employee, Boolean> entry = empsIterator.next();
Employee oldEmp = entry.getKey();
if (oldEmp instanceof SoftwareDeveloper) {
Employee newEmp = employeeRep.getSoftwareDeveloperStateRepository().get(((SoftwareDeveloper)oldEmp).getName());
Boolean activeStatus = emps.get(oldEmp);
newEmps.put(newEmp, activeStatus);
}
}
emps.clear();
emps.putAll(newEmps);

// code participants:
Hashtable<Artifact, Boolean> newCodes = new Hashtable<Artifact, Boolean>();
Iterator<Map.Entry<Artifact, Boolean>> codesIterator = codes.entrySet().iterator();
while (codesIterator.hasNext()) {
Map.Entry<Artifact, Boolean> entry = codesIterator.next();
Artifact oldCode = entry.getKey();
if (oldCode instanceof Code) {
Artifact newCode = artifactRep.getCodeStateRepository().get(((Code)oldCode).getDescription());
Boolean activeStatus = codes.get(oldCode);
newCodes.put(newCode, activeStatus);
}
}
codes.clear();
codes.putAll(newCodes);

// proj participants:
Hashtable<Project, Boolean> newProjs = new Hashtable<Project, Boolean>();
Iterator<Map.Entry<Project, Boolean>> projsIterator = projs.entrySet().iterator();
while (projsIterator.hasNext()) {
Map.Entry<Project, Boolean> entry = projsIterator.next();
Project oldProj = entry.getKey();
if (oldProj instanceof TheProject) {
Project newProj = projectRep.getTheProjectStateRepository().get(((TheProject)oldProj).getName());
Boolean activeStatus = projs.get(oldProj);
newProjs.put(newProj, activeStatus);
}
}
projs.clear();
projs.putAll(newProjs);

// acceptancetests participants:
Hashtable<Artifact, Boolean> newAcceptanceTestss = new Hashtable<Artifact, Boolean>();
Iterator<Map.Entry<Artifact, Boolean>> acceptancetestssIterator = acceptancetestss.entrySet().iterator();
while (acceptancetestssIterator.hasNext()) {
Map.Entry<Artifact, Boolean> entry = acceptancetestssIterator.next();
Artifact oldAcceptanceTests = entry.getKey();
if (oldAcceptanceTests instanceof AcceptanceTests) {
Artifact newAcceptanceTests = artifactRep.getAcceptanceTestsStateRepository().get(((AcceptanceTests)oldAcceptanceTests).getDescription());
Boolean activeStatus = acceptancetestss.get(oldAcceptanceTests);
newAcceptanceTestss.put(newAcceptanceTests, activeStatus);
}
}
acceptancetestss.clear();
acceptancetestss.putAll(newAcceptanceTestss);

// releaseplan participants:
Hashtable<Artifact, Boolean> newReleasePlans = new Hashtable<Artifact, Boolean>();
Iterator<Map.Entry<Artifact, Boolean>> releaseplansIterator = releaseplans.entrySet().iterator();
while (releaseplansIterator.hasNext()) {
Map.Entry<Artifact, Boolean> entry = releaseplansIterator.next();
Artifact oldReleasePlan = entry.getKey();
if (oldReleasePlan instanceof ReleasePlan) {
Artifact newReleasePlan = artifactRep.getReleasePlanStateRepository().get(((ReleasePlan)oldReleasePlan).getName());
Boolean activeStatus = releaseplans.get(oldReleasePlan);
newReleasePlans.put(newReleasePlan, activeStatus);
}
}
releaseplans.clear();
releaseplans.putAll(newReleasePlans);

// userstories participants:
Hashtable<Artifact, Boolean> newUserStoriess = new Hashtable<Artifact, Boolean>();
Iterator<Map.Entry<Artifact, Boolean>> userstoriessIterator = userstoriess.entrySet().iterator();
while (userstoriessIterator.hasNext()) {
Map.Entry<Artifact, Boolean> entry = userstoriessIterator.next();
Artifact oldUserStories = entry.getKey();
if (oldUserStories instanceof UserStories) {
Artifact newUserStories = artifactRep.getUserStoriesStateRepository().get(((UserStories)oldUserStories).getName());
Boolean activeStatus = userstoriess.get(oldUserStories);
newUserStoriess.put(newUserStories, activeStatus);
}
}
userstoriess.clear();
userstoriess.putAll(newUserStoriess);

}
}