/* File generated by: simse.codegenerator.stategenerator.ADTGenerator */
package simse.adts.actions;
import simse.adts.objects.*;
import simse.state.ArtifactStateRepository;
import simse.state.CustomerStateRepository;
import simse.state.EmployeeStateRepository;
import simse.state.ProjectStateRepository;
import simse.state.ToolStateRepository;
import java.util.*;
public class DesignAction extends Action implements Cloneable
{
private Hashtable<Employee, Boolean> developers;
private Hashtable<Tool, Boolean> crccardss;
private Hashtable<Artifact, Boolean> designs;
private Hashtable<Project, Boolean> projs;
private Hashtable<Artifact, Boolean> associateduserstoriess;
private Hashtable<Artifact, Boolean> releaseplans;
public DesignAction()
{
developers = new Hashtable<Employee, Boolean>();
crccardss = new Hashtable<Tool, Boolean>();
designs = new Hashtable<Artifact, Boolean>();
projs = new Hashtable<Project, Boolean>();
associateduserstoriess = new Hashtable<Artifact, Boolean>();
releaseplans = new Hashtable<Artifact, Boolean>();
}

public Object clone() {
DesignAction cl = (DesignAction)(super.clone());
Hashtable<Employee, Boolean> cloneddevelopers = new Hashtable<Employee, Boolean>();
cloneddevelopers.putAll(developers);
cl.developers = cloneddevelopers;
Hashtable<Tool, Boolean> clonedcrccardss = new Hashtable<Tool, Boolean>();
clonedcrccardss.putAll(crccardss);
cl.crccardss = clonedcrccardss;
Hashtable<Artifact, Boolean> cloneddesigns = new Hashtable<Artifact, Boolean>();
cloneddesigns.putAll(designs);
cl.designs = cloneddesigns;
Hashtable<Project, Boolean> clonedprojs = new Hashtable<Project, Boolean>();
clonedprojs.putAll(projs);
cl.projs = clonedprojs;
Hashtable<Artifact, Boolean> clonedassociateduserstoriess = new Hashtable<Artifact, Boolean>();
clonedassociateduserstoriess.putAll(associateduserstoriess);
cl.associateduserstoriess = clonedassociateduserstoriess;
Hashtable<Artifact, Boolean> clonedreleaseplans = new Hashtable<Artifact, Boolean>();
clonedreleaseplans.putAll(releaseplans);
cl.releaseplans = clonedreleaseplans;
return cl;
}

public Vector<SSObject> getAllParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllDevelopers());
all.addAll(getAllCRCCardss());
all.addAll(getAllDesigns());
all.addAll(getAllProjs());
all.addAll(getAllAssociatedUserStoriess());
all.addAll(getAllReleasePlans());
return all;
}
public Vector<SSObject> getAllActiveParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllActiveDevelopers());
all.addAll(getAllActiveCRCCardss());
all.addAll(getAllActiveDesigns());
all.addAll(getAllActiveProjs());
all.addAll(getAllActiveAssociatedUserStoriess());
all.addAll(getAllActiveReleasePlans());
return all;
}

public Vector<SSObject> getAllInactiveParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllInactiveDevelopers());
all.addAll(getAllInactiveCRCCardss());
all.addAll(getAllInactiveDesigns());
all.addAll(getAllInactiveProjs());
all.addAll(getAllInactiveAssociatedUserStoriess());
all.addAll(getAllInactiveReleasePlans());
return all;
}
public Vector<Employee> getAllDevelopers()
{
Vector<Employee>a = new Vector<Employee>();
Enumeration<Employee> e = developers.keys();
for(int i=0; i<developers.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Employee> getAllActiveDevelopers()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = developers.keys();
for(int i=0; i<developers.size(); i++)
{
Employee key = e.nextElement();
if((developers.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Employee> getAllInactiveDevelopers()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = developers.keys();
for(int i=0; i<developers.size(); i++)
{
Employee key = e.nextElement();
if((developers.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addDeveloper(Employee a)
{
if((developers.containsKey(a)) ||( ((a instanceof SoftwareDeveloper) == false)))
{
return false;
}
else
{
developers.put(a, new Boolean(true));
return true;
}
}

public boolean removeDeveloper(Employee a)
{
if(developers.containsKey(a))
{
developers.remove(a);
return true;
}
return false;
}

public boolean setDeveloperActive(Employee a)
{
if(developers.containsKey(a))
{
developers.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setDeveloperInactive(Employee a)
{
if(developers.containsKey(a))
{
developers.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Tool> getAllCRCCardss()
{
Vector<Tool>a = new Vector<Tool>();
Enumeration<Tool> e = crccardss.keys();
for(int i=0; i<crccardss.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Tool> getAllActiveCRCCardss()
{
Vector<Tool> a = new Vector<Tool>();
Enumeration<Tool> e = crccardss.keys();
for(int i=0; i<crccardss.size(); i++)
{
Tool key = e.nextElement();
if((crccardss.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Tool> getAllInactiveCRCCardss()
{
Vector<Tool> a = new Vector<Tool>();
Enumeration<Tool> e = crccardss.keys();
for(int i=0; i<crccardss.size(); i++)
{
Tool key = e.nextElement();
if((crccardss.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addCRCCards(Tool a)
{
if((crccardss.containsKey(a)) ||( ((a instanceof CRCCards) == false)))
{
return false;
}
else
{
crccardss.put(a, new Boolean(true));
return true;
}
}

public boolean removeCRCCards(Tool a)
{
if(crccardss.containsKey(a))
{
crccardss.remove(a);
return true;
}
return false;
}

public boolean setCRCCardsActive(Tool a)
{
if(crccardss.containsKey(a))
{
crccardss.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setCRCCardsInactive(Tool a)
{
if(crccardss.containsKey(a))
{
crccardss.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Artifact> getAllDesigns()
{
Vector<Artifact>a = new Vector<Artifact>();
Enumeration<Artifact> e = designs.keys();
for(int i=0; i<designs.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Artifact> getAllActiveDesigns()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = designs.keys();
for(int i=0; i<designs.size(); i++)
{
Artifact key = e.nextElement();
if((designs.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Artifact> getAllInactiveDesigns()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = designs.keys();
for(int i=0; i<designs.size(); i++)
{
Artifact key = e.nextElement();
if((designs.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addDesign(Artifact a)
{
if((designs.containsKey(a)) ||( ((a instanceof Design) == false)) || (designs.size() >= 1))
{
return false;
}
else
{
designs.put(a, new Boolean(true));
return true;
}
}

public boolean removeDesign(Artifact a)
{
if(designs.containsKey(a))
{
designs.remove(a);
return true;
}
return false;
}

public boolean setDesignActive(Artifact a)
{
if(designs.containsKey(a))
{
designs.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setDesignInactive(Artifact a)
{
if(designs.containsKey(a))
{
designs.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Project> getAllProjs()
{
Vector<Project>a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Project> getAllActiveProjs()
{
Vector<Project> a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
Project key = e.nextElement();
if((projs.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Project> getAllInactiveProjs()
{
Vector<Project> a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
Project key = e.nextElement();
if((projs.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addProj(Project a)
{
if((projs.containsKey(a)) ||( ((a instanceof TheProject) == false)) || (projs.size() >= 1))
{
return false;
}
else
{
projs.put(a, new Boolean(true));
return true;
}
}

public boolean removeProj(Project a)
{
if(projs.containsKey(a))
{
projs.remove(a);
return true;
}
return false;
}

public boolean setProjActive(Project a)
{
if(projs.containsKey(a))
{
projs.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setProjInactive(Project a)
{
if(projs.containsKey(a))
{
projs.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Artifact> getAllAssociatedUserStoriess()
{
Vector<Artifact>a = new Vector<Artifact>();
Enumeration<Artifact> e = associateduserstoriess.keys();
for(int i=0; i<associateduserstoriess.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Artifact> getAllActiveAssociatedUserStoriess()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = associateduserstoriess.keys();
for(int i=0; i<associateduserstoriess.size(); i++)
{
Artifact key = e.nextElement();
if((associateduserstoriess.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Artifact> getAllInactiveAssociatedUserStoriess()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = associateduserstoriess.keys();
for(int i=0; i<associateduserstoriess.size(); i++)
{
Artifact key = e.nextElement();
if((associateduserstoriess.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addAssociatedUserStories(Artifact a)
{
if((associateduserstoriess.containsKey(a)) ||( ((a instanceof UserStories) == false)) || (associateduserstoriess.size() >= 1))
{
return false;
}
else
{
associateduserstoriess.put(a, new Boolean(true));
return true;
}
}

public boolean removeAssociatedUserStories(Artifact a)
{
if(associateduserstoriess.containsKey(a))
{
associateduserstoriess.remove(a);
return true;
}
return false;
}

public boolean setAssociatedUserStoriesActive(Artifact a)
{
if(associateduserstoriess.containsKey(a))
{
associateduserstoriess.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setAssociatedUserStoriesInactive(Artifact a)
{
if(associateduserstoriess.containsKey(a))
{
associateduserstoriess.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Artifact> getAllReleasePlans()
{
Vector<Artifact>a = new Vector<Artifact>();
Enumeration<Artifact> e = releaseplans.keys();
for(int i=0; i<releaseplans.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Artifact> getAllActiveReleasePlans()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = releaseplans.keys();
for(int i=0; i<releaseplans.size(); i++)
{
Artifact key = e.nextElement();
if((releaseplans.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Artifact> getAllInactiveReleasePlans()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = releaseplans.keys();
for(int i=0; i<releaseplans.size(); i++)
{
Artifact key = e.nextElement();
if((releaseplans.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addReleasePlan(Artifact a)
{
if((releaseplans.containsKey(a)) ||( ((a instanceof ReleasePlan) == false)) || (releaseplans.size() >= 1))
{
return false;
}
else
{
releaseplans.put(a, new Boolean(true));
return true;
}
}

public boolean removeReleasePlan(Artifact a)
{
if(releaseplans.containsKey(a))
{
releaseplans.remove(a);
return true;
}
return false;
}

public boolean setReleasePlanActive(Artifact a)
{
if(releaseplans.containsKey(a))
{
releaseplans.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setReleasePlanInactive(Artifact a)
{
if(releaseplans.containsKey(a))
{
releaseplans.put(a, new Boolean(false));
return true;
}
return false;
}
/*
* Replaces all the participants in this action with their equivalent objects
* in the current state. Calling this function solves the problem that happens
* when you clone actions -- their hashtables point to participant objects
* that were part of the previous, non-cloned state. Hence, this function
* should be called after this object is cloned.
*/
public void refetchParticipants(ArtifactStateRepository artifactRep, CustomerStateRepository customerRep, EmployeeStateRepository employeeRep, ProjectStateRepository projectRep, ToolStateRepository toolRep) {
// developer participants:
Hashtable<Employee, Boolean> newDevelopers = new Hashtable<Employee, Boolean>();
Iterator<Map.Entry<Employee, Boolean>> developersIterator = developers.entrySet().iterator();
while (developersIterator.hasNext()) {
Map.Entry<Employee, Boolean> entry = developersIterator.next();
Employee oldDeveloper = entry.getKey();
if (oldDeveloper instanceof SoftwareDeveloper) {
Employee newDeveloper = employeeRep.getSoftwareDeveloperStateRepository().get(((SoftwareDeveloper)oldDeveloper).getName());
Boolean activeStatus = developers.get(oldDeveloper);
newDevelopers.put(newDeveloper, activeStatus);
}
}
developers.clear();
developers.putAll(newDevelopers);

// crccards participants:
Hashtable<Tool, Boolean> newCRCCardss = new Hashtable<Tool, Boolean>();
Iterator<Map.Entry<Tool, Boolean>> crccardssIterator = crccardss.entrySet().iterator();
while (crccardssIterator.hasNext()) {
Map.Entry<Tool, Boolean> entry = crccardssIterator.next();
Tool oldCRCCards = entry.getKey();
if (oldCRCCards instanceof CRCCards) {
Tool newCRCCards = toolRep.getCRCCardsStateRepository().get(((CRCCards)oldCRCCards).getDescription());
Boolean activeStatus = crccardss.get(oldCRCCards);
newCRCCardss.put(newCRCCards, activeStatus);
}
}
crccardss.clear();
crccardss.putAll(newCRCCardss);

// design participants:
Hashtable<Artifact, Boolean> newDesigns = new Hashtable<Artifact, Boolean>();
Iterator<Map.Entry<Artifact, Boolean>> designsIterator = designs.entrySet().iterator();
while (designsIterator.hasNext()) {
Map.Entry<Artifact, Boolean> entry = designsIterator.next();
Artifact oldDesign = entry.getKey();
if (oldDesign instanceof Design) {
Artifact newDesign = artifactRep.getDesignStateRepository().get(((Design)oldDesign).getDescription());
Boolean activeStatus = designs.get(oldDesign);
newDesigns.put(newDesign, activeStatus);
}
}
designs.clear();
designs.putAll(newDesigns);

// proj participants:
Hashtable<Project, Boolean> newProjs = new Hashtable<Project, Boolean>();
Iterator<Map.Entry<Project, Boolean>> projsIterator = projs.entrySet().iterator();
while (projsIterator.hasNext()) {
Map.Entry<Project, Boolean> entry = projsIterator.next();
Project oldProj = entry.getKey();
if (oldProj instanceof TheProject) {
Project newProj = projectRep.getTheProjectStateRepository().get(((TheProject)oldProj).getName());
Boolean activeStatus = projs.get(oldProj);
newProjs.put(newProj, activeStatus);
}
}
projs.clear();
projs.putAll(newProjs);

// associateduserstories participants:
Hashtable<Artifact, Boolean> newAssociatedUserStoriess = new Hashtable<Artifact, Boolean>();
Iterator<Map.Entry<Artifact, Boolean>> associateduserstoriessIterator = associateduserstoriess.entrySet().iterator();
while (associateduserstoriessIterator.hasNext()) {
Map.Entry<Artifact, Boolean> entry = associateduserstoriessIterator.next();
Artifact oldAssociatedUserStories = entry.getKey();
if (oldAssociatedUserStories instanceof UserStories) {
Artifact newAssociatedUserStories = artifactRep.getUserStoriesStateRepository().get(((UserStories)oldAssociatedUserStories).getName());
Boolean activeStatus = associateduserstoriess.get(oldAssociatedUserStories);
newAssociatedUserStoriess.put(newAssociatedUserStories, activeStatus);
}
}
associateduserstoriess.clear();
associateduserstoriess.putAll(newAssociatedUserStoriess);

// releaseplan participants:
Hashtable<Artifact, Boolean> newReleasePlans = new Hashtable<Artifact, Boolean>();
Iterator<Map.Entry<Artifact, Boolean>> releaseplansIterator = releaseplans.entrySet().iterator();
while (releaseplansIterator.hasNext()) {
Map.Entry<Artifact, Boolean> entry = releaseplansIterator.next();
Artifact oldReleasePlan = entry.getKey();
if (oldReleasePlan instanceof ReleasePlan) {
Artifact newReleasePlan = artifactRep.getReleasePlanStateRepository().get(((ReleasePlan)oldReleasePlan).getName());
Boolean activeStatus = releaseplans.get(oldReleasePlan);
newReleasePlans.put(newReleasePlan, activeStatus);
}
}
releaseplans.clear();
releaseplans.putAll(newReleasePlans);

}
}