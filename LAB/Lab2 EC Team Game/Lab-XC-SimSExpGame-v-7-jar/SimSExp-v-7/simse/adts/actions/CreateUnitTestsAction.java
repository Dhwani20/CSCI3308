/* File generated by: simse.codegenerator.stategenerator.ADTGenerator */
package simse.adts.actions;
import simse.adts.objects.*;
import simse.state.ArtifactStateRepository;
import simse.state.CustomerStateRepository;
import simse.state.EmployeeStateRepository;
import simse.state.ProjectStateRepository;
import simse.state.ToolStateRepository;
import java.util.*;
public class CreateUnitTestsAction extends Action implements Cloneable
{
private Hashtable<Employee, Boolean> developers;
private Hashtable<Artifact, Boolean> testss;
private Hashtable<Tool, Boolean> testingframeworks;
private Hashtable<Project, Boolean> projs;
private Hashtable<Artifact, Boolean> associateddesigns;
private Hashtable<Artifact, Boolean> releaseplans;
public CreateUnitTestsAction()
{
developers = new Hashtable<Employee, Boolean>();
testss = new Hashtable<Artifact, Boolean>();
testingframeworks = new Hashtable<Tool, Boolean>();
projs = new Hashtable<Project, Boolean>();
associateddesigns = new Hashtable<Artifact, Boolean>();
releaseplans = new Hashtable<Artifact, Boolean>();
}

public Object clone() {
CreateUnitTestsAction cl = (CreateUnitTestsAction)(super.clone());
Hashtable<Employee, Boolean> cloneddevelopers = new Hashtable<Employee, Boolean>();
cloneddevelopers.putAll(developers);
cl.developers = cloneddevelopers;
Hashtable<Artifact, Boolean> clonedtestss = new Hashtable<Artifact, Boolean>();
clonedtestss.putAll(testss);
cl.testss = clonedtestss;
Hashtable<Tool, Boolean> clonedtestingframeworks = new Hashtable<Tool, Boolean>();
clonedtestingframeworks.putAll(testingframeworks);
cl.testingframeworks = clonedtestingframeworks;
Hashtable<Project, Boolean> clonedprojs = new Hashtable<Project, Boolean>();
clonedprojs.putAll(projs);
cl.projs = clonedprojs;
Hashtable<Artifact, Boolean> clonedassociateddesigns = new Hashtable<Artifact, Boolean>();
clonedassociateddesigns.putAll(associateddesigns);
cl.associateddesigns = clonedassociateddesigns;
Hashtable<Artifact, Boolean> clonedreleaseplans = new Hashtable<Artifact, Boolean>();
clonedreleaseplans.putAll(releaseplans);
cl.releaseplans = clonedreleaseplans;
return cl;
}

public Vector<SSObject> getAllParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllDevelopers());
all.addAll(getAllTestss());
all.addAll(getAllTestingFrameworks());
all.addAll(getAllProjs());
all.addAll(getAllAssociatedDesigns());
all.addAll(getAllReleasePlans());
return all;
}
public Vector<SSObject> getAllActiveParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllActiveDevelopers());
all.addAll(getAllActiveTestss());
all.addAll(getAllActiveTestingFrameworks());
all.addAll(getAllActiveProjs());
all.addAll(getAllActiveAssociatedDesigns());
all.addAll(getAllActiveReleasePlans());
return all;
}

public Vector<SSObject> getAllInactiveParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllInactiveDevelopers());
all.addAll(getAllInactiveTestss());
all.addAll(getAllInactiveTestingFrameworks());
all.addAll(getAllInactiveProjs());
all.addAll(getAllInactiveAssociatedDesigns());
all.addAll(getAllInactiveReleasePlans());
return all;
}
public Vector<Employee> getAllDevelopers()
{
Vector<Employee>a = new Vector<Employee>();
Enumeration<Employee> e = developers.keys();
for(int i=0; i<developers.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Employee> getAllActiveDevelopers()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = developers.keys();
for(int i=0; i<developers.size(); i++)
{
Employee key = e.nextElement();
if((developers.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Employee> getAllInactiveDevelopers()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = developers.keys();
for(int i=0; i<developers.size(); i++)
{
Employee key = e.nextElement();
if((developers.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addDeveloper(Employee a)
{
if((developers.containsKey(a)) ||( ((a instanceof SoftwareDeveloper) == false)))
{
return false;
}
else
{
developers.put(a, new Boolean(true));
return true;
}
}

public boolean removeDeveloper(Employee a)
{
if(developers.containsKey(a))
{
developers.remove(a);
return true;
}
return false;
}

public boolean setDeveloperActive(Employee a)
{
if(developers.containsKey(a))
{
developers.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setDeveloperInactive(Employee a)
{
if(developers.containsKey(a))
{
developers.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Artifact> getAllTestss()
{
Vector<Artifact>a = new Vector<Artifact>();
Enumeration<Artifact> e = testss.keys();
for(int i=0; i<testss.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Artifact> getAllActiveTestss()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = testss.keys();
for(int i=0; i<testss.size(); i++)
{
Artifact key = e.nextElement();
if((testss.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Artifact> getAllInactiveTestss()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = testss.keys();
for(int i=0; i<testss.size(); i++)
{
Artifact key = e.nextElement();
if((testss.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addTests(Artifact a)
{
if((testss.containsKey(a)) ||( ((a instanceof UnitTests) == false)) || (testss.size() >= 1))
{
return false;
}
else
{
testss.put(a, new Boolean(true));
return true;
}
}

public boolean removeTests(Artifact a)
{
if(testss.containsKey(a))
{
testss.remove(a);
return true;
}
return false;
}

public boolean setTestsActive(Artifact a)
{
if(testss.containsKey(a))
{
testss.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setTestsInactive(Artifact a)
{
if(testss.containsKey(a))
{
testss.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Tool> getAllTestingFrameworks()
{
Vector<Tool>a = new Vector<Tool>();
Enumeration<Tool> e = testingframeworks.keys();
for(int i=0; i<testingframeworks.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Tool> getAllActiveTestingFrameworks()
{
Vector<Tool> a = new Vector<Tool>();
Enumeration<Tool> e = testingframeworks.keys();
for(int i=0; i<testingframeworks.size(); i++)
{
Tool key = e.nextElement();
if((testingframeworks.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Tool> getAllInactiveTestingFrameworks()
{
Vector<Tool> a = new Vector<Tool>();
Enumeration<Tool> e = testingframeworks.keys();
for(int i=0; i<testingframeworks.size(); i++)
{
Tool key = e.nextElement();
if((testingframeworks.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addTestingFramework(Tool a)
{
if((testingframeworks.containsKey(a)) ||( ((a instanceof UnitTestingFramework) == false)))
{
return false;
}
else
{
testingframeworks.put(a, new Boolean(true));
return true;
}
}

public boolean removeTestingFramework(Tool a)
{
if(testingframeworks.containsKey(a))
{
testingframeworks.remove(a);
return true;
}
return false;
}

public boolean setTestingFrameworkActive(Tool a)
{
if(testingframeworks.containsKey(a))
{
testingframeworks.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setTestingFrameworkInactive(Tool a)
{
if(testingframeworks.containsKey(a))
{
testingframeworks.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Project> getAllProjs()
{
Vector<Project>a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Project> getAllActiveProjs()
{
Vector<Project> a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
Project key = e.nextElement();
if((projs.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Project> getAllInactiveProjs()
{
Vector<Project> a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
Project key = e.nextElement();
if((projs.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addProj(Project a)
{
if((projs.containsKey(a)) ||( ((a instanceof TheProject) == false)) || (projs.size() >= 1))
{
return false;
}
else
{
projs.put(a, new Boolean(true));
return true;
}
}

public boolean removeProj(Project a)
{
if(projs.containsKey(a))
{
projs.remove(a);
return true;
}
return false;
}

public boolean setProjActive(Project a)
{
if(projs.containsKey(a))
{
projs.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setProjInactive(Project a)
{
if(projs.containsKey(a))
{
projs.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Artifact> getAllAssociatedDesigns()
{
Vector<Artifact>a = new Vector<Artifact>();
Enumeration<Artifact> e = associateddesigns.keys();
for(int i=0; i<associateddesigns.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Artifact> getAllActiveAssociatedDesigns()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = associateddesigns.keys();
for(int i=0; i<associateddesigns.size(); i++)
{
Artifact key = e.nextElement();
if((associateddesigns.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Artifact> getAllInactiveAssociatedDesigns()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = associateddesigns.keys();
for(int i=0; i<associateddesigns.size(); i++)
{
Artifact key = e.nextElement();
if((associateddesigns.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addAssociatedDesign(Artifact a)
{
if((associateddesigns.containsKey(a)) ||( ((a instanceof Design) == false)) || (associateddesigns.size() >= 1))
{
return false;
}
else
{
associateddesigns.put(a, new Boolean(true));
return true;
}
}

public boolean removeAssociatedDesign(Artifact a)
{
if(associateddesigns.containsKey(a))
{
associateddesigns.remove(a);
return true;
}
return false;
}

public boolean setAssociatedDesignActive(Artifact a)
{
if(associateddesigns.containsKey(a))
{
associateddesigns.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setAssociatedDesignInactive(Artifact a)
{
if(associateddesigns.containsKey(a))
{
associateddesigns.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Artifact> getAllReleasePlans()
{
Vector<Artifact>a = new Vector<Artifact>();
Enumeration<Artifact> e = releaseplans.keys();
for(int i=0; i<releaseplans.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Artifact> getAllActiveReleasePlans()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = releaseplans.keys();
for(int i=0; i<releaseplans.size(); i++)
{
Artifact key = e.nextElement();
if((releaseplans.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Artifact> getAllInactiveReleasePlans()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = releaseplans.keys();
for(int i=0; i<releaseplans.size(); i++)
{
Artifact key = e.nextElement();
if((releaseplans.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addReleasePlan(Artifact a)
{
if((releaseplans.containsKey(a)) ||( ((a instanceof ReleasePlan) == false)) || (releaseplans.size() >= 1))
{
return false;
}
else
{
releaseplans.put(a, new Boolean(true));
return true;
}
}

public boolean removeReleasePlan(Artifact a)
{
if(releaseplans.containsKey(a))
{
releaseplans.remove(a);
return true;
}
return false;
}

public boolean setReleasePlanActive(Artifact a)
{
if(releaseplans.containsKey(a))
{
releaseplans.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setReleasePlanInactive(Artifact a)
{
if(releaseplans.containsKey(a))
{
releaseplans.put(a, new Boolean(false));
return true;
}
return false;
}
/*
* Replaces all the participants in this action with their equivalent objects
* in the current state. Calling this function solves the problem that happens
* when you clone actions -- their hashtables point to participant objects
* that were part of the previous, non-cloned state. Hence, this function
* should be called after this object is cloned.
*/
public void refetchParticipants(ArtifactStateRepository artifactRep, CustomerStateRepository customerRep, EmployeeStateRepository employeeRep, ProjectStateRepository projectRep, ToolStateRepository toolRep) {
// developer participants:
Hashtable<Employee, Boolean> newDevelopers = new Hashtable<Employee, Boolean>();
Iterator<Map.Entry<Employee, Boolean>> developersIterator = developers.entrySet().iterator();
while (developersIterator.hasNext()) {
Map.Entry<Employee, Boolean> entry = developersIterator.next();
Employee oldDeveloper = entry.getKey();
if (oldDeveloper instanceof SoftwareDeveloper) {
Employee newDeveloper = employeeRep.getSoftwareDeveloperStateRepository().get(((SoftwareDeveloper)oldDeveloper).getName());
Boolean activeStatus = developers.get(oldDeveloper);
newDevelopers.put(newDeveloper, activeStatus);
}
}
developers.clear();
developers.putAll(newDevelopers);

// tests participants:
Hashtable<Artifact, Boolean> newTestss = new Hashtable<Artifact, Boolean>();
Iterator<Map.Entry<Artifact, Boolean>> testssIterator = testss.entrySet().iterator();
while (testssIterator.hasNext()) {
Map.Entry<Artifact, Boolean> entry = testssIterator.next();
Artifact oldTests = entry.getKey();
if (oldTests instanceof UnitTests) {
Artifact newTests = artifactRep.getUnitTestsStateRepository().get(((UnitTests)oldTests).getDescription());
Boolean activeStatus = testss.get(oldTests);
newTestss.put(newTests, activeStatus);
}
}
testss.clear();
testss.putAll(newTestss);

// testingframework participants:
Hashtable<Tool, Boolean> newTestingFrameworks = new Hashtable<Tool, Boolean>();
Iterator<Map.Entry<Tool, Boolean>> testingframeworksIterator = testingframeworks.entrySet().iterator();
while (testingframeworksIterator.hasNext()) {
Map.Entry<Tool, Boolean> entry = testingframeworksIterator.next();
Tool oldTestingFramework = entry.getKey();
if (oldTestingFramework instanceof UnitTestingFramework) {
Tool newTestingFramework = toolRep.getUnitTestingFrameworkStateRepository().get(((UnitTestingFramework)oldTestingFramework).getDescription());
Boolean activeStatus = testingframeworks.get(oldTestingFramework);
newTestingFrameworks.put(newTestingFramework, activeStatus);
}
}
testingframeworks.clear();
testingframeworks.putAll(newTestingFrameworks);

// proj participants:
Hashtable<Project, Boolean> newProjs = new Hashtable<Project, Boolean>();
Iterator<Map.Entry<Project, Boolean>> projsIterator = projs.entrySet().iterator();
while (projsIterator.hasNext()) {
Map.Entry<Project, Boolean> entry = projsIterator.next();
Project oldProj = entry.getKey();
if (oldProj instanceof TheProject) {
Project newProj = projectRep.getTheProjectStateRepository().get(((TheProject)oldProj).getName());
Boolean activeStatus = projs.get(oldProj);
newProjs.put(newProj, activeStatus);
}
}
projs.clear();
projs.putAll(newProjs);

// associateddesign participants:
Hashtable<Artifact, Boolean> newAssociatedDesigns = new Hashtable<Artifact, Boolean>();
Iterator<Map.Entry<Artifact, Boolean>> associateddesignsIterator = associateddesigns.entrySet().iterator();
while (associateddesignsIterator.hasNext()) {
Map.Entry<Artifact, Boolean> entry = associateddesignsIterator.next();
Artifact oldAssociatedDesign = entry.getKey();
if (oldAssociatedDesign instanceof Design) {
Artifact newAssociatedDesign = artifactRep.getDesignStateRepository().get(((Design)oldAssociatedDesign).getDescription());
Boolean activeStatus = associateddesigns.get(oldAssociatedDesign);
newAssociatedDesigns.put(newAssociatedDesign, activeStatus);
}
}
associateddesigns.clear();
associateddesigns.putAll(newAssociatedDesigns);

// releaseplan participants:
Hashtable<Artifact, Boolean> newReleasePlans = new Hashtable<Artifact, Boolean>();
Iterator<Map.Entry<Artifact, Boolean>> releaseplansIterator = releaseplans.entrySet().iterator();
while (releaseplansIterator.hasNext()) {
Map.Entry<Artifact, Boolean> entry = releaseplansIterator.next();
Artifact oldReleasePlan = entry.getKey();
if (oldReleasePlan instanceof ReleasePlan) {
Artifact newReleasePlan = artifactRep.getReleasePlanStateRepository().get(((ReleasePlan)oldReleasePlan).getName());
Boolean activeStatus = releaseplans.get(oldReleasePlan);
newReleasePlans.put(newReleasePlan, activeStatus);
}
}
releaseplans.clear();
releaseplans.putAll(newReleasePlans);

}
}