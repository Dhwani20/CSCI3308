/* File generated by: simse.codegenerator.stategenerator.ADTGenerator */
package simse.adts.actions;
import simse.adts.objects.*;
import simse.state.ArtifactStateRepository;
import simse.state.CustomerStateRepository;
import simse.state.EmployeeStateRepository;
import simse.state.ProjectStateRepository;
import simse.state.ToolStateRepository;
import java.util.*;
public class UpdateUserStoriesAttributesAction extends Action implements Cloneable
{
private Hashtable<Artifact, Boolean> userstoriess;
private Hashtable<Project, Boolean> projs;
private Hashtable<Artifact, Boolean> codes;
public UpdateUserStoriesAttributesAction()
{
userstoriess = new Hashtable<Artifact, Boolean>();
projs = new Hashtable<Project, Boolean>();
codes = new Hashtable<Artifact, Boolean>();
}

public Object clone() {
UpdateUserStoriesAttributesAction cl = (UpdateUserStoriesAttributesAction)(super.clone());
Hashtable<Artifact, Boolean> cloneduserstoriess = new Hashtable<Artifact, Boolean>();
cloneduserstoriess.putAll(userstoriess);
cl.userstoriess = cloneduserstoriess;
Hashtable<Project, Boolean> clonedprojs = new Hashtable<Project, Boolean>();
clonedprojs.putAll(projs);
cl.projs = clonedprojs;
Hashtable<Artifact, Boolean> clonedcodes = new Hashtable<Artifact, Boolean>();
clonedcodes.putAll(codes);
cl.codes = clonedcodes;
return cl;
}

public Vector<SSObject> getAllParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllUserStoriess());
all.addAll(getAllProjs());
all.addAll(getAllCodes());
return all;
}
public Vector<SSObject> getAllActiveParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllActiveUserStoriess());
all.addAll(getAllActiveProjs());
all.addAll(getAllActiveCodes());
return all;
}

public Vector<SSObject> getAllInactiveParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllInactiveUserStoriess());
all.addAll(getAllInactiveProjs());
all.addAll(getAllInactiveCodes());
return all;
}
public Vector<Artifact> getAllUserStoriess()
{
Vector<Artifact>a = new Vector<Artifact>();
Enumeration<Artifact> e = userstoriess.keys();
for(int i=0; i<userstoriess.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Artifact> getAllActiveUserStoriess()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = userstoriess.keys();
for(int i=0; i<userstoriess.size(); i++)
{
Artifact key = e.nextElement();
if((userstoriess.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Artifact> getAllInactiveUserStoriess()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = userstoriess.keys();
for(int i=0; i<userstoriess.size(); i++)
{
Artifact key = e.nextElement();
if((userstoriess.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addUserStories(Artifact a)
{
if((userstoriess.containsKey(a)) ||( ((a instanceof UserStories) == false)) || (userstoriess.size() >= 1))
{
return false;
}
else
{
userstoriess.put(a, new Boolean(true));
return true;
}
}

public boolean removeUserStories(Artifact a)
{
if(userstoriess.containsKey(a))
{
userstoriess.remove(a);
return true;
}
return false;
}

public boolean setUserStoriesActive(Artifact a)
{
if(userstoriess.containsKey(a))
{
userstoriess.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setUserStoriesInactive(Artifact a)
{
if(userstoriess.containsKey(a))
{
userstoriess.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Project> getAllProjs()
{
Vector<Project>a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Project> getAllActiveProjs()
{
Vector<Project> a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
Project key = e.nextElement();
if((projs.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Project> getAllInactiveProjs()
{
Vector<Project> a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
Project key = e.nextElement();
if((projs.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addProj(Project a)
{
if((projs.containsKey(a)) ||( ((a instanceof TheProject) == false)) || (projs.size() >= 1))
{
return false;
}
else
{
projs.put(a, new Boolean(true));
return true;
}
}

public boolean removeProj(Project a)
{
if(projs.containsKey(a))
{
projs.remove(a);
return true;
}
return false;
}

public boolean setProjActive(Project a)
{
if(projs.containsKey(a))
{
projs.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setProjInactive(Project a)
{
if(projs.containsKey(a))
{
projs.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Artifact> getAllCodes()
{
Vector<Artifact>a = new Vector<Artifact>();
Enumeration<Artifact> e = codes.keys();
for(int i=0; i<codes.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Artifact> getAllActiveCodes()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = codes.keys();
for(int i=0; i<codes.size(); i++)
{
Artifact key = e.nextElement();
if((codes.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Artifact> getAllInactiveCodes()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = codes.keys();
for(int i=0; i<codes.size(); i++)
{
Artifact key = e.nextElement();
if((codes.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addCode(Artifact a)
{
if((codes.containsKey(a)) ||( ((a instanceof Code) == false)) || (codes.size() >= 1))
{
return false;
}
else
{
codes.put(a, new Boolean(true));
return true;
}
}

public boolean removeCode(Artifact a)
{
if(codes.containsKey(a))
{
codes.remove(a);
return true;
}
return false;
}

public boolean setCodeActive(Artifact a)
{
if(codes.containsKey(a))
{
codes.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setCodeInactive(Artifact a)
{
if(codes.containsKey(a))
{
codes.put(a, new Boolean(false));
return true;
}
return false;
}
/*
* Replaces all the participants in this action with their equivalent objects
* in the current state. Calling this function solves the problem that happens
* when you clone actions -- their hashtables point to participant objects
* that were part of the previous, non-cloned state. Hence, this function
* should be called after this object is cloned.
*/
public void refetchParticipants(ArtifactStateRepository artifactRep, CustomerStateRepository customerRep, EmployeeStateRepository employeeRep, ProjectStateRepository projectRep, ToolStateRepository toolRep) {
// userstories participants:
Hashtable<Artifact, Boolean> newUserStoriess = new Hashtable<Artifact, Boolean>();
Iterator<Map.Entry<Artifact, Boolean>> userstoriessIterator = userstoriess.entrySet().iterator();
while (userstoriessIterator.hasNext()) {
Map.Entry<Artifact, Boolean> entry = userstoriessIterator.next();
Artifact oldUserStories = entry.getKey();
if (oldUserStories instanceof UserStories) {
Artifact newUserStories = artifactRep.getUserStoriesStateRepository().get(((UserStories)oldUserStories).getName());
Boolean activeStatus = userstoriess.get(oldUserStories);
newUserStoriess.put(newUserStories, activeStatus);
}
}
userstoriess.clear();
userstoriess.putAll(newUserStoriess);

// proj participants:
Hashtable<Project, Boolean> newProjs = new Hashtable<Project, Boolean>();
Iterator<Map.Entry<Project, Boolean>> projsIterator = projs.entrySet().iterator();
while (projsIterator.hasNext()) {
Map.Entry<Project, Boolean> entry = projsIterator.next();
Project oldProj = entry.getKey();
if (oldProj instanceof TheProject) {
Project newProj = projectRep.getTheProjectStateRepository().get(((TheProject)oldProj).getName());
Boolean activeStatus = projs.get(oldProj);
newProjs.put(newProj, activeStatus);
}
}
projs.clear();
projs.putAll(newProjs);

// code participants:
Hashtable<Artifact, Boolean> newCodes = new Hashtable<Artifact, Boolean>();
Iterator<Map.Entry<Artifact, Boolean>> codesIterator = codes.entrySet().iterator();
while (codesIterator.hasNext()) {
Map.Entry<Artifact, Boolean> entry = codesIterator.next();
Artifact oldCode = entry.getKey();
if (oldCode instanceof Code) {
Artifact newCode = artifactRep.getCodeStateRepository().get(((Code)oldCode).getDescription());
Boolean activeStatus = codes.get(oldCode);
newCodes.put(newCode, activeStatus);
}
}
codes.clear();
codes.putAll(newCodes);

}
}