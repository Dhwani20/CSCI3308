/* File generated by: simse.codegenerator.stategenerator.ADTGenerator */
package simse.adts.actions;
import simse.adts.objects.*;
import simse.state.ArtifactStateRepository;
import simse.state.CustomerStateRepository;
import simse.state.EmployeeStateRepository;
import simse.state.ProjectStateRepository;
import simse.state.ToolStateRepository;
import java.util.*;
public class RequireReleasePlanDoOverAction extends Action implements Cloneable
{
private Hashtable<Employee, Boolean> emps;
private Hashtable<Project, Boolean> projs;
private Hashtable<Artifact, Boolean> releaseplans;
private Hashtable<Employee, Boolean> custreps;
public RequireReleasePlanDoOverAction()
{
emps = new Hashtable<Employee, Boolean>();
projs = new Hashtable<Project, Boolean>();
releaseplans = new Hashtable<Artifact, Boolean>();
custreps = new Hashtable<Employee, Boolean>();
}

public Object clone() {
RequireReleasePlanDoOverAction cl = (RequireReleasePlanDoOverAction)(super.clone());
Hashtable<Employee, Boolean> clonedemps = new Hashtable<Employee, Boolean>();
clonedemps.putAll(emps);
cl.emps = clonedemps;
Hashtable<Project, Boolean> clonedprojs = new Hashtable<Project, Boolean>();
clonedprojs.putAll(projs);
cl.projs = clonedprojs;
Hashtable<Artifact, Boolean> clonedreleaseplans = new Hashtable<Artifact, Boolean>();
clonedreleaseplans.putAll(releaseplans);
cl.releaseplans = clonedreleaseplans;
Hashtable<Employee, Boolean> clonedcustreps = new Hashtable<Employee, Boolean>();
clonedcustreps.putAll(custreps);
cl.custreps = clonedcustreps;
return cl;
}

public Vector<SSObject> getAllParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllEmps());
all.addAll(getAllProjs());
all.addAll(getAllReleasePlans());
all.addAll(getAllCustReps());
return all;
}
public Vector<SSObject> getAllActiveParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllActiveEmps());
all.addAll(getAllActiveProjs());
all.addAll(getAllActiveReleasePlans());
all.addAll(getAllActiveCustReps());
return all;
}

public Vector<SSObject> getAllInactiveParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllInactiveEmps());
all.addAll(getAllInactiveProjs());
all.addAll(getAllInactiveReleasePlans());
all.addAll(getAllInactiveCustReps());
return all;
}
public Vector<Employee> getAllEmps()
{
Vector<Employee>a = new Vector<Employee>();
Enumeration<Employee> e = emps.keys();
for(int i=0; i<emps.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Employee> getAllActiveEmps()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = emps.keys();
for(int i=0; i<emps.size(); i++)
{
Employee key = e.nextElement();
if((emps.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Employee> getAllInactiveEmps()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = emps.keys();
for(int i=0; i<emps.size(); i++)
{
Employee key = e.nextElement();
if((emps.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addEmp(Employee a)
{
if((emps.containsKey(a)) ||( ((a instanceof SoftwareDeveloper) == false)))
{
return false;
}
else
{
emps.put(a, new Boolean(true));
return true;
}
}

public boolean removeEmp(Employee a)
{
if(emps.containsKey(a))
{
emps.remove(a);
return true;
}
return false;
}

public boolean setEmpActive(Employee a)
{
if(emps.containsKey(a))
{
emps.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setEmpInactive(Employee a)
{
if(emps.containsKey(a))
{
emps.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Project> getAllProjs()
{
Vector<Project>a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Project> getAllActiveProjs()
{
Vector<Project> a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
Project key = e.nextElement();
if((projs.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Project> getAllInactiveProjs()
{
Vector<Project> a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
Project key = e.nextElement();
if((projs.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addProj(Project a)
{
if((projs.containsKey(a)) ||( ((a instanceof TheProject) == false)) || (projs.size() >= 1))
{
return false;
}
else
{
projs.put(a, new Boolean(true));
return true;
}
}

public boolean removeProj(Project a)
{
if(projs.containsKey(a))
{
projs.remove(a);
return true;
}
return false;
}

public boolean setProjActive(Project a)
{
if(projs.containsKey(a))
{
projs.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setProjInactive(Project a)
{
if(projs.containsKey(a))
{
projs.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Artifact> getAllReleasePlans()
{
Vector<Artifact>a = new Vector<Artifact>();
Enumeration<Artifact> e = releaseplans.keys();
for(int i=0; i<releaseplans.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Artifact> getAllActiveReleasePlans()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = releaseplans.keys();
for(int i=0; i<releaseplans.size(); i++)
{
Artifact key = e.nextElement();
if((releaseplans.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Artifact> getAllInactiveReleasePlans()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = releaseplans.keys();
for(int i=0; i<releaseplans.size(); i++)
{
Artifact key = e.nextElement();
if((releaseplans.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addReleasePlan(Artifact a)
{
if((releaseplans.containsKey(a)) ||( ((a instanceof ReleasePlan) == false)) || (releaseplans.size() >= 1))
{
return false;
}
else
{
releaseplans.put(a, new Boolean(true));
return true;
}
}

public boolean removeReleasePlan(Artifact a)
{
if(releaseplans.containsKey(a))
{
releaseplans.remove(a);
return true;
}
return false;
}

public boolean setReleasePlanActive(Artifact a)
{
if(releaseplans.containsKey(a))
{
releaseplans.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setReleasePlanInactive(Artifact a)
{
if(releaseplans.containsKey(a))
{
releaseplans.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Employee> getAllCustReps()
{
Vector<Employee>a = new Vector<Employee>();
Enumeration<Employee> e = custreps.keys();
for(int i=0; i<custreps.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Employee> getAllActiveCustReps()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = custreps.keys();
for(int i=0; i<custreps.size(); i++)
{
Employee key = e.nextElement();
if((custreps.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Employee> getAllInactiveCustReps()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = custreps.keys();
for(int i=0; i<custreps.size(); i++)
{
Employee key = e.nextElement();
if((custreps.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addCustRep(Employee a)
{
if((custreps.containsKey(a)) ||( ((a instanceof CustomerRep) == false)))
{
return false;
}
else
{
custreps.put(a, new Boolean(true));
return true;
}
}

public boolean removeCustRep(Employee a)
{
if(custreps.containsKey(a))
{
custreps.remove(a);
return true;
}
return false;
}

public boolean setCustRepActive(Employee a)
{
if(custreps.containsKey(a))
{
custreps.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setCustRepInactive(Employee a)
{
if(custreps.containsKey(a))
{
custreps.put(a, new Boolean(false));
return true;
}
return false;
}
/*
* Replaces all the participants in this action with their equivalent objects
* in the current state. Calling this function solves the problem that happens
* when you clone actions -- their hashtables point to participant objects
* that were part of the previous, non-cloned state. Hence, this function
* should be called after this object is cloned.
*/
public void refetchParticipants(ArtifactStateRepository artifactRep, CustomerStateRepository customerRep, EmployeeStateRepository employeeRep, ProjectStateRepository projectRep, ToolStateRepository toolRep) {
// emp participants:
Hashtable<Employee, Boolean> newEmps = new Hashtable<Employee, Boolean>();
Iterator<Map.Entry<Employee, Boolean>> empsIterator = emps.entrySet().iterator();
while (empsIterator.hasNext()) {
Map.Entry<Employee, Boolean> entry = empsIterator.next();
Employee oldEmp = entry.getKey();
if (oldEmp instanceof SoftwareDeveloper) {
Employee newEmp = employeeRep.getSoftwareDeveloperStateRepository().get(((SoftwareDeveloper)oldEmp).getName());
Boolean activeStatus = emps.get(oldEmp);
newEmps.put(newEmp, activeStatus);
}
}
emps.clear();
emps.putAll(newEmps);

// proj participants:
Hashtable<Project, Boolean> newProjs = new Hashtable<Project, Boolean>();
Iterator<Map.Entry<Project, Boolean>> projsIterator = projs.entrySet().iterator();
while (projsIterator.hasNext()) {
Map.Entry<Project, Boolean> entry = projsIterator.next();
Project oldProj = entry.getKey();
if (oldProj instanceof TheProject) {
Project newProj = projectRep.getTheProjectStateRepository().get(((TheProject)oldProj).getName());
Boolean activeStatus = projs.get(oldProj);
newProjs.put(newProj, activeStatus);
}
}
projs.clear();
projs.putAll(newProjs);

// releaseplan participants:
Hashtable<Artifact, Boolean> newReleasePlans = new Hashtable<Artifact, Boolean>();
Iterator<Map.Entry<Artifact, Boolean>> releaseplansIterator = releaseplans.entrySet().iterator();
while (releaseplansIterator.hasNext()) {
Map.Entry<Artifact, Boolean> entry = releaseplansIterator.next();
Artifact oldReleasePlan = entry.getKey();
if (oldReleasePlan instanceof ReleasePlan) {
Artifact newReleasePlan = artifactRep.getReleasePlanStateRepository().get(((ReleasePlan)oldReleasePlan).getName());
Boolean activeStatus = releaseplans.get(oldReleasePlan);
newReleasePlans.put(newReleasePlan, activeStatus);
}
}
releaseplans.clear();
releaseplans.putAll(newReleasePlans);

// custrep participants:
Hashtable<Employee, Boolean> newCustReps = new Hashtable<Employee, Boolean>();
Iterator<Map.Entry<Employee, Boolean>> custrepsIterator = custreps.entrySet().iterator();
while (custrepsIterator.hasNext()) {
Map.Entry<Employee, Boolean> entry = custrepsIterator.next();
Employee oldCustRep = entry.getKey();
if (oldCustRep instanceof CustomerRep) {
Employee newCustRep = employeeRep.getCustomerRepStateRepository().get(((CustomerRep)oldCustRep).getName());
Boolean activeStatus = custreps.get(oldCustRep);
newCustReps.put(newCustRep, activeStatus);
}
}
custreps.clear();
custreps.putAll(newCustReps);

}
}