/* File generated by: simse.codegenerator.stategenerator.ADTGenerator */
package simse.adts.actions;
import simse.adts.objects.*;
import simse.state.ArtifactStateRepository;
import simse.state.CustomerStateRepository;
import simse.state.EmployeeStateRepository;
import simse.state.ProjectStateRepository;
import simse.state.ToolStateRepository;
import java.util.*;
public class ReleasePlanningMeetingAction extends Action implements Cloneable
{
private Hashtable<Employee, Boolean> developers;
private Hashtable<Employee, Boolean> managers;
private Hashtable<Employee, Boolean> customerreps;
private Hashtable<Artifact, Boolean> releaseplans;
private Hashtable<Artifact, Boolean> userstoriess;
private Hashtable<Project, Boolean> projs;
public ReleasePlanningMeetingAction()
{
developers = new Hashtable<Employee, Boolean>();
managers = new Hashtable<Employee, Boolean>();
customerreps = new Hashtable<Employee, Boolean>();
releaseplans = new Hashtable<Artifact, Boolean>();
userstoriess = new Hashtable<Artifact, Boolean>();
projs = new Hashtable<Project, Boolean>();
}

public Object clone() {
ReleasePlanningMeetingAction cl = (ReleasePlanningMeetingAction)(super.clone());
Hashtable<Employee, Boolean> cloneddevelopers = new Hashtable<Employee, Boolean>();
cloneddevelopers.putAll(developers);
cl.developers = cloneddevelopers;
Hashtable<Employee, Boolean> clonedmanagers = new Hashtable<Employee, Boolean>();
clonedmanagers.putAll(managers);
cl.managers = clonedmanagers;
Hashtable<Employee, Boolean> clonedcustomerreps = new Hashtable<Employee, Boolean>();
clonedcustomerreps.putAll(customerreps);
cl.customerreps = clonedcustomerreps;
Hashtable<Artifact, Boolean> clonedreleaseplans = new Hashtable<Artifact, Boolean>();
clonedreleaseplans.putAll(releaseplans);
cl.releaseplans = clonedreleaseplans;
Hashtable<Artifact, Boolean> cloneduserstoriess = new Hashtable<Artifact, Boolean>();
cloneduserstoriess.putAll(userstoriess);
cl.userstoriess = cloneduserstoriess;
Hashtable<Project, Boolean> clonedprojs = new Hashtable<Project, Boolean>();
clonedprojs.putAll(projs);
cl.projs = clonedprojs;
return cl;
}

public Vector<SSObject> getAllParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllDevelopers());
all.addAll(getAllManagers());
all.addAll(getAllCustomerReps());
all.addAll(getAllReleasePlans());
all.addAll(getAllUserStoriess());
all.addAll(getAllProjs());
return all;
}
public Vector<SSObject> getAllActiveParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllActiveDevelopers());
all.addAll(getAllActiveManagers());
all.addAll(getAllActiveCustomerReps());
all.addAll(getAllActiveReleasePlans());
all.addAll(getAllActiveUserStoriess());
all.addAll(getAllActiveProjs());
return all;
}

public Vector<SSObject> getAllInactiveParticipants()
{
Vector<SSObject> all = new Vector<SSObject>();
all.addAll(getAllInactiveDevelopers());
all.addAll(getAllInactiveManagers());
all.addAll(getAllInactiveCustomerReps());
all.addAll(getAllInactiveReleasePlans());
all.addAll(getAllInactiveUserStoriess());
all.addAll(getAllInactiveProjs());
return all;
}
public Vector<Employee> getAllDevelopers()
{
Vector<Employee>a = new Vector<Employee>();
Enumeration<Employee> e = developers.keys();
for(int i=0; i<developers.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Employee> getAllActiveDevelopers()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = developers.keys();
for(int i=0; i<developers.size(); i++)
{
Employee key = e.nextElement();
if((developers.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Employee> getAllInactiveDevelopers()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = developers.keys();
for(int i=0; i<developers.size(); i++)
{
Employee key = e.nextElement();
if((developers.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addDeveloper(Employee a)
{
if((developers.containsKey(a)) ||( ((a instanceof SoftwareDeveloper) == false)))
{
return false;
}
else
{
developers.put(a, new Boolean(true));
return true;
}
}

public boolean removeDeveloper(Employee a)
{
if(developers.containsKey(a))
{
developers.remove(a);
return true;
}
return false;
}

public boolean setDeveloperActive(Employee a)
{
if(developers.containsKey(a))
{
developers.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setDeveloperInactive(Employee a)
{
if(developers.containsKey(a))
{
developers.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Employee> getAllManagers()
{
Vector<Employee>a = new Vector<Employee>();
Enumeration<Employee> e = managers.keys();
for(int i=0; i<managers.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Employee> getAllActiveManagers()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = managers.keys();
for(int i=0; i<managers.size(); i++)
{
Employee key = e.nextElement();
if((managers.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Employee> getAllInactiveManagers()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = managers.keys();
for(int i=0; i<managers.size(); i++)
{
Employee key = e.nextElement();
if((managers.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addManager(Employee a)
{
if((managers.containsKey(a)) ||( ((a instanceof Manager) == false)))
{
return false;
}
else
{
managers.put(a, new Boolean(true));
return true;
}
}

public boolean removeManager(Employee a)
{
if(managers.containsKey(a))
{
managers.remove(a);
return true;
}
return false;
}

public boolean setManagerActive(Employee a)
{
if(managers.containsKey(a))
{
managers.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setManagerInactive(Employee a)
{
if(managers.containsKey(a))
{
managers.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Employee> getAllCustomerReps()
{
Vector<Employee>a = new Vector<Employee>();
Enumeration<Employee> e = customerreps.keys();
for(int i=0; i<customerreps.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Employee> getAllActiveCustomerReps()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = customerreps.keys();
for(int i=0; i<customerreps.size(); i++)
{
Employee key = e.nextElement();
if((customerreps.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Employee> getAllInactiveCustomerReps()
{
Vector<Employee> a = new Vector<Employee>();
Enumeration<Employee> e = customerreps.keys();
for(int i=0; i<customerreps.size(); i++)
{
Employee key = e.nextElement();
if((customerreps.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addCustomerRep(Employee a)
{
if((customerreps.containsKey(a)) ||( ((a instanceof CustomerRep) == false)))
{
return false;
}
else
{
customerreps.put(a, new Boolean(true));
return true;
}
}

public boolean removeCustomerRep(Employee a)
{
if(customerreps.containsKey(a))
{
customerreps.remove(a);
return true;
}
return false;
}

public boolean setCustomerRepActive(Employee a)
{
if(customerreps.containsKey(a))
{
customerreps.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setCustomerRepInactive(Employee a)
{
if(customerreps.containsKey(a))
{
customerreps.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Artifact> getAllReleasePlans()
{
Vector<Artifact>a = new Vector<Artifact>();
Enumeration<Artifact> e = releaseplans.keys();
for(int i=0; i<releaseplans.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Artifact> getAllActiveReleasePlans()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = releaseplans.keys();
for(int i=0; i<releaseplans.size(); i++)
{
Artifact key = e.nextElement();
if((releaseplans.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Artifact> getAllInactiveReleasePlans()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = releaseplans.keys();
for(int i=0; i<releaseplans.size(); i++)
{
Artifact key = e.nextElement();
if((releaseplans.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addReleasePlan(Artifact a)
{
if((releaseplans.containsKey(a)) ||( ((a instanceof ReleasePlan) == false)) || (releaseplans.size() >= 1))
{
return false;
}
else
{
releaseplans.put(a, new Boolean(true));
return true;
}
}

public boolean removeReleasePlan(Artifact a)
{
if(releaseplans.containsKey(a))
{
releaseplans.remove(a);
return true;
}
return false;
}

public boolean setReleasePlanActive(Artifact a)
{
if(releaseplans.containsKey(a))
{
releaseplans.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setReleasePlanInactive(Artifact a)
{
if(releaseplans.containsKey(a))
{
releaseplans.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Artifact> getAllUserStoriess()
{
Vector<Artifact>a = new Vector<Artifact>();
Enumeration<Artifact> e = userstoriess.keys();
for(int i=0; i<userstoriess.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Artifact> getAllActiveUserStoriess()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = userstoriess.keys();
for(int i=0; i<userstoriess.size(); i++)
{
Artifact key = e.nextElement();
if((userstoriess.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Artifact> getAllInactiveUserStoriess()
{
Vector<Artifact> a = new Vector<Artifact>();
Enumeration<Artifact> e = userstoriess.keys();
for(int i=0; i<userstoriess.size(); i++)
{
Artifact key = e.nextElement();
if((userstoriess.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addUserStories(Artifact a)
{
if((userstoriess.containsKey(a)) ||( ((a instanceof UserStories) == false)) || (userstoriess.size() >= 1))
{
return false;
}
else
{
userstoriess.put(a, new Boolean(true));
return true;
}
}

public boolean removeUserStories(Artifact a)
{
if(userstoriess.containsKey(a))
{
userstoriess.remove(a);
return true;
}
return false;
}

public boolean setUserStoriesActive(Artifact a)
{
if(userstoriess.containsKey(a))
{
userstoriess.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setUserStoriesInactive(Artifact a)
{
if(userstoriess.containsKey(a))
{
userstoriess.put(a, new Boolean(false));
return true;
}
return false;
}
public Vector<Project> getAllProjs()
{
Vector<Project>a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
a.add(e.nextElement());
}
return a;
}

public Vector<Project> getAllActiveProjs()
{
Vector<Project> a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
Project key = e.nextElement();
if((projs.get(key)).booleanValue() == true)
{
a.add(key);
}
}
return a;
}

public Vector<Project> getAllInactiveProjs()
{
Vector<Project> a = new Vector<Project>();
Enumeration<Project> e = projs.keys();
for(int i=0; i<projs.size(); i++)
{
Project key = e.nextElement();
if((projs.get(key)).booleanValue() == false)
{
a.add(key);
}
}
return a;
}

public boolean addProj(Project a)
{
if((projs.containsKey(a)) ||( ((a instanceof TheProject) == false)) || (projs.size() >= 1))
{
return false;
}
else
{
projs.put(a, new Boolean(true));
return true;
}
}

public boolean removeProj(Project a)
{
if(projs.containsKey(a))
{
projs.remove(a);
return true;
}
return false;
}

public boolean setProjActive(Project a)
{
if(projs.containsKey(a))
{
projs.put(a, new Boolean(true));
return true;
}
return false;
}

public boolean setProjInactive(Project a)
{
if(projs.containsKey(a))
{
projs.put(a, new Boolean(false));
return true;
}
return false;
}
/*
* Replaces all the participants in this action with their equivalent objects
* in the current state. Calling this function solves the problem that happens
* when you clone actions -- their hashtables point to participant objects
* that were part of the previous, non-cloned state. Hence, this function
* should be called after this object is cloned.
*/
public void refetchParticipants(ArtifactStateRepository artifactRep, CustomerStateRepository customerRep, EmployeeStateRepository employeeRep, ProjectStateRepository projectRep, ToolStateRepository toolRep) {
// developer participants:
Hashtable<Employee, Boolean> newDevelopers = new Hashtable<Employee, Boolean>();
Iterator<Map.Entry<Employee, Boolean>> developersIterator = developers.entrySet().iterator();
while (developersIterator.hasNext()) {
Map.Entry<Employee, Boolean> entry = developersIterator.next();
Employee oldDeveloper = entry.getKey();
if (oldDeveloper instanceof SoftwareDeveloper) {
Employee newDeveloper = employeeRep.getSoftwareDeveloperStateRepository().get(((SoftwareDeveloper)oldDeveloper).getName());
Boolean activeStatus = developers.get(oldDeveloper);
newDevelopers.put(newDeveloper, activeStatus);
}
}
developers.clear();
developers.putAll(newDevelopers);

// manager participants:
Hashtable<Employee, Boolean> newManagers = new Hashtable<Employee, Boolean>();
Iterator<Map.Entry<Employee, Boolean>> managersIterator = managers.entrySet().iterator();
while (managersIterator.hasNext()) {
Map.Entry<Employee, Boolean> entry = managersIterator.next();
Employee oldManager = entry.getKey();
if (oldManager instanceof Manager) {
Employee newManager = employeeRep.getManagerStateRepository().get(((Manager)oldManager).getName());
Boolean activeStatus = managers.get(oldManager);
newManagers.put(newManager, activeStatus);
}
}
managers.clear();
managers.putAll(newManagers);

// customerrep participants:
Hashtable<Employee, Boolean> newCustomerReps = new Hashtable<Employee, Boolean>();
Iterator<Map.Entry<Employee, Boolean>> customerrepsIterator = customerreps.entrySet().iterator();
while (customerrepsIterator.hasNext()) {
Map.Entry<Employee, Boolean> entry = customerrepsIterator.next();
Employee oldCustomerRep = entry.getKey();
if (oldCustomerRep instanceof CustomerRep) {
Employee newCustomerRep = employeeRep.getCustomerRepStateRepository().get(((CustomerRep)oldCustomerRep).getName());
Boolean activeStatus = customerreps.get(oldCustomerRep);
newCustomerReps.put(newCustomerRep, activeStatus);
}
}
customerreps.clear();
customerreps.putAll(newCustomerReps);

// releaseplan participants:
Hashtable<Artifact, Boolean> newReleasePlans = new Hashtable<Artifact, Boolean>();
Iterator<Map.Entry<Artifact, Boolean>> releaseplansIterator = releaseplans.entrySet().iterator();
while (releaseplansIterator.hasNext()) {
Map.Entry<Artifact, Boolean> entry = releaseplansIterator.next();
Artifact oldReleasePlan = entry.getKey();
if (oldReleasePlan instanceof ReleasePlan) {
Artifact newReleasePlan = artifactRep.getReleasePlanStateRepository().get(((ReleasePlan)oldReleasePlan).getName());
Boolean activeStatus = releaseplans.get(oldReleasePlan);
newReleasePlans.put(newReleasePlan, activeStatus);
}
}
releaseplans.clear();
releaseplans.putAll(newReleasePlans);

// userstories participants:
Hashtable<Artifact, Boolean> newUserStoriess = new Hashtable<Artifact, Boolean>();
Iterator<Map.Entry<Artifact, Boolean>> userstoriessIterator = userstoriess.entrySet().iterator();
while (userstoriessIterator.hasNext()) {
Map.Entry<Artifact, Boolean> entry = userstoriessIterator.next();
Artifact oldUserStories = entry.getKey();
if (oldUserStories instanceof UserStories) {
Artifact newUserStories = artifactRep.getUserStoriesStateRepository().get(((UserStories)oldUserStories).getName());
Boolean activeStatus = userstoriess.get(oldUserStories);
newUserStoriess.put(newUserStories, activeStatus);
}
}
userstoriess.clear();
userstoriess.putAll(newUserStoriess);

// proj participants:
Hashtable<Project, Boolean> newProjs = new Hashtable<Project, Boolean>();
Iterator<Map.Entry<Project, Boolean>> projsIterator = projs.entrySet().iterator();
while (projsIterator.hasNext()) {
Map.Entry<Project, Boolean> entry = projsIterator.next();
Project oldProj = entry.getKey();
if (oldProj instanceof TheProject) {
Project newProj = projectRep.getTheProjectStateRepository().get(((TheProject)oldProj).getName());
Boolean activeStatus = projs.get(oldProj);
newProjs.put(newProj, activeStatus);
}
}
projs.clear();
projs.putAll(newProjs);

}
}