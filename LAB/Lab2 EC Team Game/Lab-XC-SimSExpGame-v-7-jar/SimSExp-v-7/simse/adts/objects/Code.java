/* File generated by: simse.codegenerator.stategenerator.ADTGenerator */
package simse.adts.objects;
public class Code extends Artifact implements Cloneable
{
private String description;
private double percenterroneous;
private double completeness;
private int sumemprepnumbers;
private int sumknowscodingstandard;
private double percentrefactored;
private double percentintegrated;

public Code(String d0, double p1, double c2, int s3, int s4, double p5, double p6)
{
setDescription(d0);
setPercentErroneous(p1);
setCompleteness(c2);
setSumEmpRepNumbers(s3);
setSumKnowsCodingStandard(s4);
setPercentRefactored(p5);
setPercentIntegrated(p6);
}

public Object clone() {
Code cl = (Code)(super.clone());
cl.description = description;
cl.percenterroneous = percenterroneous;
cl.completeness = completeness;
cl.sumemprepnumbers = sumemprepnumbers;
cl.sumknowscodingstandard = sumknowscodingstandard;
cl.percentrefactored = percentrefactored;
cl.percentintegrated = percentintegrated;
return cl;
}

public String getDescription()
{
return description;
}

public void setDescription(String a)
{
description = a;
}

public double getPercentErroneous()
{
return percenterroneous;
}

public void setPercentErroneous(double a)
{
if(a < 0.0)
{
percenterroneous = 0.0;
}
else if(a > 100.0)
{
percenterroneous = 100.0;
}
else
{
percenterroneous = a;
}
}

public double getCompleteness()
{
return completeness;
}

public void setCompleteness(double a)
{
if(a < 0.0)
{
completeness = 0.0;
}
else if(a > 100.0)
{
completeness = 100.0;
}
else
{
completeness = a;
}
}

public int getSumEmpRepNumbers()
{
return sumemprepnumbers;
}

public void setSumEmpRepNumbers(int a)
{
if(a < 0)
{
sumemprepnumbers = 0;
}
else
{
sumemprepnumbers = a;
}
}

public int getSumKnowsCodingStandard()
{
return sumknowscodingstandard;
}

public void setSumKnowsCodingStandard(int a)
{
if(a < 0)
{
sumknowscodingstandard = 0;
}
else
{
sumknowscodingstandard = a;
}
}

public double getPercentRefactored()
{
return percentrefactored;
}

public void setPercentRefactored(double a)
{
if(a < 0.0)
{
percentrefactored = 0.0;
}
else if(a > 100.0)
{
percentrefactored = 100.0;
}
else
{
percentrefactored = a;
}
}

public double getPercentIntegrated()
{
return percentintegrated;
}

public void setPercentIntegrated(double a)
{
if(a < 0.0)
{
percentintegrated = 0.0;
}
else if(a > 100.0)
{
percentintegrated = 100.0;
}
else
{
percentintegrated = a;
}
}

}